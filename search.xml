<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>未选择的路</title>
      <link href="/2023/12/04/%E6%9C%AA%E9%80%89%E6%8B%A9%E7%9A%84%E8%B7%AF/"/>
      <url>/2023/12/04/%E6%9C%AA%E9%80%89%E6%8B%A9%E7%9A%84%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><em>作者：罗伯特·弗罗斯特</em></p><p>黄色的树林里分出两条路，</p><p>可惜我不能同时去涉足，</p><p>我在那路口久久伫立，</p><p>我向着一条路极目望去，</p><p>直到它消失在丛林深处。</p><p>​</p><p>但我却选了另外一条路，</p><p>它荒草萋萋，十分幽寂，</p><p>显得更诱人、更美丽；</p><p>虽然在这两条小路上，</p><p>都很少留下旅人的足迹；</p><p>​</p><p>虽然那天清晨落叶满地，</p><p>两条路都未经脚印污染。</p><p>呵，留下一条路等改日再见！</p><p>但我知道路径延绵无尽头，</p><p>恐怕我难以再回返。</p><p>​</p><p>也许多少年后在某个地方，</p><p>我将轻声叹息把往事回顾：</p><p>一片树林里分出两条路，</p><p>而我选了人迹更少的一条，</p><p>从此决定了我一生的道路。</p><hr /><h5 id="the-road-not-taken">The Road Not Taken</h5><p>Two roads diverged in a yellow wood,</p><p>And sorry I could not travel both</p><p>And be one traveler, long I stood</p><p>And looked down one as far as I could</p><p>To where it bent in the undergrowth;</p><p>​</p><p>Then took the other, as just as fair,</p><p>And having perhaps the better claim,</p><p>Because it was grassy and wanted wear;</p><p>Though as for that the passing there</p><p>Had worn them really about the same,</p><p>​</p><p>And both that morning equally lay</p><p>In leaves no step had trodden black.</p><p>Oh, I kept the first for another day!</p><p>Yet knowing how way leads on to way,</p><p>I doubted if I should ever come back.</p><p>​</p><p>I shall be telling this with a sigh</p><p>Somewhere ages and ages hence:</p><p>Two roads diverged in a wood,and I—</p><p>I took the one less traveled by,</p><p>And that has made all the difference.</p>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数笔记（下）</title>
      <link href="/2023/11/27/%E7%BA%BF%E4%BB%A3%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2023/11/27/%E7%BA%BF%E4%BB%A3%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="04ca3292fe261232128a621a791d0a7b0e7e75e24f6a8653f7feef8499303980"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 线代 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谢希仁计算机网络06-应用层</title>
      <link href="/2023/11/25/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C06-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2023/11/25/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C06-%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0caa672d96fb5bdd92f2224231735ac15712c1e1cf99fe16a2b463cedb9a5ba8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谢希仁计算机网络05-运输层</title>
      <link href="/2023/11/22/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C05-%E8%BF%90%E8%BE%93%E5%B1%82/"/>
      <url>/2023/11/22/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C05-%E8%BF%90%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="29b112116b321f66880de7ca9c26afaf1a552c472fe138e8533f07ebb3aa47ef"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谢希仁计算机网络04-网络层</title>
      <link href="/2023/11/20/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C04-%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2023/11/20/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C04-%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="423b04270add66cf7691906bb31dea84bf523df0270e1622efad84d531ed0b9d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谢希仁计算机网络03-数据链路层</title>
      <link href="/2023/11/02/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2023/11/02/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h4 id="使用点对点信道的数据链路层">3.1 使用点对点信道的数据链路层</h4><h5 id="数据链路和帧">3.1.1 数据链路和帧</h5><p>​ <strong>链路</strong>是指从一个结点到相邻节点的一段物理线路（有限或无线），而中间没有其它交换结点。链路是一条路径的组成部分。</p><p>​ 传输数据时，不仅需要物理线路，还需要一些必要的通信协议控制数据传输。若把<strong>实现该些协议的硬件与软件</strong>加到链路上，就构成了<strong>数据链路</strong>。现在最常用的方法是使用<strong>网络适配器（既有硬件也有软件）</strong>来实现这些协议。</p><p>​ 早期数据通信协议曾叫做<strong>规程 (procedure)</strong>。因此在数据链路层，规程与协议是同义语。</p><p>​ 数据链路层把网络层交下来的数据构成<strong>帧</strong>发送到链路上，以及把接收到的<strong>帧</strong>中的数据取出并上交给网络层。互联网中，网络层协议数据单元是 <strong>IP 数据报（或简称为数据报、分组或包）</strong>。</p><p>​ 点对点信道通信时的主要步骤：</p><p>​ (1) 结点 A 的数据链路层把网络层叫下来的 IP 数据报添加首部和尾部封装成帧。</p><p>​ (2) 结点 A 把封装好的帧发送给结点 B 的数据链路层。</p><p>​ (3) 若结点 B 数据链路层收到的帧无差错，则提取 IP 数据报并交给网络层，否则弃帧。</p><h5 id="三个基本问题">3.1.2 三个基本问题</h5><p>​ 三个基本问题：<strong>封装成帧</strong>、<strong>透明传输</strong>和<strong>差错检测</strong>。</p><h6 id="封装成帧">3.1.2.1 封装成帧</h6><p>​ <strong>封装成帧 (framing)</strong> 是指在一段数据前后分别添加首部和尾部，构成一个帧。首部和尾部的一个重要作用是进行<strong>帧界定</strong>。每一种链路协议都规定所能传送的帧的<strong>数据部分最大长度上限——最大传送单元 MTU (Maximum Transfer Unit)</strong>。</p><p><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261052318.png" /></p><p>​ 帧界定使用特殊的<strong>帧界定符</strong>，帧开始符 SOH （十六制编码 01）放于首部，帧结束符 EOT （十六进制编码 04)放于尾部。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261058141.png" alt="image-20231026105820053" /><figcaption aria-hidden="true">image-20231026105820053</figcaption></figure><h6 id="透明传输">3.1.2.2 透明传输</h6><p>​ 当传输数据是非 ASCII 码的文件时，如果数据中某个字节二进制代码恰好和 SOH 和 EOT 这种控制字符一样，则会产生错误。<strong>透明传输</strong>的概念是指，无论怎样的数据通过，数据链路层都能原样无差错传输该数据。</p><p>​ 为实现透明传输，发送端的数据链路层在发送数据中出现控制字符的位置前插入一个转义字符 ESC （十六进制编码 1B），接收端的数据链路层在将其送往网络层前提前删除这个插入的转义字符。此方法叫做<strong>字节填充</strong>或<strong>字符填充</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261441992.png" alt="image-20231026144110932" /><figcaption aria-hidden="true">image-20231026144110932</figcaption></figure><h6 id="差错检测">3.1.2.3 差错检测</h6><p>​ 比特在传输过程中可能会产生差错，<span class="math inline">\(0\)</span> 变成 <span class="math inline">\(1\)</span>，<span class="math inline">\(1\)</span> 变成 <span class="math inline">\(0\)</span>，这种情况叫<strong>比特差错</strong>。同一时间传输错误的比特占总传输比特数的比率叫做<strong>误码率 BER (Bit Error Rate)</strong>。但实际数据传输误码率不可能降为零，因此位保证可靠传输，必须进行差错检测。目前广泛采用<strong>循环冗余检验 CRC (Cyclic Redundancy Check)</strong> 检错技术。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261446007.png" alt="image-20231026144652892" /><figcaption aria-hidden="true">image-20231026144652892</figcaption></figure><p>​ 传输差错可分为两大类，一类是基本的比特差错，里另一类是更复杂些的<strong>帧丢失</strong>、<strong>帧重复</strong>或<strong>帧失序</strong>。因此出现比特差错与出现传输差错并不等价。为实现可靠传输，在 CRC 检错的基础上，增加了<strong>帧编号</strong>、<strong>确认</strong>和<strong>重传机制</strong>。现在互联网采用区别对待方法，对于通信质量良好的传输线路，不适用确认和重传机制，即要求数据链路层向上提供可靠传输；对于通信质量较差的链路，则采用确认重传机制，数据链路层向上提供可靠传输。</p><h4 id="点对点协议-ppp">3.2 点对点协议 PPP</h4><p>​ 通信质量较差的年代，采用可靠传输协议是一种好办法，因此当时比较流行能实现可靠传输协议的<strong>高级数据链路控制 HDLC (High-level Data Link Control)</strong>。目前对于点对点的链路，则广泛采用简单得多的 <strong>点对点协议 PPP (Point-to-Point Protocol)</strong> 。</p><h5 id="ppp-协议的特点">3.2.1 PPP 协议的特点</h5><ol type="1"><li><p>应满足需求：</p><ul><li>简单</li><li>封装成帧</li><li>透明性</li><li>多种网络层协议兼容</li><li>多种类型链路，如串行或并行，同步或异步，低速或高速</li><li>差错检测</li><li>检测连接状态</li><li>最大传送单元</li><li>网络层地址协商</li><li>数据压缩协商</li></ul></li><li><p>PPP 协议的组成</p><ol type="1"><li>一个将 IP 数据报封装到串行链路的方法。</li><li>一个用来建立、配置和测试数据链路连接的 <strong>链路控制协议 LCP (Link Control Protocol)</strong>。</li><li>一套<strong>网络控制协议 NCP (Network Control Protocol)</strong>，其中每一个协议支持不同网络层协议。</li></ol></li></ol><h5 id="ppp-协议的帧格式">3.2.2 PPP 协议的帧格式</h5><h6 id="各字段意义">1. 各字段意义</h6><p>​ 首部第一字段和尾部第二字段为标志字段 F 。</p><p>​ 首部第二、三字段无具体含义，未定义。</p><p>​ 首部第四字段是 <span class="math inline">\(2\)</span> 字节的协议字段。协议字段为 <span class="math inline">\(0x0021\)</span> 时，PPP 帧的信息字段就是 IP 数据报；协议字段为 <span class="math inline">\(0xC021\)</span>，则信息字段是 PPP 链路控制协议 LCP 的数据；而 <span class="math inline">\(0x8021\)</span> 表示这是网络层的控制数据。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261532003.png" alt="image-20231026153257957" /><figcaption aria-hidden="true">image-20231026153257957</figcaption></figure><h6 id="字节填充">2. 字节填充</h6><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261534633.png" alt="image-20231026153411583" /><figcaption aria-hidden="true">image-20231026153411583</figcaption></figure><h6 id="零比特填充">3. <strong>零比特填充</strong></h6><p>​ 发送端每遇见 <span class="math inline">\(5\)</span> 个连续的 <span class="math inline">\(1\)</span> ，则插入一个 <span class="math inline">\(0\)</span>；接收端采取相反操作。</p><h5 id="ppp-协议的工作状态">3.2.3 PPP 协议的工作状态</h5><p>​ <img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261610078.png" alt="image-20231026161026019" /></p><h4 id="使用广播信道的数据链路层">3.3 使用广播信道的数据链路层</h4><h5 id="局域网的数据链路层">3.3.1 局域网的数据链路层</h5><p>​ 局域网最主要特点：<strong>网络为一个单位所有，且地理范围和站点数目均有限</strong>。</p><p>​ 局域网优点：</p><p>​ (1) 可广播，一个站点可以很方便访问全网，主机可共享连接在局域网上的各种硬件和资源。</p><p>​ (2) 便于系统的扩展和演变，各设备位置可灵活调整或改变。</p><p>​ (3) 提高系统的可靠性 (reliability)、可用性 (availability) 和生存性 (survivability)。</p><p>​ 局域网可按网络拓扑进行分类，分为<strong>星形网</strong>（核心设备<strong>集线器</strong>）、<strong>环形网</strong>、<strong>总线网</strong>几类，其中总线网以传统以太网最为著名。经过几十年发展，以太网已经在局域网市场中占据绝对优势，以太网几乎成为局域网同义词。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310270907254.png" alt="image-20231027090759182" /><figcaption aria-hidden="true">image-20231027090759182</figcaption></figure><p>​ 从 <span class="math inline">\(10\ Mbit/s\)</span> 到 <span class="math inline">\(10\ Gbit/s\)</span> 的局域网均可用双绞线。双绞线已成为局域网中的主流传输媒体。数据率很高时，往往需要使用光纤作为传输媒体。</p><p>​ 共享信道在技术上有两种方法：</p><p>​ (1) <strong>静态划分信道</strong>，如 2.4 中的频分复用、时分复用、波分复用和码分复用，但是这种划分代价较高，不适合局域网使用。</p><p>​ (2) <strong>动态媒体接入</strong>，又称<strong>多点接入 (multiple access)</strong>，特点是信道并非在用户通信时固定分配给用户。又分为两类：</p><ul><li><strong>随机接入</strong> 所有用户可以随机发送信息，但如果恰巧有两个或多个用户同一时刻发送信息，则会产生<strong>碰撞</strong>（即<strong>冲突</strong>），使得这些用户全部发送失败。因此需要有解决碰撞的协议。</li><li><strong>受控接入</strong> 用户服从控制而不能随机发送信息，代表有分散控制的令牌环局域网和集中控制的多点线路<strong>探询 (polling)</strong>，或称<strong>轮询</strong>。</li></ul><p>​ 现在用“<strong>传统以太网</strong>”表示最初流行的 <span class="math inline">\(10 Mbit/s\)</span> 的以太网。</p><h6 id="以太网的两个标准">3.3.1.1 以太网的两个标准</h6><p>​ 世界上第一个局域网产品规约—— DIX Ethernet V2； 第一个 IEEE 的以太网标准 IEEE 802.3，数据率为 <span class="math inline">\(10\ Mbit/s\)</span>。这两个标准区别很小，因此也常把 IEEE 802.3 局域网简称以太网。</p><p>​ 为了使得数据链路层能更好适应多种局域网标准，IEEE 802 委员会将局域网的数据链路层拆成两个子层，即 <strong>逻辑链路控制 LLC (Logical Link Control)</strong> 子层和<strong>媒体接入控制 MAC (Medium Access Control)</strong> 子层。与接入媒体相关内容全部放在 MAC 子层，LLC 子层与传输媒体无关， MAC 子层对 LLC 子层来说是透明的。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310270955977.png" alt="image-20231027095503914" /><figcaption aria-hidden="true">image-20231027095503914</figcaption></figure><p>​ 现代 TCP/IP 体系经常使用的局域网只剩下 DIX Ethernet V2 而非 IEEE 802.3 中的局域网，因此逻辑链路子层 LLC（即 IEEE 802.2 标准）作用已经消失，很多厂商生产适配器上仅有 MAC 协议而没有 LLC 协议。</p><h6 id="适配器的作用">3.3.1.2 适配器的作用</h6><p>​ 适配器实现功能包含物理层和数据链路层两部分。</p><p>​ 计算机与外界局域网的连接是通过<strong>适配器 (adapter)</strong>进行的。适配器本来是主机箱内插入的一块网络接口板，又称<strong>网络接口卡 NIC (Network Interface Card)</strong>，或<strong>网卡</strong>。现在计算机主板上都已经嵌入该种适配器，不再使用单独的网卡，因此采用适配器这个术语更准确些。</p><p>​ 适配器与局域网之间通过电缆或双绞线以串行传输方式进行通信，与主机则通过计算机主板上的 I/O 总线以并行传输进行通信，因此适配器一个重要功能是<strong>进行数据串行传输与并行传输的转换</strong>。</p><p>​ 计算机的硬件地址在适配器的 ROM 中，而软件地址——IP 地址，则在计算机存储器中。</p><h5 id="csmacd-协议">3.3.2 CSMA/CD 协议</h5><p>​ 局域网上的计算机称为“<strong>主机</strong>”、“<strong>工作站</strong>”、“<strong>站点</strong>”或“<strong>站</strong>”。</p><p>​ 为了通信减半，以太网采取以下两种措施：</p><p>​ 第一，采用<strong>无连接</strong>工作方式，不必先建立连接即可发送数据。适配器对发送帧<strong>不进行编号，也不要求对方发回确认</strong>。因此以太网提供的服务随时<strong>尽最大努力的交付，即不可靠的交付</strong>。若目的站收到有差错帧，则丢，是否需要重传则<strong>有高层决定</strong>。</p><p>​ 总线同一时间只允许一台计算机发送数据，否则会产生碰撞。以太网采用最简单的随机接入，但同时使用 CSMA/CD 协议处理碰撞，意思是<strong>载波监听多点接入/碰撞检测 (Carrier Sense Multiple Access with Collision Detection)</strong>。</p><p>​ 第二，以太网发送数据采用<strong>曼彻斯特 (Manchester) 编码</strong>的信号。优点是每个码元都出现一次电压变换，可以很方便地把位同步信号提取出来；缺点则是所占频带宽度比原始基带信号增加一倍。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310271025170.png" alt="image-20231027102549093" /><figcaption aria-hidden="true">image-20231027102549093</figcaption></figure><p>​ 介绍下 CSMA/CD 协议要点。</p><p>​ “<strong>多点接入</strong>”说明其是总线型网络。</p><p>​ “<strong>载波监听</strong>”是用电子技术检测总线上有无其它计算机在发送，其实就是<strong>检测信道</strong>。发送前和发送中都必须进行信道检测。发送前检测是为了获得发送权。发送中检测则是为了及时发现碰撞，即碰撞检测。</p><p>​ “<strong>碰撞检测</strong>“亦即“<strong>边发送边监听</strong>”，几个站同时在总线上发送数据时，总线上信号电压变化幅度会增大，超过一定阈值时，就视为产生了碰撞。一旦出现碰撞，适配器立即停止发送，等待一段随机时间后再次发送。</p><p>​ <strong>电磁波在 <span class="math inline">\(1\ km\)</span> 电缆的传播时延约为 <span class="math inline">\(5\ \mu s\)</span></strong>。把总线上的<strong>单程端到端传播时延记为<span class="math inline">\(\tau\)</span></strong>。最迟经过 <span class="math inline">\(2\tau\)</span> 的时延即可确认是否发生碰撞（信息来回一次最大可能时延）。</p><p>​ 在使用 CSMA/CD 协议时，一个站不可能同时进行发送和接收，因此使用 CSMA/CD 协议的以太网只能进行<strong>半双工通信</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310271605705.png" alt="image-20231027160531598" /><figcaption aria-hidden="true">image-20231027160531598</figcaption></figure><p>​ 每一个站在发送数据后的一小段时间内，存在遭遇碰撞的可能性，这段时间是不确定的，因此称为以太网<strong>发送的不确定性</strong>。端到端往返时间 <span class="math inline">\(2\tau\)</span> 称为<strong>争用期</strong>。经过争用期检验后，才能肯定此次发送是否发生碰撞。</p><p>​ 以太网使用<strong>截断二进制指数退避 (truncated binary exponential backoff)</strong> 算法确定碰撞后重传时机，这里不多赘述。</p><p>​ 以太网规定一个最短帧长 64 字节，即 512 bit，这样发送一个帧的时间也至少需要一个争用期。凡是长度小于 64 字节的帧都是<strong>由于冲突而异常终止的无效帧</strong>。</p><p>​ <strong>强化碰撞</strong>是指发送数据一旦发生碰撞，除立即停止发送数据外，继续发送 32 或 48 比特的<strong>人为干扰信号 (jamming signal)</strong>，以便让所有用户都知道发生碰撞。</p><p>​ 以太网还规定<strong>帧间最小间隔</strong>为 <span class="math inline">\(9.6\ \mu s\)</span>，相当于 96 比特时间，是为了使得刚刚受到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备。</p><p>​ 由此，CSMA/CD 协议总结如下：</p><p>​ (1) 准备发送：组装成帧</p><p>​ (2) 检测信道：检测到信道忙，则不停检测，直至信道空闲</p><p>​ (3) 发送：边发送边监听，发送成功则回到 (1) ；发生碰撞则执行指数退避算法，等待一定时间后回到 (2)，若重传 16 次仍失败，则停止重传并向上报错。</p><h5 id="使用集线器的星形拓扑">3.3.3 使用集线器的星形拓扑</h5><p>​ <strong>集线器 (hub)</strong> 是一个<strong>物理层网络设备</strong>，通常与双绞线以太网相配合使用。10BASE-T 双绞线以太网的出现，是局域网发展史上一个非常重要的里程碑，从此以太网的拓扑就从总线型变为更加方便的星形网络，以太网也在局域网中占据统治地位。</p><p>​ 集线器有如下特点：</p><ul><li>使用集线器的以太网逻辑上仍是一个总线网，各站共享逻辑总线，仍使用 CSMA/CD 协议，同一时刻至多允许一个站发送数据。</li><li>一个集线器有多个<strong>接口</strong>，每个接口通过 RJ-45 插头用两对双绞线与一台计算机上的适配器相连。集线器像一个<strong>多接口的转发器</strong>。</li><li>集线器工作在<strong>物理层</strong>，每个接口仅仅简单转发比特，不进行碰撞检测。若发生碰撞，则所有接口都收不到正确的帧。</li><li>采用专门芯片进行自适应串音回波抵消，减少近端串音干扰（发出去的强信号对受到的弱信号的干扰）。</li></ul><p>​ <strong>堆叠式 (stackable)</strong> 集线器由 4~8 个集线器堆叠使用。</p><p>​ IEEE 802.3 标准还可以使用光纤作为传输媒体，主要作用于集线器之间的连接。</p><h5 id="以太网的信道利用率">3.3.4 以太网的信道利用率</h5><p><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310271654367.png" alt="image-20231027165412308" /> <span class="math display">\[a = \frac{\tau}{T_0}\]</span> ​ <span class="math inline">\(a\)</span> 趋近于 <span class="math inline">\(0\)</span>，表示一发生碰撞即可检测出来，信道资源被浪费时间非常少。因此为了使 <span class="math inline">\(a\)</span> 值尽量小，<strong>以太网的长度受到限制</strong>（<span class="math inline">\(\tau\)</span> 不能太大），同时<strong>以太网的帧长不能太短</strong> （否则 <span class="math inline">\(T_0\)</span> 太小）。</p><p>​ 理想状况下，不发生任何碰撞，则发送一帧时延为 <span class="math inline">\(T_0+\tau\)</span>，而帧本身发送时延为 <span class="math inline">\(T_0\)</span>，因此有极限信道利用率 <span class="math display">\[S_{max}=\frac{T_0}{T_0+\tau}=\frac{1}{1+a}\]</span> ​ 因此只有当 <span class="math inline">\(a\)</span> 远小于 <span class="math inline">\(1\)</span> 时才能得到尽可能高的极限信道利用率。</p><h5 id="以太网的-mac-层">3.3.5 以太网的 MAC 层</h5><h6 id="mac-层的硬件地址">3.3.5.1 MAC 层的硬件地址</h6><p>​ 局域网中，<strong>硬件地址</strong>又称<strong>物理地址</strong>或 <strong>MAC 地址</strong>（因地址用在 MAC 帧中）。</p><p>​ IEEE 802 标准为局域网规定一种 48 位的全球地址，是指局域网上每一台计算机中<strong>固化在适配器的 ROM 中的地址</strong>。</p><p>​ IEEE 的<strong>注册管理机构 RA (Registration Authority)</strong> 是局域网全球地址的法定管理机构，负责分配地址字段 6 字节中的前三字节（即最高 24 位）。世界上生产适配器的厂家都必须向 IEEE 购买由这三个字节构成的号，名称为 <strong>组织唯一标识符 OUI (Organizationally Unique Identifier)</strong>，通常也称<strong>公司标识符 (company_id)</strong>。地址中后三个字节由厂家自行指派，称为<strong>扩展标识符 (extended identifier)</strong>。</p><p>​ IEEE 规定地址字段第一字节的最低位为 I/G 位。I/G 表示 Individual/Group。该位为 0 时，地址字段表示一个<strong>单个站地址</strong>。该位为 1 时表示<strong>组地址</strong>，用来进行<strong>多播</strong>。因此 IEEE 只分配前三字节中的 23 位。</p><p>​ 第一字节低 2 位规定位 G/L 位，该位为 0 时是<strong>全球管理</strong>（保证全球没有相同地址），厂商向 IEEE 购买的 OUI 均属于全球管理。</p><p>​ 适配器有<strong>过滤</strong>功能，适配器收下的帧包括以下三种：</p><p>​ (1) <strong>单播 (unicast) 帧</strong>，收到的帧的 MAC 与本站硬件地址相同。</p><p>​ (2) <strong>广播 (broadcast) 帧</strong>，发送给本局域网所有站点的帧（全 1 地址）。</p><p>​ (3) <strong>多播 (multicast) 帧</strong>，发送给本局域网上一部分站点的帧。</p><p>​ 所有适配器都应能够识别前两种帧，有的适配器可用编程方法识别第三种帧。</p><p>​ 适配器还可设置为一种特殊的工作方式即<strong>混杂方式 (promiscuous mode)</strong>。窃听所有的帧，经常为黑客所使用。</p><h6 id="mac-帧的格式">3.3.5.2 MAC 帧的格式</h6><p>​ <img src="https://raw.githubusercontent.com/mlger/Pict/main/202311021938027.png" alt="image-20231102193850945" /></p><p>​ 数据字段小于 64 字节时，MAC 子层会在其后加入一个填充字段。</p><p>​ MAC 子层向下传到物理层时还要在帧前插入 8 字段，第一字段为 7 个字节的<strong>前同步码 （1 和 0 的交替码）</strong>，使得适配器接受 MAC 帧时迅速调整时钟频率。第二字段为<strong>帧开始定界符</strong>，定义为 <code>10101011</code>，前 6 位作用与前同步码相同，最后两个连续 1 预告信息接收。</p><p>​ 由于曼彻斯特码的使用，以太网不需要着帧结束定界符，由此也不需要插入字节来保证传输透明。</p><h4 id="扩展的以太网">3.4 扩展的以太网</h4><p>​ <strong>扩展的以太网在网络层看来仍然是一个网络</strong>。</p><h5 id="物理层扩展">3.4.1 物理层扩展</h5><p>​ 扩展主机与集线器之间距离一种简单方法是使用光纤和一对光纤调制解调器。</p><p>​ 使用多个集线器，可以构成覆盖范围更大的多级星形结构以太网。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202311021954027.png" alt="image-20231102195453931" /><figcaption aria-hidden="true">image-20231102195453931</figcaption></figure><p>​ 但这种多级结构的集线器以太网也有一些缺点。</p><p>​ (1) 多个系以太网相连把多个碰撞与变成一个，但此时最大吞吐量仍然是一个系的吞吐量 10 Mbits/s。</p><p>​ (2) 若不同系用不同以太网技术（如数据率不同），则无法互连。</p><h5 id="数据链路层扩展">3.4.2 数据链路层扩展</h5><p>​ 最初使用<strong>网桥 (bridge)</strong>，对 MAC 帧的目的地址进行 <strong>转发</strong> 和 <strong>过滤</strong>。</p><p>​ <strong>交换式集线器 (switching hub)</strong> 也称<strong>交换机 (switch)</strong> 或 <strong>第二层交换机 (L2 switch)</strong> 很快淘汰了网桥，这种设备<strong>工作在数据链路层</strong>。</p><h6 id="交换机特点">3.4.2.1 交换机特点</h6><p>​ 实质上是一个<strong>多接口网桥</strong>，通常有十几个或更多接口。具有<strong>并行性</strong>，能同时连通多对主机进行通信，相互通信主机<strong>独占传输媒体，无碰撞地传输数据</strong>。</p><p>​ 交换机的接口还有存储器，能在输出端口繁忙时将到来的帧进行缓存。</p><p>​ 交换机即插即用，内部<strong>帧交换表</strong>是通过<strong>自学习</strong>算法自动逐渐建立。</p><p>​ 许多交换机对收到的帧采用存储转发，但有些交换机用<strong>直通</strong>的交换方式，提高了帧的转发速度，但缺点是少了检查差错步骤。</p><h6 id="交换机的自学习功能">3.4.2.2 交换机的自学习功能</h6><p>​ <del>懒得写，看书吧。</del></p><p>​ 为防止环状网络拓扑导致的资源浪费，IEEE 的 802.1D 标准制定了<strong>生成树协议 STP (Spanning Tree Protocol)</strong>，不改变物理上的网络拓扑，但从逻辑上切断某些链路，消除环状结构的存在。</p><p>​ 随着站点数目增多和交换机成本的下降，传统总线以太网迅速为星形以太网所取代，但由于<strong>仍采用以太网的帧结构</strong>，故仍称以太网。</p><h5 id="虚拟局域网">3.4.3 虚拟局域网</h5><p>​ <img src="https://raw.githubusercontent.com/mlger/Pict/main/202311022019173.png" alt="image-20231102201909117" /></p><p>​ 利用交换机能方便地实现<strong>虚拟局域网 VLAN (Virtual LAN) </strong>，虚拟局域网限制接收广播信息的计算机数，使得网络不会因传播过多的广播信息（即“<strong>广播风暴</strong>”）而引起性能恶化。</p><p>​ 1988 年 IEEE 批准了 802.3ac 标准，该标准定义了以太网帧格式的扩展，以支持虚拟局域网。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202311022022437.png" alt="image-20231102202204367" /><figcaption aria-hidden="true">image-20231102202204367</figcaption></figure><p>​ 以太网最大帧长从原来的 1518 字节变为 1522 字节。</p><h4 id="高速以太网">3.5 高速以太网</h4><h5 id="base-t-以太网">3.5.1 100BASE-T 以太网</h5><p>​ 在双绞线上传输 100 Mbit/s 基带信号的星形拓扑以太网，但仍使用 IEEE 802.3 的 CSMA/CD 协议，又称<strong>快速以太网 (Fast Ethernet)</strong>。现在快速以太网正式标准为 IEEE 802.3u。</p><p>​ IEEE 802.3u 标准并未包括对同轴电缆支持，由细缆以太网升级到快速以太网必须重新布线，因此现在 10/100 Mbit/s 的以太网均无屏蔽双绞线布线。</p><p><del>更快的以太网就不写了，看书看吐了。。。。。</del>#</p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程作业 code</title>
      <link href="/2023/10/22/%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
      <url>/2023/10/22/%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<p>本页面将<strong>计组</strong>和<strong>数据结构与算法</strong>两门课的编程作业代码于 ddl /发布三周后公布，仅供参考。如有错误或可改进之处，敬请联系 Lg，直接 qq 联系或 <code>1370120724@qq.com</code> 均可。</p><table><thead><tr class="header"><th>计组</th><th>writer</th></tr></thead><tbody><tr class="odd"><td><a href="https://box.nju.edu.cn/f/1929f5477a814e68aa56/?dl=1">COA_hw1</a></td><td>Lg</td></tr><tr class="even"><td><a href="https://box.nju.edu.cn/f/1950f62a50374ff9b2d0/?dl=1">COA_hw2</a></td><td>Lg</td></tr><tr class="odd"><td><a href="https://box.nju.edu.cn/f/010a76d95c1545d29262/?dl=1">COA_hw3</a></td><td>zz</td></tr><tr class="even"><td><a href="https://box.nju.edu.cn/f/7932ebf9e0ec48dca483/?dl=1">COA_hw5</a></td><td>Lg</td></tr><tr class="odd"><td><a href="https://box.nju.edu.cn/f/8fef2c4fbe6c4c2a8df2/?dl=1">COA_hw6</a></td><td>Lg</td></tr><tr class="even"><td><a href="https://box.nju.edu.cn/f/5a95c20bc470455787de/?dl=1">COA_hw7（含 pdf 附件）</a></td><td>Lg</td></tr></tbody></table><table><thead><tr class="header"><th>数据结构与算法</th><th>writer</th></tr></thead><tbody><tr class="odd"><td><a href="https://box.nju.edu.cn/f/0aa0a872c19a4b4a8af9/?dl=1">DS_hw1</a></td><td>Lg</td></tr><tr class="even"><td><a href="https://box.nju.edu.cn/f/eaca1c8b47874f1caf43/?dl=1">DS_hw2</a></td><td>Lg</td></tr><tr class="odd"><td><a href="https://box.nju.edu.cn/f/2e65d5aa45e84fd5815f/?dl=1">DS_hw3</a></td><td>Lg</td></tr></tbody></table><blockquote><p>​ 也许你感觉自己的努力总是徒劳无功，但不必怀疑，你每天都离顶点更进一步。今天的你离顶点还遥遥无期。但你通过今天的努力，积蓄了明天勇攀高峰的力量。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谢希仁计算机网络02-物理层</title>
      <link href="/2023/10/22/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C02-%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2023/10/22/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C02-%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h4 id="物理层的基本概念">2.1 物理层的基本概念</h4><p>​ 用于物理层的协议也称为<strong>规程(procedure)</strong>。</p><p>​ 可将物理层的主要任务描述为确定与传输媒体的接口有关的一些特性，即：</p><p>​ (1) <strong>机械特性</strong>：指明接口所用接线器的形状尺寸、引脚数目排列等。</p><p>​ (2) <strong>电气特性</strong>：指明接口电缆各条线电压范围。</p><p>​ (3) <strong>功能特性</strong>：指明某条线某电平的电压的意义。</p><p>​ (4) <strong>过程特性</strong>：指明不同功能的各种可能事件的出现顺序。</p><p>​ 数据在计算机内部采用<strong>并行传输</strong>，但在通信线路上一般采用<strong>串行传输</strong>，因此物理层还要完成传输方式的转换。</p><h4 id="数据通信的基础知识">2.2 数据通信的基础知识</h4><h5 id="数据通信系统的模型">2.2.1 数据通信系统的模型</h5><p>​ 数据通信系统可划分为三大部分：<strong>源系统</strong>（或<strong>发送端、发送方</strong>）、<strong>传输系统</strong>（或<strong>传输网络</strong>）和<strong>目的系统</strong>（或<strong>接收端、接收方</strong>）</p><p>​ 源系统一般包含两部分：</p><ul><li><strong>源点(source)</strong>：产生要传输的数据。又称<strong>源站</strong>或<strong>信源</strong>。</li><li><strong>发送器</strong>：将源点产生数据进行编码，之后才能进行传输。如<strong>调制器</strong>。</li></ul><p>​ 目的系统一般包含两部分：</p><ul><li><strong>接收器</strong>：接受传输信号，并转化为目标设备能处理的信息。如<strong>解调器</strong>。</li><li><strong>终点(destination)</strong>：接受比特流</li></ul><p>​ 现在很多计算机使用内置的调制解调器，用户在计算机外看不见调制解调器。</p><p>​</p><p>通信的目的是传送<strong>消息(message)</strong>。<strong>数据(data)</strong>是运送消息的实体。<strong>信号(signal)</strong>是数据的电气或电磁表现。信号可分为两大类：</p><p>​ (1) <strong>模拟信号</strong>，或<strong>连续信号</strong>：如用户家中的调制解调器到电话端局之间的用户线上的信号。</p><p>​ (2) <strong>数字信号</strong>，或<strong>离散信号</strong>：如用户家中计算机到调制解调器之间，或电话网中继线上传送的信号。使用时间域（或称时域）的波形表示数字信号时，取不同离散数值的基本波形称为<strong>码元</strong>。</p><h5 id="有关信道channel的几个基本概念">2.2.2 有关<strong>信道(channel)</strong>的几个基本概念</h5><p>​ 从通信双方的交互方式来看，有三种基本通信方式：</p><p>​ (1) <strong>单向通信</strong>：也称<strong>单工通信</strong>。如无线电广播，或有线电广播及电视广播。</p><p>​ (2) <strong>双向交替通信</strong>：也称<strong>半双工通信</strong>，双方均可发送，但不可同时发送。</p><p>​ (3) <strong>双向同时通信</strong>：也称<strong>全双工通信</strong>。</p><p>​ 单向通信仅需一条信道，而双向交替通信和双向同时通信均需两条。全双工通信效率最高。</p><p>​</p><p>​ 来自信源的信号称为<strong>基带信号</strong>，往往含有较多低频成分甚至直流成分，而许多信道并不能传输这种低频或直流分量，因此必须对基带信号进行<strong>调制(coding)</strong>。使用<strong>载波(carrier)</strong>进行调制，把基带信号频率搬移到较高频段，并转化为模拟信号，便可更好在模拟信道中传输。载波调制后信号称<strong>带通信号</strong>，调制称为<strong>载波调制</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211254285.jpg" alt="0d28fb91042f8ce7aa2ce716249dd2d" /><figcaption aria-hidden="true">0d28fb91042f8ce7aa2ce716249dd2d</figcaption></figure><h5 id="信道极限容量">2.2.3 信道极限容量</h5><p>​ 限制码元在信道上传输速率的因素：</p><p>​ (1) 信道可通过频率范围</p><p>​ 信道能通过频率范围有限，高频分量往往无法通过信道。高频分量传输时受衰减，接收端受到信号便失去了码元间的清晰界限，此现象称<strong>码间串扰</strong>。</p><p>​ 奈氏准则告诉我们：<strong>任何信道中，码元传输速率有上限，超过该上限，则会出现严重码间串扰问题，使接收端对码元的判决称为不可能。</strong></p><p>​ (2) 信噪比</p><p>​ 信噪比是信号的平均功率与噪声的平均功率比值，记作 <strong>S/N</strong>，度量单位为<strong>分贝</strong>。</p><p>​ 香农公式指出，信道的<strong>极限传输速率 C </strong>为 <span class="math display">\[C = W\log_2(1+S/N)\ \ \ (bit/s)\]</span> ​ 其中 <span class="math inline">\(W\)</span> 为信道带宽， <span class="math inline">\(S\)</span> 和 <span class="math inline">\(N\)</span> 分别表示信号与噪声的平均功率。</p><p>​ 香农公式表面，信噪比越大，极限传输速率越高。对于频带宽度已确定的信道，信噪比也无法继续提高，码元传输速率也达上界，欲提升传输速率，可通过编码的方法<strong>让每一个码元携带更多比特信息量</strong>。</p><h4 id="物理层下面的传输媒体">2.3 物理层下面的传输媒体</h4><p>​ <strong>传输媒体</strong>分为<strong>导引型传输媒体</strong>和<strong>非导引型传输媒体</strong>两大类。</p><h5 id="导引型传输媒体">2.3.1 导引型传输媒体</h5><h6 id="双绞线">1. <strong>双绞线</strong></h6><p>​ 两根互相绝缘铜导线绞合，以减少对相邻导线的电磁干扰。使用最多地方为电话系统。</p><p>​ 模拟运输和数字运输均可使用双绞线，通信距离为几到十几公里。</p><p>​ 为提升抗电磁干扰能力，可在外面加上一层用金属丝编织成的屏蔽层，称为<strong>屏蔽双绞线</strong>，简称 <strong>STP(Shielded Twisted Pair)</strong>。<strong>无屏蔽双绞线</strong>简称 <strong>UTP(Unshielded Twisted Pair)</strong> 。</p><p>​ “商用建筑物电信布线标准”—— <strong>EIA/TIA-568-A</strong> ——规定了 5 个种类的 UTP 标准，最常用的是 5 类线。</p><p>​ <img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211404631.png" alt="image-20231021140449514" /></p><h6 id="同轴电缆">2. <strong>同轴电缆</strong></h6><p>​ 由内导体铜质芯线、绝缘层、网状编织外导体屏蔽层以及保护塑料外层组成。具有良好抗干扰特性，被广泛用于传输较高速率的数据。</p><p>​ 目前主要用在有线电视网的居民小区中。</p><h6 id="光缆">3. <strong>光缆</strong></h6><p>​ <strong>光纤</strong>在发送端有光源，可采用发光二极管或半导体激光器。接收端用光电二极管做成光检测器，可还原出电脉冲。原理是利用光的全反射。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211409293.png" alt="image-20231021140938197" /><figcaption aria-hidden="true">image-20231021140938197</figcaption></figure><p>​ 现代工艺可制造出超低损耗光纤，即做到传输数公里而没什么衰耗。这是光纤通信飞速发展的最关键因素。</p><p>​ 可以存在多条不同角度入射光线在同一光纤中传输，称为<strong>多模光纤</strong>。但光脉冲传输时会展宽，因此多模光纤<strong>仅适用于近距离传输</strong>。</p><p>​ 光纤优点：</p><p>​ (1) 通信容量大。</p><p>​ (2) 传输损耗小，中继距离长，对远距离传输经济。</p><p>​ (3) 抗雷和电磁干扰性能好，在大电流脉冲干扰下尤为重要。</p><p>​ (4) 无串音干扰，保密性好。</p><p>​ (5) 体积小，重量轻。</p><h6 id="架空明线">4. <strong>架空明线</strong></h6><p>​ 在电线杆上架设互相绝缘的明线（铜线或铁线）。许多国家都已经停止铺设，目前我国一些农村与边远地区仍使用。</p><h5 id="非导引型传输媒体">2.3.2 非导引型传输媒体</h5><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211418400.png" alt="image-20231021141801277" /><figcaption aria-hidden="true">image-20231021141801277</figcaption></figure><p>​ 无线传输可使用频段很广，紫外线和更高的波段目前还不能用于通信。</p><p>​ 短波通信（即高频通信）主要靠电离层反射，但电离层不稳定产生的衰落现象和反射产生的多径效应，使得短波通信质量较差。因此短波无线电台一般采用低速传输。</p><h6 id="微波通信">2.3.2.1 微波通信</h6><p>​ <strong>无线电微波通信</strong>在数据通信中具有重要地位，频率范围为 <span class="math inline">\(300\ MHz\sim 300\ GHz\)</span> （波长 <span class="math inline">\(1\ m\sim1\ mm\)</span>），主要用 <span class="math inline">\(2\sim40\ GHz\)</span> 范围。微波在空间主要是直线传播，会穿过电离层进入宇宙空间，因此不像短波可以反射到地面很远地方。微波通信主要分为<strong>地面微波接力通信</strong>和<strong>卫星通信</strong>两种方式。</p><p>​ 由于地球是个曲面，微波直线传输距离受到限制，因此需要在两个通讯点间建立若干中继站，进行<strong>接力</strong>。微波接力通信可传输电话、电报、图像、数据等信息，特点是：</p><p>​ (1) 频率高，频段范围宽，通信信道容量大。</p><p>​ (2) 受到干扰小，质量高。</p><p>​ (3) 建设投资少，见效快，易于跨越山区、江河。</p><p>​ 但也有如下缺点：</p><p>​ (1) 相邻站必须直视，不可有障碍物。有时一个天线发出信号也会分成几条略有差别路径，造成失真。</p><p>​ (2) 有时会受到恶劣天气影响。</p><p>​ (3) 隐蔽性和保密性差</p><p>​ (4) 大量中继站使用和维护需要耗费大量人力物力。</p><h6 id="卫星通信">2.3.2.2 卫星通信</h6><p>​ 利用位于约 <span class="math inline">\(3\)</span> 万 <span class="math inline">\(6\)</span> 千公里高空的同步卫星作为中继器。主要优缺点与地面微波通信差不多。但<strong>具有较大传播时延</strong>。费用较高。</p><p>​ 由于在同步卫星轨道架设卫星数量有限，因此在卫星上使用不同频段来进行通信，保证大的通信容量资源。</p><p>​ 红外通信、激光通信也用于非导引型媒体。可用于近距离笔记本电脑相互传送数据。</p><h4 id="信道复用技术">2.4 信道复用技术</h4><h5 id="频分复用时分复用与统计时分复用">2.4.1 频分复用、时分复用与统计时分复用</h5><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211436769.png" alt="image-20231021143631664" /><figcaption aria-hidden="true">image-20231021143631664</figcaption></figure><p>​ <strong>频分复用 FDM (Frequency Division Multiplexing)</strong> 的所有用户<strong>在同样时间占用不同带宽资源</strong>。</p><p>​ <strong>时分复用 TDM (Time Division Multiplexing)</strong> 则是将时间划分为一段段等长的 TDM 帧，所有用户<strong>在不同时间占用同样的频带宽度</strong>。</p><p>​ <strong>复用器(multiplexer)</strong> 和<strong>分用器(demultiplexer)</strong> 成对使用。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211439720.png" alt="image-20231021143935600" /><figcaption aria-hidden="true">image-20231021143935600</figcaption></figure><p>​ <strong>统计时分复用 STDM (Statistic TDM)</strong> 是一种改进的时分复用，能明显提高信道利用率。使用<strong>集中器(concentrator)</strong> 进行复用。集中器也称<strong>智能复用器</strong>。</p><p>​ <img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211444418.png" alt="image-20231021144401327" /></p><h5 id="波分复用">2.4.2 波分复用</h5><p>​ <strong>波分复用 WDM (Wavelength Division Multiplexing)</strong> 就是<strong>光的频分复用</strong>。一根光纤复用几十路或更多路光载波信号，使用<strong>密集波分复用 DWDM (Dense WDM)</strong> 这一名词。</p><p>​ <strong>掺铒光纤放大器 EDFA (Erbium Doped Fiber Amplifier)</strong> 不需要进行光电转化直接对光信号进行放大。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211448096.png" alt="image-20231021144822976" /><figcaption aria-hidden="true">image-20231021144822976</figcaption></figure><h5 id="码分复用">2.4.3 码分复用</h5><p>​ <strong>码分复用 CDM (Code Division Multiplexing)</strong> 是另一种共享信道方法，也称<strong>码分多址 CDMA (Code Division Multiple Access)</strong> 。每个用户可以在同一时间用同样频带进行通信。<strong>各用户间不会造成干扰，具有很强抗干扰能力，频谱类似于白噪声，不易被敌人发现</strong>。</p><p>​ CDMA 中，每一个比特时间再划分为 <span class="math inline">\(m\)</span> 个短的间隔，称为<strong>码片 (chip)</strong>。通常 <span class="math inline">\(m\)</span> 取 <span class="math inline">\(64\)</span> 或 <span class="math inline">\(128\)</span>。一个站如果发送比特 <span class="math inline">\(1\)</span> ，则表示发送该码片，发送 <span class="math inline">\(0\)</span> 则表示该码片的反码。如此每发送 <span class="math inline">\(b\)</span> 个比特，实际信息则<strong>扩频</strong>为 <span class="math inline">\(mb\)</span> 个比特。该种扩频方式属于<strong>直接序列扩频 DDSS (Direct Sequence Spread Spectrum)</strong>。另一种扩频方式为 <strong>调频扩频 FHSS (Frequency Hopping Spread Spectrum)</strong>。</p><p>​ CDMA 要求每一个站分配的码片向量各不相同且<strong>相互正交</strong>。实际系统采用<strong>伪随机码序列</strong>。</p><p>​ 任何一个码片与自身内积为 <span class="math inline">\(1\)</span>，与其反码内积为 <span class="math inline">\(-1\)</span> 。</p><p>​ 结合<strong>全球定位系统 GPS</strong>，所有的站可以同步发送码片序列。若 X 站接受 S 站发送的数据，则需预先知道 S 站特有的码片序列，然后将接受到的信号与 S 站的码片序列作内积，即可解码。</p><h4 id="数字传输系统">2.5 数字传输系统</h4><p>​ 早期数字传输系统缺点：</p><p>​ (1) <strong>速率标准不统一。</strong></p><p>​ (2) <strong>不是同步传输。</strong></p><p>​ 为解决上述问题，美国于 1988 年首先推出一个数字传输标准，叫<strong>同步光纤网 SONET (Synchronous Optical Network)</strong>。</p><p>​ ITU-T 以 SONET 为基础，制定国际标准<strong>同步数字系列 SDH (Synchronous Digital Hierarchy)</strong>。 SDH/SONET 标准的制定及各国的统一运用，实现了数字传输体制上的世界性标准。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211642004.png" alt="image-20231021164224886" /><figcaption aria-hidden="true">image-20231021164224886</figcaption></figure><h4 id="宽带接入技术">2.6 宽带接入技术</h4><h5 id="adsl-技术">2.6.1 ADSL 技术</h5><p>​ <strong>非对称数字用户线 ADSL (Asymmetric Digital Subscriber Line)</strong> 技术是用数字技术<strong>对现有的模拟电话用户线进行改造</strong>，使它能够承载宽带数字业务。 下行带宽（从 ISP 到用户）远远大于上行带宽（从用户到 ISP ）。传输距离取决于数据率与线径。</p><p>​ ADSL 在用户线两端各安装一个 ADSL 调制解调器，我国目前采用的实现方法是 <strong>离散多音调 DMT (Discrete Multi-Tone) 调制技术</strong>。 ADSL 并不能保证固定的数据率。 其最大优点是不需要重新布线。</p><p>​ 基于 ADSL 的接入网三大组成部分：<strong>数字用户线接入复用器 DSLAM (DSL Access Multiplexer)</strong>，用户线和用户家中一些设施。 ADSL 调制解调器必须成对使用，把端局和用户家中的 ADSL 调制解调器分别记为 ATU-C（C 代表<strong>端局 (Central Office)</strong>）和 ATU-R （R代表<strong>远端 (Remote)</strong>）。用户电话通过<strong>分离器 (Splitter)</strong> 与 ATU-R 连在一起。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310220934571.png" alt="image-20231022093405458" /><figcaption aria-hidden="true">image-20231022093405458</figcaption></figure><p>​ ADSL 技术也在发展，第二代 ADSL 改进的地方主要为：</p><p>​ (1) 通过提高调制效率得到更高的数据率。</p><p>​ (2) 采用<strong>无缝速率自适应技术 SRA (Seamless Rate Adaptation)</strong>，自适应调整速率。</p><p>​ (3) 改善线路质量测评和故障定位功能。</p><p>​ ADSL 技术并不适用于企业，原因在于企业通常需要使用上行信道发送大量数据给用户。为满足企业需要，ADSL 技术有几种变型，记为 xDSL。</p><h5 id="光纤同轴混合网">2.6.2 光纤同轴混合网</h5><p>​ <strong>光纤同轴混合网 （HFC 网，HFC 是 Hybrid Fiber Coax 缩写）</strong>是基于有线电视网基础上开发的一种居民宽带接入网，主要特点如下：</p><p>​ 把原有有线电视网同轴电缆主干部分该换为光纤，从头端连接到<strong>光纤节点 (fiber node)</strong>。光纤节点光信号转化为电信号，通过同轴电缆传输到每个家庭。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310220944400.png" alt="image-20231022094401301" /><figcaption aria-hidden="true">image-20231022094401301</figcaption></figure><p>​ 模拟电视机要能够接受数字电视信号，需要一个<strong>机顶盒 (set-top box)</strong>连接在同轴电缆与电视机之间。若欲接入互联网，还需增加 HFC 网所使用的调制解调器，称为 <strong>电缆调制解调器 (cable modem)</strong>。</p><h5 id="fttx-技术">2.6.3 FTTx 技术</h5><p>​ <strong>光纤到户 FTTH (Fiber To The Home)</strong> 两个问题：</p><p>​ (1) 价格高昂。</p><p>​ (2) 一般家庭用户没有这样高的数据率需求。</p><p>​ 这种情况下，出现了多种宽带光纤接入方式，称为 FTTx ，x 表示不同的光纤接入地点。</p><p>​ 为有效利用光纤资源，光纤干线和用户之间，需要铺设一段中间转换装置即 <strong>光配线网 ODN (Optical Distribution Network)</strong>，使得数十个家庭用户可以共享一根光纤。 五元的逛配线网称为<strong>无源光网络 PON (Passive Optical Network)</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310221001923.png" alt="image-20231022100126778" /><figcaption aria-hidden="true">image-20231022100126778</figcaption></figure><p>​ 光纤干线与<strong>光线路终端 OLT (Optical Line Terminal)</strong> 相连，OLT 把收到的下行数据发往无源的 1:N <strong>光分路器 (splitter)</strong> ，然后以广播方式向所有用户端的<strong>光网络单元 ONU (Optical Network Unit)</strong> 发送。</p><p>​ 光配线网采用波分复用，上行和下行分别使用不同的波长。</p><p>​ 目前已实现了多种不同的 FTTx， 如 <strong>光纤到路边 FTTC（C 表示 Curb）</strong>、<strong>光纤到小区 FTTZ（Z 表示 Zone）</strong>、<strong>光纤到大楼 FTTB（B 表示 Building）</strong>、<strong>光纤到楼层 FTTF（F 表示 Floor）</strong>、<strong>光纤到办公室 FTTO （O 表示 Office）</strong>、<strong>光纤到桌面 FTTD（D 表示 Desk）</strong>等等。</p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组01-计算机系统概述</title>
      <link href="/2023/09/08/%E8%AE%A1%E7%BB%8401-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/09/08/%E8%AE%A1%E7%BB%8401-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="概念">1.1 概念</h4><ul><li>何为计算机：计算机是指“<strong>通用电子计算机</strong>”<ul><li>通用：不是专用设备</li><li>电子：采用电子元器件</li><li>数字：信息采用数字化形式表示</li></ul></li><li>计算机系统：硬件和软件</li><li>何为计算机“<strong>组织</strong>”：操作单元及其互联连接<ul><li>对编程人员不可见</li><li>包括：控制信号，存储技术等</li></ul></li><li>何为计算机”<strong>结构</strong>“：直接影响逻辑程序执行的属性<ul><li>对编程人员可见</li><li>包括：指令集，表示数据类型的位数等</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/mlger/Pict/main/202309081604546.png" /></p><ul><li><strong>指令集体系结构</strong>： <strong>ISA</strong> ，有时称为<strong>指令系统</strong>。 ISA 是一种规约，规定如何使用硬件。<ul><li>可执行指令的集合，包含指令格式、操作种类及操作数的规定</li><li>指令可以接受的操作数类型</li><li>操作数所能存放的寄存器组的结构，包括每个寄存器的名称、编号、长度和用途</li><li>操作数所能存放的<strong>存储空间的大小和编址方式</strong></li><li>操作数在存储空间存放时按照<strong>大端还是小端方式存放</strong></li><li>指令获取操作数的方式，即<strong>寻址方式</strong></li><li>指令执行过程的控制方式，包括<strong>程序计数器（PC）、条件码定义</strong>等</li></ul></li><li>ISA 与组成之间的关系：计算机组成必须能够<strong>实现 ISA 规定的功能</strong>，如提供 GPR 、标志、运算电路等，<strong>一种 ISA 可以有不同的计算机组成</strong>。</li></ul><h4 id="计算机简史">1.2 计算机简史</h4><h5 id="第一代真空管">1.2.1 第一代：真空管</h5><ul><li>ENIAC ：第一台<strong>通用</strong>计算机，十进制，手动编程</li><li>ABC ：第一台<strong>电子</strong>计算机，不可编程</li><li>EDVAC ：冯·诺伊曼架构（普林斯顿架构）</li><li>三个基本原则：<ul><li>二进制</li><li>存储程序</li><li>5个组成部分<ul><li>主存储器：地址和存储内容</li><li>算术逻辑单元 / 处理单元：执行信息处理</li><li>程序控制单元 / 控制单元：指挥信息处理</li><li>输入设备</li><li>输出设备</li></ul></li></ul></li></ul><h5 id="第二代晶体管">1.2.2 第二代：晶体管</h5><ul><li>体积更小、更便宜、发热更少</li><li>使用高级语言编程，并为计算机提供了系统软件</li></ul><h5 id="第三代中小规模集成电路">1.2.3 第三代：中小规模集成电路</h5><h5 id="第四代超大规模集成电路">1.2.4 第四代：（超）大规模集成电路</h5><ul><li>思想：<ul><li>将整个电路安装在很小的硅片上，而不是用分立元件搭成的等价电路</li><li>晶体管可以通过金属化相互连接，形成电路</li></ul></li><li><ul><li></li></ul></li></ul><h4 id="计算机发展">1.3 计算机发展</h4><h5 id="摩尔定律">1.3.1 摩尔定律</h5><ul><li>价格不变时，单芯片上所能包含的晶体管数量每年翻一番 (1965-1969) / 1970年起减慢为每18个月翻一番</li><li>影响：<ul><li>更小尺寸带来更多<strong>灵活性</strong>与<strong>可能性</strong></li><li>成本下降</li><li><strong>减小电能损耗与冷却要求</strong></li><li><strong>芯片间连接更少</strong>，更可靠</li></ul></li></ul><h4 id="计算机性能">1.4 计算机性能</h4><h5 id="cpu-性能">1.4.1 CPU 性能</h5><ul><li>计算机设计主要目标：提升 CPU 性能</li><li>系统时钟<ul><li>时钟频率： 1s 内执行基本操作的次数</li><li>始终周期：执行每次最基本操作的时间</li></ul></li><li>指令执行： <span class="math inline">\(CPI_i\)</span> 表示第 <span class="math inline">\(i\)</span> 种指令需要周期数， <span class="math inline">\(I_i\)</span> 表示第 <span class="math inline">\(i\)</span> 类指令条数，则有</li></ul><p><span class="math display">\[CPI=\frac{\sum_{i=1}^n(CPI_i \times I_i)}{I_c},I_c=\sum_{i=1}^n I_i\]</span></p><p>​ 执行一个程序的处理时间表示为 <span class="math display">\[T=I_c\times CPI \times t\]</span></p><ul><li>每秒百万条指令（ MIPS ）：</li></ul><p><span class="math display">\[MIPS = \frac{I_c}{T\times 10^6}=\frac{f}{CPI\times 10^6}\]</span></p><ul><li>每秒百万条浮点操作（ MFLOPS ）：</li></ul><p><span class="math display">\[MFLOPS=\frac{N_{floating-point\ op}}{T\times 10^6}\]</span></p><h5 id="性能设计的基本原则">1.4.2 性能设计的基本原则</h5><ul><li><strong>大概率事件优先原则</strong>：对于大概率事件，赋予优先的处理权与资源使用权。</li></ul><p><span class="math display">\[系统加速比=\frac{总执行时间_{改进前}}{总执行时间_{改进后}}\]</span></p><ul><li><strong>Amdahl</strong> 定律：<ul><li>部件系统加速比受限于其在系统中所占重要性比例。</li><li>性能增加的递减规则：改进越，系统获得效果越小</li></ul></li></ul><p><span class="math display">\[系统加速比=\frac{总执行时间_{改进前}}{总执行时间_{改进后}}=\frac{1}{(1-局部占比)+\frac{局部占比}{提升的性能}}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络01</title>
      <link href="/2023/09/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C01-%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/09/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C01-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="第1章-概述">第1章 概述</h4><h4 id="计算机网络在信息时代的作用">1.1 计算机网络在信息时代的作用</h4><p>​ 21世纪<strong>数字化</strong>、<strong>网络化</strong>、<strong>信息化</strong>，形成<strong>以网络为核心的信息时代</strong>。</p><p>​ 三大类网络：电信网络、有线电视网络、计算机网络</p><p>​ 互联网两个基本特点：<strong>连通性</strong>和<strong>共享</strong></p><ul><li>连通性：不论多远，都可便捷地交换各种信息</li><li>资源共享：信息共享、软件共享、硬件共享</li></ul><h4 id="互联网概述">1.2 互联网概述</h4><p>​ <strong>计算机网络</strong>由若干<strong>节点( node )</strong>和连接这些节点的<strong>链路( link )</strong>组成。</p><ul><li>节点：计算机、集线器、交换机、路由器等</li></ul><p>​ 网络把许多计算机连接在一起，<strong>互连网</strong>把许多网络通过路由器连在一起。与网络相连接的计算机称为<strong>主机</strong>。</p><p>​ 互联网发展的三个阶段：</p><ol type="1"><li>由 ARPANET 向互连网发展。 20 世纪 70 年代， APRA 开始研究多种网络互连的技术，称为互联网的雏形。 1983 年 TCP/IP 成为 ARPANET 上的标准协议，互联网诞生。 1990 年 ARPANET 关闭。</li></ol><ul><li><strong>internet （互连网）</strong>：指多个网络连接而成的网络</li><li><strong>Internet （互联网）</strong>：专有名词</li></ul><ol start="2" type="1"><li>第二阶段特点是建成了<strong>三级结构的互联网</strong>。分为<strong>主干网</strong>、<strong>地区网</strong>和<strong>校园网（企业网）</strong>。</li><li>第三阶段特点是形成了<strong>多层次 ISP 结构的互联网</strong>。 ISP 译为<strong>互联网服务提供商</strong>。</li></ol><p>​</p><p>​ 计算机网络的分类：</p><ul><li><strong>LAN</strong> （<strong>局域网</strong>）</li><li>特点<ul><li>作用范围小</li><li>多用户访问</li><li>高速度</li><li>错误率可控</li></ul></li><li>设备<ul><li><strong>Hub</strong> （集线器）：多端口中继器</li><li><strong>Bridge</strong> （网桥）：</li><li><strong>Switch</strong> （交换机）：</li><li><strong>Router</strong> （路由器）：分组交换，转发收到的分组</li></ul></li><li><strong>WAN</strong> （<strong>广域网</strong>）</li><li>特点<ul><li>作用范围大</li><li>通过链路传输</li><li>速度相对较低</li><li>错误率较难控制</li></ul></li><li>设备<ul><li><strong>Router</strong> （路由器）：</li><li><strong>Modem CSU/DSU TA/NT1</strong></li></ul></li></ul><p><strong>Boring！</strong></p><h4 id="互联网的组成">1.3 互联网的组成</h4><ul><li><p>互联网的组成：</p><ul><li><p>（1）<strong>边缘部分</strong>：由所有连接在互联网上的主机组成，是<strong>用户直接使用</strong>的部分。主机又称为<strong>端系统（end system）</strong></p></li><li><p>（2）<strong>核心部分</strong>：由大量网络和连接这些网络的路由器组成。这部分是<strong>为边缘部分提供服务的</strong>。</p></li></ul></li><li><p>端系统间通信方式：客户-服务器模式 and 对等连接方式</p><ul><li><strong>客户(client)</strong>-<strong>服务器(sever)</strong>模式（C/S模式）<ul><li>客户是服务请求方，服务器是服务提供方</li></ul></li><li>对等连接方式（P2P）<ul><li>并不区分服务请求方与服务提供方</li></ul></li></ul></li><li><p><strong>电路交换</strong>主要特点：</p><ul><li><strong>建立连接</strong> → <strong>通话</strong> → <strong>释放资源</strong></li><li>在通话的全部时间内，通话的两个用户始终占用端到端的通信资源</li><li>传输效率较低</li></ul></li><li><p><strong>分组交换</strong>主要特点：</p><ul><li>采取<strong>存储转发</strong>技术</li><li>发送的整块数据成为<strong>报文</strong>(message)</li><li>发送之前，先将报文划分成一个个更小的等长数据段，加上必要控制信息组成的<strong>首部</strong>(header)或<strong>包头</strong>，构成一个<strong>分组</strong>(packet)或<strong>包</strong>。</li><li>主机进行信息处理，路由器用来转发分组，即进行分组交换。</li></ul></li></ul><h4 id="计算机网络的类别">1.5 计算机网络的类别</h4><ul><li>按照网络的作用范围分类：<ul><li><strong>广域网 WAN </strong>：</li><li><strong>域域网 MAN </strong>：作用范围一般是一个城市。可以为一个或几个单位所有，也可以是一种公用设施，用来将多个局域网进行互连。</li><li><strong>局域网 LAN </strong>：</li><li><strong>个人区域网 PAN</strong>：把属于个人的设备用无线技术连接起来</li></ul></li><li>按网络使用分类：<ul><li><strong>公用网</strong>(public network)</li><li><strong>专用网</strong>(private network)</li></ul></li><li><strong>用来把用户接入到互联网的网络</strong>：<ul><li><strong>接入网 AN</strong>：又称<strong>本地接入网</strong>或<strong>居民接入网</strong>。</li></ul></li></ul><h4 id="计算机网络的性能">1.6 计算机网络的性能</h4><h5 id="性能指标">1.6.1 性能指标</h5><ul><li><strong>速率</strong>：数据传送速率，也成为<strong>数据率</strong>或<strong>比特率</strong>。提到网络速率，往往指<strong>额定速率</strong>，而非运行速率。单位 bps 。</li><li><strong>带宽</strong>：<ul><li><strong>信号具有的频带宽度</strong>，单位是<strong>赫兹</strong>，表示<strong>某信道允许通过的信号频带范围</strong>。</li><li>网络中某通道传输数据的效率，即<strong>最高数据率</strong>，单位是 bps 。</li></ul></li><li><strong>吞吐量</strong>：表示单位时间内通过某个网络的实际数据量</li><li><strong>时延</strong>：数据从网络一端传送到另一端的时间，组成：<ul><li><strong>发送时延</strong>：主机或路由器发送数据帧所需时间</li><li><strong>处理时延</strong>：</li><li><strong>排队时延</strong>：数据帧进入路由器后需排队等待处理，等待的时间成为排队时延</li><li><strong>传播时延</strong>：信道中传播的时间</li></ul></li></ul><p><span class="math display">\[传播时延=\frac{信道长度(m)}{电磁波在信道上传播速率(m/s)}\]</span></p><ul><li><strong>时延带宽积</strong>： 传播时延与带宽乘积</li><li><strong>往返时间 RTT </strong>：数据在信道中往返一次所需时间</li><li><strong>利用率</strong>：</li></ul><p><span class="math display">\[D=\frac{D_0}{1-U}\]</span></p><h4 id="计算机网络体系结构">1.7 计算机网络体系结构</h4><h5 id="osi-七层协议">1.7.1 OSI 七层协议</h5><ul><li><strong>物理层</strong>：管理通信设备和网络媒体之间的互联互通，<strong>规范</strong>链接的电气和功能<strong>规格</strong>。</li><li><strong>数据链路层</strong>：<strong>通过物理链接提供数据传输链路</strong>。</li><li><strong>网络层</strong>： 在两终端之间进行<strong>路径选择</strong>。</li><li><strong>传输层</strong>：负责网络中<strong>端到端的网络通信</strong>，为虚拟电路的建立、维护、终止，传输故障检测及恢复，以及信息流的控制提供机制。</li><li><strong>会话层</strong>：<strong>创建</strong>、<strong>管理</strong>和<strong>维护</strong>会话。同步表示层实体间的会话并<strong>管理其间的数据交换</strong>。提供高效的<strong>数据传输</strong>、<strong>服务类别</strong>以及会话、演示及应用层的<strong>异常报告功能</strong>。</li><li><strong>演示层</strong>：保证不同系统的信息交换，涉及<strong>数据编码</strong>、<strong>格式转换</strong>、<strong>数据加密</strong>。将多种数据格式转化成通信中采用的标准表示形式。</li><li><strong>应用层</strong>：OSI 协议最高层，离用户最近，<strong>为用户应用程序提供网络服务</strong>，不为其它层提供服务。</li></ul><h5 id="五层协议的体系结构">1.7.2 五层协议的体系结构</h5><ul><li><strong>应用层</strong>：通过进程间的交互来完成特定网络应用，交互数据称为报文。不同网络应用需要有不同的应用层协议。</li><li><strong>运输层</strong>：主要使用两种协议： <strong>TCP、UDP</strong> 。</li><li><strong>网络层</strong>：把运输层产生的报文段或数据封装成<strong>包</strong>或<strong>分组</strong>进行传送。由于网络层使用 IP 协议，因此分组也叫 <strong>IP 数据报</strong>。</li><li><strong>数据链路层</strong>：将网络层交下来的 <strong>IP 数据报</strong>组装成帧，每一帧包括数据和必要的控制信息。</li><li><strong>物理层</strong>：上传数据单位为比特。</li></ul><h5 id="tcpip-四层协议">1.7.3 TCP/IP 四层协议</h5><p><img src="https://raw.githubusercontent.com/mlger/Pict/main/202309111635872.png" /></p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相信未来</title>
      <link href="/2023/07/31/%E7%9B%B8%E4%BF%A1%E6%9C%AA%E6%9D%A5/"/>
      <url>/2023/07/31/%E7%9B%B8%E4%BF%A1%E6%9C%AA%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<p><em>作者：食指</em></p><p>当蜘蛛网无情地查封了我的炉台，</p><p>当灰烬的余烟叹息着贫困的悲哀，</p><p>我依然固执地铺平失望的灰烬，</p><p>用美丽的雪花写下：相信未来。</p><p>​</p><p>当我的紫葡萄化为深秋的露水，</p><p>当我的鲜花依偎在别人的情怀，</p><p>我依然固执地用凝霜的枯藤，</p><p>在凄凉的大地上写下：相信未来。</p><p>​</p><p>我要用手指那涌向天边的排浪，</p><p>我要用手掌 那托起太阳的大海，</p><p>摇曳着曙光那支温暖漂亮的笔杆，</p><p>用孩子的笔体写下：相信未来。</p><p>​</p><p>我之所以坚定地相信未来，</p><p>是我相信未来人们的眼睛——</p><p>她有拨开历史风尘的睫毛，</p><p>她有看透岁月篇章的瞳孔。</p><p>​</p><p>不管人们对于我们腐烂的皮肉，</p><p>那些迷途的惆怅，失败的苦痛，</p><p>是寄予感动的热泪，深切的同情，</p><p>还是给以轻蔑的微笑，辛辣的嘲讽。</p><p>​</p><p>我坚信人们对于我们的脊骨，</p><p>那无数次地探索、迷途、失败和成功，</p><p>一定会给予热情、客观、公正的评定，</p><p>是的，我焦急地等待着他们的评定。</p><p>​</p><p>朋友，坚定地相信未来吧，</p><p>相信不屈不挠的努力，</p><p>相信战胜死亡的年轻，</p><p><strong>相信未来，热爱生命。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 877 (Div. 2)</title>
      <link href="/2023/07/06/Codeforces%20Round%20877%20(Div.%202)/"/>
      <url>/2023/07/06/Codeforces%20Round%20877%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p>传送门：<a href="https://codeforces.com/contest/1838">Codeforces Round 877 (Div. 2)</a></p><h5 id="a.-blackboard-list">A. Blackboard List</h5><p><strong>题意：</strong></p><p>​ 给定包含两个数字的初始，然后进行 <span class="math inline">\(n-2\)</span> 次操作，每次操作从序列中取出两个数字（不能取同一个），将其差之绝对值加入序列，最终得到一长度为 <span class="math inline">\(n\)</span> 的序列。</p><p>​ 现给定最终序列（乱序）， 求最初始数字之一。</p><p><strong>题解：</strong></p><p>​ 由于新加入数字必为非负数，因此序列中的负数必定是初始数字。</p><p>​ 若全为非负数，由于 <span class="math inline">\(|a-b|\leq|a|\)</span> 且 <span class="math inline">\(|a-b|\leq |b|\)</span> ，因此最大数字必为初始数字。</p><h5 id="b.-minimize-permutation-subarrays">B. Minimize Permutation Subarrays</h5><p><strong>题意：</strong></p><p>​ 给定一 <span class="math inline">\(n\)</span> 的排列。交换两数字的位置，使得交换后序列中，能够成排列的连续子序列数目最少。</p><p><strong>题解：</strong></p><p>​ <span class="math inline">\(1\)</span> 与 <span class="math inline">\(2\)</span> 之间夹 <span class="math inline">\(n\)</span> ，这样能够使得数目恒为 <span class="math inline">\(1\)</span> ，是为最少。讨论即可</p><h5 id="c.-no-prime-differences">C. No Prime Differences</h5><p><strong>题意：</strong></p><p>​ 将 <span class="math inline">\(n*m\)</span> 之内的正整数排成一个 <span class="math inline">\(n*m\)</span> 矩阵，使得矩阵中任意两相邻元素差值的绝对值不为素数。</p><p><strong>题解：</strong></p><p>​ 先考虑 <span class="math inline">\(m\geq 5\)</span> 时，将 <span class="math inline">\(\{0, 1*n, 2*n, 3*n, ... (m-1)*n\}\)</span> 排成一列。以下是一种合适的构造方法。</p><p>​ 设 <span class="math inline">\(p=\lfloor \frac{m-1}{2}\rfloor\)</span> 考虑两个序列 <span class="math display">\[\{0, 1*n, 2*n, ...p*n \} \\\{(p+1)*n, (p+2)*n, ... (m-1)*n\}\]</span> ​ 然后将两序列合成（下面序列的元素依次插入上面序列的空隙）。</p><p>​ 若 <span class="math inline">\(m=4\)</span> ，则可构造为 <span class="math inline">\(\{1*n, 3*n, 0, 2*n\}\)</span></p><p>​ 设该序列为 <span class="math inline">\(A\)</span> ，则最终矩阵可构造为 <span class="math inline">\(p_{i, j}=i+A_j\)</span></p><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i += <span class="number">2</span>) &#123;</span><br><span class="line">        add[i] = now;</span><br><span class="line">        now += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i += <span class="number">2</span>) &#123;</span><br><span class="line">        add[i] = now;</span><br><span class="line">        now += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">4</span>) &#123;</span><br><span class="line">        add[<span class="number">0</span>] = n;</span><br><span class="line">        add[<span class="number">1</span>] = <span class="number">3</span> * n;</span><br><span class="line">        add[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        add[<span class="number">3</span>] = <span class="number">2</span> * n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) cout &lt;&lt; i + add[j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d.-bracket-walk">D. Bracket Walk</h5><p><strong>题意：</strong></p><p>​ 一括号序列，从最左侧出发可以随意向左右移动（不超边界），最终停在最右侧。途经符号构成一括号序列，若该括号序列合法，则称原序列 walkable 。</p><p>​ 现给定一括号序列 <span class="math inline">\(s\)</span> ， <span class="math inline">\(q\)</span> 次单点修改，要求求出每次单点修改后，序列是否 walkable 。</p><p><strong>题解：</strong></p><p>​ walkable 的必要条件首先是长度 <span class="math inline">\(n\)</span> 为偶数。</p><p>​ 其次构造一序列 <span class="math inline">\(A\)</span> ，包含所有的 <span class="math inline">\(i\)</span> ，使得</p><ul><li><p><span class="math inline">\(s_i=&#39;)&#39;\)</span> 且 <span class="math inline">\(i\)</span> 为奇数</p></li><li><p><span class="math inline">\(s_i=&#39;(&#39;\)</span> 且 <span class="math inline">\(i\)</span> 为偶数</p><ol type="1"><li>若 <span class="math inline">\(A\)</span> 为空，则显然圆括号序列为 <span class="math inline">\(()\)</span> 重复若干次，必定 walkable。</li><li>若 <span class="math inline">\(A\)</span> 非空，其中最小数字为奇数，则意味着序列开头为 <span class="math inline">\(()()()...())\)</span> ，必定非法</li><li>若 <span class="math inline">\(A\)</span> 非空，其中最大数字为偶数，则意味着序列末尾为 <span class="math inline">\((()()()\)</span> ，必定非法</li><li>剩余情况， <span class="math inline">\(A\)</span> 中最小数字 <span class="math inline">\(m\)</span> 为偶数， 最大数字 <span class="math inline">\(M\)</span> 为奇数，则 <span class="math inline">\(m, M\)</span> 之间符号数为偶数，其中左右括号奇偶性相同。则在 <span class="math inline">\(m-1,m\)</span> 这两个位置产生足够多的 <span class="math inline">\(((....\)</span> 来消除右侧的 <span class="math inline">\()\)</span>，然后在<span class="math inline">\(M,M+1\)</span> 两个位置产生对应数量的 <span class="math inline">\())\)</span> 补齐即可。合法。</li></ol></li></ul><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    string str;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="keyword">auto</span> check = [&amp;str](<span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="built_in">return</span> ((str[p - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) ^ (p &amp; <span class="number">1</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(i)) s.<span class="built_in">insert</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 2 9</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        cin &gt;&gt; pos;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(pos)) s.<span class="built_in">erase</span>(pos);</span><br><span class="line">        <span class="keyword">else</span> s.<span class="built_in">insert</span>(pos);</span><br><span class="line">        str[pos - <span class="number">1</span>] = <span class="string">&#x27;(&#x27;</span> + <span class="string">&#x27;)&#x27;</span> - str[pos - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((*s.<span class="built_in">begin</span>() &amp; <span class="number">1</span>) || !(*s.<span class="built_in">rbegin</span>() &amp; <span class="number">1</span>)) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="e.-count-supersequences">E. Count Supersequences</h5><p><strong>题意：</strong></p><p>​ 求满足以下条件的 <span class="math inline">\(b\)</span> 序列个数：</p><ul><li><span class="math inline">\(b\)</span> 序列含 <span class="math inline">\(m\)</span> 个正整数，所有数字均在 <span class="math inline">\([1,k]\)</span> 内</li><li><span class="math inline">\(b\)</span> 序列删去若干个数，顺序不变，可以得到 <span class="math inline">\(a\)</span> 序列</li></ul><p><strong>题解：</strong></p><p>​ 考虑 <span class="math inline">\(dp\)</span></p><p>​ <span class="math inline">\(f[i][j]\)</span> 表示含 <span class="math inline">\(i\)</span> 个正整数删去后可得到长度为 <span class="math inline">\(j\)</span> 的 <span class="math inline">\(a\)</span> 序列前缀的序列数，则有如下转移方程： <span class="math display">\[f[i][j]=\begin{cases}f[i-1][j-1]+(k-1)*f[i-1][j],\ j&lt;n \\f[i-1][j-1]+k*f[i-1][j], \ j=n\end{cases}\]</span> ​ 发现该转移方程与 <span class="math inline">\(a\)</span> 无关。</p><p>​ 因此将 <span class="math inline">\(a\)</span> 序列设为 <span class="math inline">\(n\)</span> 个 <span class="math inline">\(1\)</span> ，然后作差法。</p><p>​ 最终答案为： <span class="math display">\[k^m-\sum_{i=0}^{n-1}\binom{m}{i}(k-1)^{m-i}\]</span> <strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) cin &gt;&gt; x;</span><br><span class="line">    <span class="keyword">auto</span> quick_pow = [&amp;mod](<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = <span class="number">1ll</span> * res * a % mod;</span><br><span class="line">            a = <span class="number">1ll</span> * a * a % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">quick_pow</span>(k, m);</span><br><span class="line">    <span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ans -= <span class="number">1ll</span> * now * <span class="built_in">quick_pow</span>(k - <span class="number">1</span>, m - i) % mod;</span><br><span class="line">        ans %= mod;</span><br><span class="line">        ans += mod;</span><br><span class="line">        ans %= mod;</span><br><span class="line">        now = <span class="number">1ll</span> * now * (m - (i+<span class="number">1</span>) + <span class="number">1</span>) % mod;</span><br><span class="line">        now = <span class="number">1ll</span> * now * <span class="built_in">quick_pow</span>((i+<span class="number">1</span>), mod - <span class="number">2</span>) % mod;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/2023/07/04/README/"/>
      <url>/2023/07/04/README/</url>
      
        <content type="html"><![CDATA[<p>本站采用 hexo 架构，部署在 github pages 上，采用 github 作为图床。建议在能够流畅访问 github 的网络环境下浏览。</p><p><img src="https://raw.githubusercontent.com/mlger/Pict/main/202307042122433.png" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 150 (Div. 2)</title>
      <link href="/2023/07/03/Educational%20Codeforces%20Round%20150%20(Div.%202)/"/>
      <url>/2023/07/03/Educational%20Codeforces%20Round%20150%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p>传送门：<a href="https://codeforces.com/contest/1841">Educational Codeforces Round 150 (Rated for Div. 2)</a></p><h5 id="a.-game-with-board">A. Game with Board</h5><p><strong>题意：</strong></p><p>​ 给定初始序列为 <span class="math inline">\(n\)</span> 个 <span class="math inline">\(1\)</span> ，两人轮流行动，每次可以选择序列中若干个相同的数，剔除，并将他们的和加入序列。第一位无法行动的一方获胜。假设二人都绝对聪明，试问先手是否必胜。</p><p><strong>题解：</strong></p><p>​ 分类讨论一下：</p><ul><li>$2n  $，有限轮模拟易得后手必胜。</li><li><span class="math inline">\(n\geq5\)</span> ，则先手取 <span class="math inline">\(n-2\)</span> 个 <span class="math inline">\(1\)</span>， 后手只能取 <span class="math inline">\(2\)</span> 个 <span class="math inline">\(1\)</span> ， 之后序列变为 <span class="math inline">\(\{n-2, 2\}\)</span> ，故先手必胜。</li></ul><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">5</span>) cout &lt;&lt; <span class="string">&quot;Alice&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Bob&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c.-ranom-numbers">C. Ranom Numbers</h5><p><strong>题意：</strong></p><p>​ A, B, C, D, E 分别代表 <span class="math inline">\(1, 10, 100, 1000, 10000\)</span> 。给定一由大写字母 ABCDE 组成的串，对于某一字符，若字符串后方有严格大于它的字符，则符号为负，否则为正。字符串权值为所有字母乘上符号的权值之和。</p><p>​ 现可以修改至多一字符，求可能的最大权值。</p><p><strong>题解：</strong></p><p>​ 据说 DP 和贪心均可，这里思路是 DP 。</p><p>​ 为了方便起见，先将字符串反转，规则也对应修正。</p><p>​ 然后设计状态： <span class="math inline">\(F[i][j][0/1]\)</span> 代表到第 <span class="math inline">\(i\)</span> 位，目前前缀最大值为 <span class="math inline">\(j\)</span> ，且已经/未修改的最大权值。 <span class="math inline">\(i\)</span> 这一位用滚动数组滚掉，然后枚举状态的转移即可。</p><p>​ 复杂度 <span class="math inline">\(O(nMK)\)</span> ，其中 <span class="math inline">\(M=5, K=2\)</span> 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    n = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> f[<span class="number">2</span>][<span class="number">5</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) f[<span class="number">0</span>][i][<span class="number">0</span>] = f[<span class="number">0</span>][i][<span class="number">1</span>] = -inf;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>, q = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c: s) &#123;</span><br><span class="line">        p ^= <span class="number">1</span>;</span><br><span class="line">        q ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) f[p][i][<span class="number">0</span>] = f[p][i][<span class="number">1</span>] = -inf;</span><br><span class="line">        <span class="type">int</span> x = c - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;   <span class="comment">//i-1位前缀最大</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt;= <span class="number">1</span>; t++) &#123;   <span class="comment">//</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; <span class="number">5</span>; y++) &#123;</span><br><span class="line">                    <span class="type">int</span> nt = t + (y != x);</span><br><span class="line">                    <span class="type">int</span> nj = <span class="built_in">max</span>(y, j);</span><br><span class="line">                    <span class="keyword">if</span> (nt &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                        f[p][nj][nt] = <span class="built_in">max</span>(f[p][nj][nt], f[q][j][t] + (y == nj ? digit[y] : -digit[y]));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = -inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[p][i][<span class="number">0</span>]);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[p][i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d.-pairs-of-segments">D. Pairs of Segments</h5><p><strong>题意：</strong></p><p>​ 给定 <span class="math inline">\(n\)</span> 条线段，用区间表示 <span class="math inline">\([l,r]\)</span> 。若 <span class="math inline">\(n\)</span> 为偶数，且可以将 <span class="math inline">\(n\)</span> 条线段分为 <span class="math inline">\(\frac{n}{2}\)</span> 对， 每一对线段相交， 不成一对的线段相交，则称其 <strong>beautiful</strong> 。现问至少删去多少线段，使得剩下的线段可以 <strong>beautiful</strong> 。</p><p><strong>题解：</strong></p><p>​ <span class="math inline">\(n\)</span> 比较小。一开始以为是 <span class="math inline">\(dp\)</span> 但怎么都消除不了后效性。实际解法是——直接暴力。</p><p>​ 首先考虑两对线段，共四条。不成对线段不相交的等价条件可以表示为： 成对线段取并集，所得两条线段不相交。</p><p>​ 因此可以直接求出 <span class="math inline">\(C_n^2\)</span> 对线段中，相交对的并集。然后找出尽量多的并线段，使其互不相交即可。互不相交可以天然保证每条线段至多用了一次。求不相交线段数目，这里用了动态开点线段树。</p><p>​ 复杂度 <span class="math inline">\(O(n^2logn)\)</span> 。</p><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> lc[N &lt;&lt; <span class="number">4</span>], rc[N &lt;&lt; <span class="number">4</span>], dat[N &lt;&lt; <span class="number">4</span>], cnt;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) p = ++cnt;</span><br><span class="line">    dat[p] = <span class="built_in">max</span>(dat[p], val);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= mid) <span class="built_in">update</span>(lc[p], l, mid, k, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(rc[p], mid + <span class="number">1</span>, r, k, val);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p || u &gt; v) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= l &amp;&amp; r &lt;= v) <span class="keyword">return</span> dat[p];</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= mid) ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(lc[p], l, mid, u, v));</span><br><span class="line">    <span class="keyword">if</span> (v &gt; mid) ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(rc[p], mid + <span class="number">1</span>, r, u, v));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; <span class="built_in">Line</span>(n);</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; Uline;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; Line[i].first &gt;&gt; Line[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> check = [](<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(a.first, b.first) &lt;= <span class="built_in">min</span>(a.second, b.second);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> uni = [](<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mp</span>(<span class="built_in">min</span>(a.first, b.first), <span class="built_in">max</span>(a.second, b.second));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">check</span>(Line[i], Line[j])) <span class="keyword">continue</span>;</span><br><span class="line">            Uline.<span class="built_in">pb</span>(<span class="built_in">uni</span>(Line[i], Line[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> cmp = [](<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">sort</span>(Uline.<span class="built_in">begin</span>(), Uline.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, rt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> line: Uline) &#123;</span><br><span class="line">        <span class="type">int</span> rem = <span class="built_in">query</span>(rt, <span class="number">-1</span>, inf, <span class="number">-1</span>, line.first - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">update</span>(rt, <span class="number">-1</span>, inf, line.second, rem + <span class="number">1</span>);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, rem + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n - (ans &lt;&lt; <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h5 id="e.-fill-the-matrix">E. Fill the Matrix</h5><p><strong>题意：</strong></p><p>​ 给定一 <span class="math inline">\(n*n\)</span> 的矩阵，其中第 <span class="math inline">\(i\)</span> 列的第 <span class="math inline">\(1-a_i\)</span> 行为黑格， <span class="math inline">\(a_i-n\)</span> 行为白格，仅白格可以填数。当一个格填数 <span class="math inline">\(x\)</span> 且其正右侧格填数 <span class="math inline">\(x+1\)</span> 时，贡献一 beauty 。填入 <span class="math inline">\(1-m\)</span> 共 <span class="math inline">\(m\)</span> 个数，求最大 beauty 值。</p><p><strong>题解：</strong></p><p>​ 看起来似乎比其他几道好想很多。上层所有线段都是下层线段的子集，因此从最底层线段开始枚举，填数，分裂即可。</p><p>​ 这里还是用的线段树。注意细节。</p><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> dat[N &lt;&lt; <span class="number">2</span>], a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> (<span class="type">void</span>) (dat[p] = a[l]);</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    dat[p] = <span class="built_in">min</span>(dat[p &lt;&lt; <span class="number">1</span>], dat[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= l &amp;&amp; r &lt;= v) <span class="keyword">return</span> dat[p];</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, ans = N;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= mid) ans = <span class="built_in">min</span>(ans, <span class="built_in">ask</span>(p &lt;&lt; <span class="number">1</span>, l, mid, u, v));</span><br><span class="line">    <span class="keyword">if</span> (v &gt; mid) ans = <span class="built_in">min</span>(ans, <span class="built_in">ask</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, u, v));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">pos</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        a[i] = n - a[i];</span><br><span class="line">        pos[a[i]].<span class="built_in">pb</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//pos[i] 值为i的位置集合(补上界n+1)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        pos[i].<span class="built_in">pb</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">sort</span>(pos[i].<span class="built_in">begin</span>(), pos[i].<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="type">int</span> l, r, pre_min;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">node</span>(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pre_min) : <span class="built_in">l</span>(l), <span class="built_in">r</span>(r), <span class="built_in">pre_min</span>(pre_min) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node X) <span class="type">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>-&gt;r - <span class="keyword">this</span>-&gt;l &lt; X.r - X.l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Ask(l, r) ask(1, 1, n, l, r)</span></span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">node</span>(<span class="number">1</span>, n, <span class="number">0</span>));</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> p = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (p.l == p.r) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> min_num = <span class="built_in">Ask</span>(p.l, p.r);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1ll</span> * (min_num - p.pre_min) * (p.r - p.l + <span class="number">1</span>) &gt; m) &#123;</span><br><span class="line">            ans += (m / (p.r - p.l + <span class="number">1</span>) * (p.r - p.l)) + <span class="built_in">max</span>(<span class="number">0ll</span>, m % (p.r - p.l + <span class="number">1</span>) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            m -= <span class="number">1ll</span> * (min_num - p.pre_min) * (p.r - p.l + <span class="number">1</span>);</span><br><span class="line">            ans += <span class="number">1ll</span> * (min_num - p.pre_min) * (p.r - p.l);</span><br><span class="line">            <span class="type">int</span> L = std::<span class="built_in">lower_bound</span>(pos[min_num].<span class="built_in">begin</span>(), pos[min_num].<span class="built_in">end</span>(), p.l) - pos[min_num].<span class="built_in">begin</span>();</span><br><span class="line">            <span class="type">int</span> R = std::<span class="built_in">upper_bound</span>(pos[min_num].<span class="built_in">begin</span>(), pos[min_num].<span class="built_in">end</span>(), p.r) - pos[min_num].<span class="built_in">begin</span>();</span><br><span class="line">            <span class="type">int</span> pre_l = p.l;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = L; i &lt; R; pre_l = pos[min_num][i] + <span class="number">1</span>, i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pre_l &lt; pos[min_num][i]) q.<span class="built_in">push</span>(<span class="built_in">node</span>(pre_l, pos[min_num][i] - <span class="number">1</span>, min_num));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pre_l &lt;= p.r) q.<span class="built_in">push</span>(<span class="built_in">node</span>(pre_l, p.r, min_num));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 879 (Div. 2)</title>
      <link href="/2023/07/01/Codeforces%20Round%20879%20(Div.%202)/"/>
      <url>/2023/07/01/Codeforces%20Round%20879%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p>传送门：<a href="https://codeforces.com/contest/1834">Codeforces Round 879 (Div. 2)</a></p><p>难度适中，但菜鸡依旧。</p><h6 id="b.-maximum-strength">B. Maximum Strength</h6><p><strong>题意：</strong></p><p>​ <span class="math inline">\([l,r]\)</span> 之间选两个数，使得十进制表示下各个位数的差值绝对值之和最大，位数不同则较小数补前导 <span class="math inline">\(0\)</span> 对齐。</p><p><strong>题解：</strong></p><p>​ 设 <span class="math inline">\(l\)</span> 和 <span class="math inline">\(r\)</span> 位数分别为 <span class="math inline">\(n\)</span> 和 <span class="math inline">\(m\)</span> ，取的数字为 <span class="math inline">\(x&lt;y\)</span> ，分情况讨论。</p><ul><li>若 <span class="math inline">\(n&lt;m\)</span> ，则最优情况为 <span class="math inline">\(x\)</span> 取 <span class="math inline">\(m-1\)</span> 个 <span class="math inline">\(9\)</span> , <span class="math inline">\(y\)</span> 保留 <span class="math inline">\(r\)</span> 的最高位，剩余位为 <span class="math inline">\(0\)</span></li><li>若 <span class="math inline">\(n=m\)</span> ，则除去相同前缀，然后 <span class="math inline">\(y\)</span> 保留最高位，剩余位为 <span class="math inline">\(0\)</span> ， <span class="math inline">\(x\)</span> 保留最高位，剩余位为 <span class="math inline">\(9\)</span> 即可。</li></ul><p><strong>code：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    int n, m;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    n = s1.length();</span><br><span class="line">    m = s2.length();</span><br><span class="line">    if (n &lt; m) &#123;</span><br><span class="line">        cout &lt;&lt; (s2[0] - &#x27;0&#x27;) + (m - 1) * 9 &lt;&lt; endl;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        int ans = 0;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            if (s1[i] == s2[i]) continue;</span><br><span class="line">            cout &lt;&lt; s2[i] - s1[i] + (n - i - 1) * 9 &lt;&lt; endl;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; 0 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="c.-game-with-reversing">C. Game with Reversing</h6><p><strong>题意：</strong></p><p>​ 给定两等长串 <span class="math inline">\(S\)</span> 和 <span class="math inline">\(T\)</span> ， Alice 和 Bob 轮流操作。Alice 每次可以替换一个字符，Bob 每次可以翻转一个串， 当两串相同时，停止操作。Alice 希望操作次数尽量少， Bob 希望操作次数尽量多， 求两个人都采取最优策略的情况下，实际游戏操作次数。</p><p><strong>题解：</strong></p><p>​ 解释起来比较啰嗦，这里简述。</p><p>​ 实际上 Bob 每轮操作都是相同的，因此可以假设 Bob 只翻转一个字符串 <span class="math inline">\(T\)</span> 。</p><p>​ 对 Alice 来说，则可以有两种选择，将 <span class="math inline">\(S\)</span> 变为 <span class="math inline">\(T\)</span> 或 <span class="math inline">\(rev(T)\)</span> 。二者最小步数都容易 <span class="math inline">\(O(n)\)</span> 求出。 最后根据实际的奇偶性补齐 Bob 的操作数即可。</p><p><strong>code：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    int ans1 = 0, ans2 = 0;</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        if (s1[i] != s2[i]) ++ans1;</span><br><span class="line">        if (s1[i] != s2[n - i - 1]) ++ans2;</span><br><span class="line">    &#125;</span><br><span class="line">    if (ans1 &amp; 1) ans1 = ans1 * 2 - 1;</span><br><span class="line">    else ans1 = ans1 * 2;</span><br><span class="line">    if (ans2 &amp; 1) ans2 = ans2 * 2;</span><br><span class="line">    else if (ans2 == 0) ans2 = 2;</span><br><span class="line">    else ans2 = ans2 * 2 - 1;</span><br><span class="line">    cout &lt;&lt; min(ans1, ans2) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="d.-survey-in-class">D. Survey in Class</h6><p><strong>题意：</strong></p><p>​ <span class="math inline">\(n\)</span> 位学生，<span class="math inline">\(m\)</span> 个知识点。第 <span class="math inline">\(i\)</span> 个学生学习了 <span class="math inline">\([l_i, r_i]\)</span> 个知识点。</p><p>​ 上课老师提问，每个问题至多提问一次。初始同学分数均为 <span class="math inline">\(0\)</span> ，答对加一分，答错减一分，分数可为负。求最大分差。</p><p><strong>题解：</strong></p><p>​ 对于线段 $ [l_1, r_1] $ 和线段 $ [l_2,r_2] $ ，设 $ r_1&lt;r_2 $ ，则分三种情况讨论：</p><ul><li>$ r_1&lt;l_2 $ ，则最大差值可以分别来源于两线段整段，即 $ max(r_1-l_1+1, r_2-l_2+1) $ ；</li><li><span class="math inline">\(l_1\leq l_2\leq r_1 \leq r_2\)</span>，则最大差值来源于二者分别对交集取补，即 $ max(r_2-r_1, l_2-l_1) $ ；</li><li>$ l_2l_1 r_1 r_2 $ ，包含关系，最大差值来源于长线段对短线段取补，即 $ (r_2-l_2+1)-(r_1-l_1+1) $ 。</li></ul><p>​ 将每条线段按右端点排序，枚举线段 <span class="math inline">\([l_2,r_2]\)</span> ， 目标是找出对应的 <span class="math inline">\([l_1, r_1]\)</span> ， 三种情况分别需要求：</p><ul><li>右端点小于 <span class="math inline">\(l_2\)</span> 的直线中，<span class="math inline">\(r-l+1\)</span> 的最大值</li><li>相交直线中， <span class="math inline">\(r\)</span> 的最小值以及 <span class="math inline">\(l\)</span> 的最小值</li><li>左端点大于等于 <span class="math inline">\(l_2\)</span> 的直线中， <span class="math inline">\(r-l+1\)</span> 的最小值</li></ul><p>​ 四个值四棵动态开点线段树维护即可。</p><p><strong>code：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">#define inf 0x7fffffff</span><br><span class="line">int cnt = 0;</span><br><span class="line">const int N = 4e5 + 5;</span><br><span class="line">int dat[N &lt;&lt; 5], lc[N &lt;&lt; 5], rc[N &lt;&lt; 5];</span><br><span class="line"></span><br><span class="line">void update(int &amp;p, int l, int r, int k, int val) &#123;</span><br><span class="line">    if (!p) p = ++cnt, dat[p] = inf;</span><br><span class="line">    if (l == r) return (void) (dat[p] = min(dat[p], val));</span><br><span class="line">    int mid = l + r &gt;&gt; 1;</span><br><span class="line">    if (k &lt;= mid) update(lc[p], l, mid, k, val);</span><br><span class="line">    else update(rc[p], mid + 1, r, k, val);</span><br><span class="line">    dat[p] = inf;</span><br><span class="line">    if (lc[p]) dat[p] = min(dat[p], dat[lc[p]]);</span><br><span class="line">    if (rc[p]) dat[p] = min(dat[p], dat[rc[p]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline int query(int p, int l, int r, int u, int v) &#123;</span><br><span class="line">    if (!p) return inf;</span><br><span class="line">    if (u &lt;= l &amp;&amp; r &lt;= v) return dat[p];</span><br><span class="line">    int mid = l + r &gt;&gt; 1, res = inf;</span><br><span class="line">    if (u &lt;= mid) res = min(res, query(lc[p], l, mid, u, v));</span><br><span class="line">    if (v &gt; mid) res = min(res, query(rc[p], mid + 1, r, u, v));</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool cmp(pair&lt;int, int&gt; A, pair&lt;int, int&gt; B) &#123;</span><br><span class="line">    return A.second == B.second ? A.first &lt; B.first : A.second &lt; B.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">#define mp(x, y) make_pair(x, y)</span><br><span class="line">    int t1 = 0, t2 = 0, t3 = 0, t4 = 0;</span><br><span class="line">    int n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;pair&lt;int, int&gt; &gt; Stu(n);</span><br><span class="line">    for (int i = 0, l, r; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        Stu[i] = mp(l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(Stu.begin(), Stu.end(), cmp);</span><br><span class="line">    int ans = 0;</span><br><span class="line">    for (auto stu: Stu) &#123;</span><br><span class="line">        int l = stu.first, r = stu.second;</span><br><span class="line">        int rem;</span><br><span class="line">        rem = -query(t1, 0, m, 0, l - 1);</span><br><span class="line">        if (rem != -inf) ans = max(ans, max(rem &lt;&lt; 1, (r - l + 1) &lt;&lt; 1));</span><br><span class="line">        update(t1, 0, m, r, l - r - 1);</span><br><span class="line"></span><br><span class="line">        rem = query(t2, 0, m, l, r);</span><br><span class="line">        if (rem != inf) ans = max(ans, (r - rem) &lt;&lt; 1);</span><br><span class="line">        update(t2, 0, m, r, r);</span><br><span class="line"></span><br><span class="line">        rem = query(t3, 0, m, l, r);</span><br><span class="line">        if (rem != inf) ans = max(ans, (l - rem) &lt;&lt; 1);</span><br><span class="line">        update(t3, 0, m, r, l);</span><br><span class="line"></span><br><span class="line">        rem = query(t4, 0, m, l, r);</span><br><span class="line">        if (rem != inf) ans = max(ans, ((r - l + 1) - rem) &lt;&lt; 1);</span><br><span class="line">        update(t4, 0, m, l, r - l + 1);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    while (T--) &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="e.-mex-of-lcm">E. MEX of LCM</h5><p><strong>题意：</strong></p><p>​ 题如其名。给定 <span class="math inline">\(n\)</span> 个数，则对应的有 <span class="math inline">\(C_n^2\)</span> 个连续子序列。求所有子序列数值 <span class="math inline">\(lcm\)</span> 的 <span class="math inline">\(Mex\)</span> 。</p><p><strong>题解：</strong></p><p>​ 同样是利用好值域。 对于区间 <span class="math inline">\([l,r]\)</span> ，固定住右端点 <span class="math inline">\(r\)</span> ，则至多还剩下 <span class="math inline">\(r\)</span> 个左端点，对应 <span class="math inline">\(r\)</span> 个区间。这 <span class="math inline">\(r\)</span> 个区间有多少 <span class="math inline">\(lcm\)</span> 值？从 <span class="math inline">\(l=r\)</span> 开始，每次向左添加一个数， <span class="math inline">\(lcm\)</span> 要么不变， 要么至少翻一倍，因此 <span class="math inline">\(lcm\)</span> 值的数目是 <span class="math inline">\(log\)</span> 级别的。因此整个序列所有 <span class="math inline">\(lcm\)</span> 值的数目不超过 <span class="math inline">\(nlogn\)</span> ，迭代求出然后求 <span class="math inline">\(Mex\)</span> 即可。复杂度 <span class="math inline">\(O(nlogn)\)</span></p><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">lcm</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x, <span class="type">long</span> <span class="type">long</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / __gcd(x, y) * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> inf = <span class="number">1ll</span> * n * n + <span class="number">2</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">num</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; num[i];</span><br><span class="line">    set&lt;<span class="type">long</span> <span class="type">long</span>&gt; s;<span class="comment">//以r-1为右端点的lcm序列</span></span><br><span class="line">    set&lt;<span class="type">long</span> <span class="type">long</span>&gt; rem; <span class="comment">//以r为右端点的lcm序列</span></span><br><span class="line">    set&lt;<span class="type">long</span> <span class="type">long</span>&gt; ans;<span class="comment">//所有lcm序列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x: num) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y: s) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> p = <span class="built_in">lcm</span>(y, x);</span><br><span class="line">            <span class="keyword">if</span> (p &lt;= inf) rem.<span class="built_in">insert</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        rem.<span class="built_in">insert</span>(x);</span><br><span class="line">        s.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y: rem) s.<span class="built_in">insert</span>(y);</span><br><span class="line">        rem.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y: s) ans.<span class="built_in">insert</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> now = <span class="number">1</span>;</span><br><span class="line">    ans.<span class="built_in">insert</span>(inf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x: ans) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x != now) &#123;</span><br><span class="line">            cout &lt;&lt; now &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++now;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数理思维</title>
      <link href="/2023/07/01/%E6%95%B0%E7%90%86%E6%80%9D%E7%BB%B4/"/>
      <url>/2023/07/01/%E6%95%B0%E7%90%86%E6%80%9D%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<h6 id="一决不能把任何我没有明确地认识其为真的东西当作真的加以接受也就是说小心避免仓促的判断和偏见只把那些十分清楚明白地呈现在我的心智之前使我根本无法怀疑的东西放进我的判断之中">一、“决不能把任何我没有明确地认识其为真的东西当作真的加以接受，也就是说，小心避免仓促的判断和偏见，只把那些十分清楚明白地呈现在我的心智之前，使我根本无法怀疑的东西放进我的判断之中”。</h6><p>​ 在数理逻辑论证推理中，务必做到毫无破绽。防范”千里之堤，溃于蚁穴“的局面。更直观地来说，论证必须有从底层起始的依据。</p><p>​ 在日常生活中，这一条也同样适用。我们处在一个信息爆炸的时代，很多时候困扰我们的并不是信息资源的匮乏，而是信息茧房的拘束以及信息泛滥的迷茫。保持理性，对信息加以筛选，过滤掉无依据的信息。</p><h6 id="二把我所考察的每一个难题都尽可能地分成细小的部分直到可以而且适于加以圆满解决的程度为止">二、“把我所考察的每一个难题，都尽可能地分成细小的部分，直到可以而且适于加以圆满解决的程度为止”。</h6><p>​ 比较典型的分而治之思想。当整体带有规律性时，局部往往也具有与整体相同或相似的规律性，通过不断地划分，最终将问题转化为一个个显然或已解决的子问题。从个别、特殊到一般的方法。</p><h6 id="三按照次序引导我的思想以便以最简单最容易认识的对象开始一点一点上升到对复杂的对象的认识即便是那些彼此间没有自然的先后次序的对象我也要给它们设定一个次序">三、“按照次序引导我的思想，以便以最简单最容易认识的对象开始，一点一点上升到对复杂的对象的认识，即便是那些彼此间没有自然的先后次序的对象，我也要给它们设定一个次序”。</h6><p>​ 从易到难，从简单到复杂地进行分析、解决，而不至于迷乱。</p><h6 id="四把一切情形尽量完全地列举出来尽量普遍地加以审视使我确信毫无遗漏">四、“把一切情形尽量完全地列举出来，尽量普遍地加以审视，使我确信毫无遗漏。”</h6><p>​ 如其所言，思维缜密，考虑周全，确保推理覆盖到所有情况。</p><p>摘自： 笛卡尔 《方法论》</p><p>​</p><p>​</p><p><code>人生没有目的，只有过程，所谓的终极目的是虚无的。——人的情况和树相同。它愈想开向高处和明亮处，它的根愈要向下，向泥土，向黑暗处，向深处，向恶——千万不要忘记。我们飞翔得越高，我们在那些不能飞翔的人眼中的形象越是渺小。</code></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT 指北</title>
      <link href="/2023/06/30/ChatGPT%20%E6%8C%87%E5%8C%97/"/>
      <url>/2023/06/30/ChatGPT%20%E6%8C%87%E5%8C%97/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fc094c49dec8c68d31e2249786969ee8a0aab851b7f7cd02c836b2855c6f650a">578d5c17fdb0be81f91dae08d76a8b9d310fe713a3967a08677820d492351d4d024aaf5584a3de2eee6cfd36b7caa22d9740053c8a96ed22d2d6dfd2f9a00dec5e9fd27efec9fb0cbc17fcc35e01819114fd1aee1a0491f5c66478faa8a06e2e2a38275f37cf04671781ce95522f0f8bb4350b77e28aeb703a214e03248d7a4f2da825156a4478c4e8e9a73d62a084ae268f2c4638a9aee4aad943d0e2dbe941bec775478b9d482e0483065df9c2945af30768e649b2e65e85f4405f63ba8a6945c66d5c0f4698fd95c52438b972821e3101245d86aee6010c2bad096ab9eee7dc820ab4dd29d09b79858e5b0a2f22a9e00cfcee7d907eca6d5211fb02764c742c47d52ed84e556b86cb77027e513a2220abd8926c2247ce863275df31a0c992a04ec7691e36662f98a91279a32b9cd9bc4412b39f1f98c51707679af494bb111bc4ff22634689f5dffda99f3db844e280230a22f60e80a0cd473cb7f59da80d80911506ccf77b7a2c510a5bf0bf2eed907da326fe31320e5501f9c9a56e27f74c5289da9c9b11760861a6d93af31a3e532191ccec575948b390dd654017a9554b14a96abd48538f8b3e2ff2bcb8b28d2b150a697b4cc1e083f0df0938597fc5c015b2d68094c19af791f14e5465e58c5fb2e53f0165719f6723d5ec9a42192799a2a6943865469b8ac3b3f50436c0a69ab7d455cbc56a19af4556921e35686f7c57f82451b5c8f302664998bf5dd28a3de9994441d2c17a390b10e744adb60e437755bf781f8d4ed7aa6627f2987002780e2c8d617d7227c0334202347fe99d4048e9cb0f039780de44f095c8bec8d44e5e30295c73d82bd8f8f5a934d7387e91b4dc64cdee3694a8db569904ccfe9bbfacbe40879368e75df1592bfba34dc07b3af799f56434e98ce47429c0a15aab24c7d8ffa5792f62255de8b1cb328c3da65c830f40a752bc2d19d93ec8e0f6f99e972cb0bbedde8646d1bad2b73d288bab0d5f917690b5700f7b3b630fdf2aca6abd96c5b1d3471e2ac0eb6ad13a1ac32c7fce968bce0a8775d5334439010b29e0b12b2903403282923f6a64f0a057230f45f71623142cf269c3b95dab1b16854b35c272bc3efd9e8e4986884d77961c09e31d42e98f9a1e6c653fa66d8f0f710651f747b6f0032297247375a27f4c0ea0a0e0a2be36053b38158e920a34b753acf3554f37579d9bdbaab5249662a4f8e08b39c79c18e111d8c5b176d53b7018e4759085d0696d45085a7f5c6bd2f337b056141ad1c1ea204ab51f160728cae5abe87d9a3955e44170d2b2ad6c83788d5a65dc6c5a1f3360a2e4b3e0da73a453e4db65508bcad84b9c83836c035b37da4cd022640b7a0547c98ff213c64bb3a146bb98d22639066ae54ec4a5e2c2284212413f500267f51058850a5dc9e3262ca803220617118e8dbb81252d866fa4bcc7b6fa8fff879e94c9da6e5c6d61d32041c9c9bf488a1ef0a630b476804488b99206a87a5b5c404ad7ed928140ff727ba5e117b1a0e48445642c1466b2148597d3fb71ed4757a8691899e3c774f5d15c996dd78df8dc2109bb2568a7138391d7cbe4b2e9e1f1be2824a927e751161ddef1e07d1d252334478c9b824da946884fb546318fa0dc1b1581b5bef7e2e06c923442a94e1cc19ff8e3b5c4242c5466e47720ac0980c459864247c34ecbe7430621f1b1b0ffa1ad4c36507564c3c7efc2d6eed1b6cdacf21800564ca6809b416ee1944415ebc146ecc285d2ed9b7f525284770551de2e906ed3d8a0f7057da16e57d3ec8fcb03d32fdc2afa3ab1bdc7e8d9a3df30bfe66e700845f2937db1e5025e6b775d6615a0e4f60eed163c034c173ecc900be3afa39140a49edc9d4494ab9550db77da4903135d1e5c1ab53f8b4cb10992160ad817308f94f89c13da52279e84667901f385ffa30283045ccfe45d027000530fc96cc6fdb21e408af8a3c1b1068ea841fd2122408ec4e9191ff0996f755d52ce50915ac449b1ec960889f3f5dbad4a7c7e185bb81dc2d328b050af5c4baceba1d424de93bf8d5a7cd5f61ede600e583ca13114c294e3927736ca9a834a92a52995f2c9c16dfd7988e647886a2700445ea6101ba75d5383c9c6be5bb30896feffe10fb97fe804d4d32a33d1d31ad02a0b40dbaf0b47aeef4950f7c035b06725b188e135aebe6a340a04b44099fb94080b726602b33dfb6e75a2efb9d41a4b252d700d64b59da8ab6775ea8152c6145bc86ecf77914e9b90aedf965c2126c01e849dd49f62fefaefe48adaff4b2bf9649dc43209cedbc93e2168e0d9ee451855b36ac822a67040a2dbff90ea68ee963ff0d3cef90f51b4eb768a0624dd21c2166f8bf8bb3adc84da95dde0eb1c4445526076eb87f314f098d19c2cc660a2e9d107563ef6d17ae91752822a9b32888c0b4e195f7630aa4994b0bca15e11c552d2d818f8004c481e0679669675c93499f9732d17e3ffcb6004645f15ac499f836e4930bd5d3b2a0622212b475c658af1dfa2f1e8acf32382ef5204ae9c5f8e942af46dd222e21cbf5305a1e1f9b708f40021bfafbda7e75798a244504b0f26a6c8ac1779820bc1119fb3a6ad55aa71ec8f0f31caf29687be17ce49fc8fc206652a73b2bc294bdbabaf217c3e7aa8cbd17a4e628ccaba2105eec2fef1767dd0621c829dbbdaf52f4fe0872b17d12c6bfa3150f49c83f9ea67918ff2890c7bebd6377e26ab56cfdb37f8772fb65e400ae57cb6aea12227654af179f7fc4f202145dd8b82843b711de9385752fc48a9055276e3f5594e571f0c464d08f82079ebdac4cef4c22c79303e865429f504236daa6f65b3b94c5b2d260a658af429fbbcfd4381e2deb25937c50a08eb9da5fe3eebf7ac2a23c24e9e959560b1b6e4daa91f563aa8b115e312680cc556d1eda071168f0f2b64191cc8aeeacbdfdfc49455d80d0e7cf0a3748a612d57a4db3857ddf79a8b95449aff310fdfb09fac4afcc95dec12f4c5b79b6ecdcb2cdd579aab5e0757cff0c95258fb7736c98b4bfdff693512ef0433b22f5bc755396bb13a450ec9a6126ba330afc4f05da9a61a4a725c22b9c6b3400c107615385366933e16b643edca6c5da048e64b3c5db5186265bfaec2cd637c6a1361cd91fa2b2f9f69d6bdcc7fe81880dc5cb7523dc7334c56376c70f2c13d8128c43cc99285f738af5a43a13b4bfdee49e261a71e86c4fd5ddcd7367249c33732210808c5f9d6e341b75a6c3b5f6207dc4c05179715b3f4e2cc0e7c1d10df349c36d427c0254e8655c29cd145600c6423389ec5a1191d2743403c5c8440d24cc5a3278d2126387f1c875184c1b1ceea8fef322766c95508b0212c6a91ef1e624da2499ee80950db1d66644a020fd1b770db0c96c4ca802679e7c3b3ef5d0cd3acbe818b93f820c8cf55094ed1d9d5c3dba4d9469c505aae09a07bca30f6c3ab7ede6764ea27478d4bd1791ec9ffaa298e33ba6f8b272e9d37b04b3ed4c79a34d58313e9b08141d9047fee83f9f532dd031faedd18d08b2b3d7416b73ef626ee56783540cfd8e10b64814af71dc4ff4a66b413f57eab8286343ea7035baa44b5f8f05d5e0edf6b14977b3b31861e94e89b792deca1d021334573e47848815d5e0e16cbee1490239a28c7f95a367ffa0f96ee4236d20f7c942956c0123fb64379278cde94000bb688e8a955ef7412e3fc2e72ca7daa9eba027e0e0717bd46ba97575fd8e30862d8d03dcde7c3016921a651de0d288a2fdc0f88214962bd5153ad05a63a9c9b4300815b3689af8777443b1b6c41e9df50da977445a9d30ee8452259e7fe0f42672afd60e839afac7293a79b6c7e20101bdd4f90120be472ed9728354c7d6e10a69aa30c44d2bd930fd238eb653afb5e796519c068c1805ca64ed70eb2c2e70349b935da6e90442c04002e5edf2a328bc06982953c4ddc3a68a74470b6e5746e545c28baa0ddf9f0ea3bc2fb1934ac5ab89d18bd8bb74557e041e11064ea79dd40405d3c69bb7cbf189cbcd2a2b8369c957c4813c5ec9103e26178595dc3c78dccc9c213885b44b826e6f08a5ac3bf4626d701f65d168cf0d46d7953389ee132266e6666a6b9bd51cca3e80acc9b88bd809f3532963e5dac38a421558b9622b95b965d07f27d45054d162bae7a2c3b7b449b91cec680359e8b6b1e79d5e816efdb07fc32b473889a5f64731ccf6128469085d58089970df57defbd27758de8244f69dc9f64508c833a2664299bbaad25bdb26a5ad2d55e5bddc51a26bb2590a6331ff153371732749965b6e9f354704bdf166da0cde8ad0ec64a6518aaf3914fdfe7e6e7b0d5acf878498760711aac2030a701ddf3a927b5aa9ccf2a4073f7dfd56478da36f854e21748ff70f89d09a20f513c8fe88f48af3eff29ea8442b504aecda9e709ce76f0b1baea0d79325f4fc493645cfa92d116d366c85810483ac4ff169731648f185a8553dbb57e11f6f41175fe06566ae7dc9500482391d5ad8202c5469d12057034a0357dfff4df0aaa57ff46bc076a6c7f49d21d974dec4c1012c39f4127d454b56885b328bef4b400b8dde0fdeca83e7dd6f419b6fa3a8336047a86c29de26e9bbdf59f5da707799fced74df4e1530fbf9343302630bc3dc5ada5480e3cf75a8fb7fcc678149892c5b73d2e49c264d28ba02b9889e41954286d5fb8b576322caa0f927acb27049e700740abf68ecafcc3fecd215c44854596fe874691ae8c307c48bd1d60bf21206fe9aae9b1fce6c81fe6bd100e4f87f2d102279421541f0d53754f352e654b6afc74841080e380b3af6bab216565ae041acbbc402dff286f21c2d32e20b23e8e28df324fffbd57dce49ffb5da4d0810c5c3e217de0aa53b9eba81c9a5872ea02b7579d385b63b94dac513c9b628aad0dedd3714a419c4cc174b4ccee336f23cfb18584a2e83618ccd5a083524d6d34cfde25a95fdf60e1e6f2321bba83eca2e35c8404764e70e1507aa22b21282b878fea32c8fd5dded1e0515224217574e464a356e57475e24100a7144505d5ee8343440b0d8aa2f4c6f224e28eb5c9d12fd5358846cecca8d9ae2df59cdfbb290034fa27e6072aa69d4614b5348fe03abb353741a1a43d98a144d9cedd4b76d3f50bda5672872b5d0d1fd743d8dc3249655268fb4d197f2893b9901b19adb91ac22dd515d73f1b1a3687df5ac5dbcb6721512dd895f6e06b867e8963ae0938421b62488636f9b9cf2efa6b8977d0d25aa09dab0dd17eb005d72e80332c587eb9e703639dccb496528a5c2bab2e9e527778c410b81505f5ff5201da13e3436c6634f8e9a203f911db49fceab4081073c90eca0c5abf977cf00f4ee89b302cdc5a2d4b0c9b30f95a5e1e5e31ac9ad1f54673dc57151789545beb2a1edffda43011de3758ced51f9c518db896879f3fea171cb59cce8bb731e9a16560d2a56848cc4fa4002432dcc03c7d5856c82f9c2512fbc5e01ad494da45bfec279ed7730acd5e071ff8b3d3ada70bffc6440e22325708b06e7c5d9054b0f3fdea85cb82166de146b229c7af3a0e2f423ee17f83cfe936caab9a69b48ffdfbbf5beeb901229be9a9638dc56dfe40ac38b627588c300679cf072b5aeb4e4d57ce99c0df97f6b5d99839744ea35d65232405364687c6ad19c4ab703afcf5e80c87217a642b72f3457d0050a333270485ac895c14e81eadcb771aafea33e86fa699273cc929341ecae72d7e849c618968e89c54368c6cd5b42f929045af6571022c0c5d6dd2c4f8c9f505b1fc8a11280b574ecea10583b291e5b8c18487d738043577892dfc6374c47a98eb5dcd3d1a542888caaccd930f4fe3ef3aefe60c4f69a90585fcbcfc3d32af12dbca4aed0f56a92f44c45b8aa1cb6049620c8ab6022f68775924fd28b93d5ca658f9d78ae2ea6ccb75e9afb25bd104381ea6f623bfeccac5a2117da1e88390c8bfb30ba7a4fa9b6b31c7965a3fea4acfc02443e516ee377c4605c5723ffa64d7f18f1f9d44e97a412c2cdbd0274d671294c441e53aa5c59d17d00004c1422aeb1956a44e093b741966e1292ab4542d1f83c1cafb1ba7e0104e80f5dd00167dffa1d385e00058b18035851553b9fc42be5f18aa13cda5ee2efb709e817fb0e20983d405021b01c1e01984b63c7757f2235b15d80bc6f5012d7a64e8775614ca6bd942eb24a16bb5580b30070cba7bfc66f5bf6b25edbc3f45fb5290f8d5af1357654fdbe21d4f5c7d50bb25d8e20bbc7d2c717a08bc69bcfa6efd7d35af95b29154b5aace477f703a589da4f63f9fae7a6a06faaadd9708c7a962e6366d807b9c576bec4917682c115bc6a5289a382e3eb4922589cac19e302da27381cc2e09e1da82b904a5e733616e0c6cdba928a69ec1079ee077d2a20753b82120acf8a7faf2af4c673082f4302b0e43273bf047d614c112f416c3c16ebba05dfaf1b6b2a89842b7d670495ac8931bbce70be2853148e1b8ad22ef04494266b71571ed9203e1c17d9ff12d1db7481c474faf94394edca9c6fc95054aa45bbec832741096b017fcbd5b5de81f8685b5eecfb89fde35cbf21c57c37dbb6e8c64def233cc3e05fdb92a1b7afc4da5a9252103cb6ab2afbbebb188c58e111ac2d2b3a26d10d5ee9141e2e37ad3fc1b4edea8e37631285bac5ff5d0b29748f622e9056ab94b18b3cf2785ef7cdb7b8f2ea3849d0a5209e815cac41db583ab9af1770c91da6f32a59ed85ae7556cae6fec727c1dd589222113dc66a593498454f432d430e8f7c16f59317bc176efe323e2463a45f03abc7243bdb7ff69b15ee86f57a3b34a9ef5a9f0686697371dd72f476b584fe35c2966fbaf177e55c553f61c98cb4e283587c592d890f1ee14a91fa3c4bdb7f917b0bbc54d5e26afefa4335f128d63fef6c0b3f6031fdc27f66a9429d8a5464256f4aea89de7274e36dfba6808b481b17c0e8d94fcd73e9a46a2d21d1a5b496cab06777597eebebcd96f745bb29cd1e0576e5381c9e0b33642580c0639863f1b194f4ef6e73f83ba81d28842984acd7b78f32e7fb1d7a6fd6d5708cebc61cdfb245c616e84188e0d40baae02e6f7a0cfd1f75449feea972d41212984e0a89b567de1b03807fa3dc6fd4d057943bb2089274d91300208688ee54b5600573d623160743880bdcfebca7854e13a6f9cc7408c320aa6e70b152270f4a1bd96dd49e9a492d27cbd12331fe72ea0098fe091a7f85be307e9cfd22f30d5656d031cb6522aefe7aa689a849519ac95769d9d5f68b1f523f7cb1747ae122b7ea1c7edcc577f190af32e292b6e648e07a4e8131e67d34f62374f11e5c80c90a90cb5baebaf1945e1a3707a24057d500e98b02ad418b5ac0971841ae3005f74c1d879c9da02fd5f571d6761716cc20dfdd9441609f1c1005b04aa61b652292d453d1682f091f08e794de97ebedc32e12cf52640583ac6aba51db7f10cfabf8593aca0c25073420534f302c9fc9000740c7911014e03a71861cda4f2d70170261786ce5a53dfd2d55e7ef4111dd643674472a9229b101e06b2efcf4dc091b97d9c8766dd7c1618c9104f6baabac8b8c66b814819e50818437c87a6ffdac25b479f13eabd03b61e5854d3ac442705a02b83278de35140872ba17c141c13398e02caf374746c5a0314a42d4b1f45e4495f3a693e55921674285842dbb1107730c8b18669f0af485260fbdde363fadd2dd277ddb5cdb9782e9f026bfcc75cf6eaced9caba8c205ca580a5b23abfff65dbcdd8fbc73823a9112e5d22c25b8f9bd11674b0577039a3aaeb31246c4acc63ef08ceb0152583d20122131b2aad3e9f94716a7d2c6d6df9e4260d8ccdfcabfaec192bfb0b3fbc5731cf362e90ae2fc21b0e77f57c08776f9e5b8b7895d085cb45c685b5760580dac4dcf4c05fc982b979cb28569c76aec7a5b5991bb7120fac5806eb21ffebc75f806e61296b6594dd332f6236fbf70ce8ecf3830e7f4cd14a14e745616b12367c3b9e574738aaf02e0e655a17c0ae0bdf1c1d672cf2fc8c99194bd1b52ff5199a5519b84305a89fadc58f4b310d3ff48caf39c17f5435d3c9a94cd12b18b62e92868859d089ec3c8a79be6a37f1539cec34d15999635718b77e2b1954d7549fb3ef05e4ec67ee192371ec0a0447a16b3fb1859c6ce5b2b696ee2a1aef1b3048a46d12966266d8189fcf3942f289e97202d7f2958c157a70ef71c6db1335ce3ef90638ce84a2334b1a50f36f351253bc0d6d4e53e3f11ad7e52d737752364d7243d6a067145a5aae0fdb89af96fc02d049a0567f72c97de0719726b335a9a57fad1232afd3f0ee8779738ee8493f41ec42a90b49eb6f275ca7e7cc6401efcff63a7929e76eac73495cf2a65e9f887b1adda8c113fcf4eb669bc4228de2d59816d807275080658ce6e077f7b3d36d876327b9a92e7fc0675cdbf8b71bcfd8266f01e36bd56827a24ef717ec29f22089d8e2674ea3464f7c74493638920cbc5538a569b91c3cd8045f548d1e7329bbff10a51f873131fdc08f4a698380ffd7482c810718ea7bd04db3156661fca9bff5206e2e16469481bb1033a5bbb3d2e0c3778ae36bc45154415fe0d7da65619aad12f598723df492723f4b68cef8e251e28ae356a00fe30a9aed8a5f3e97c1f726623eea0effe3d708a16abc34f4e22172f35d02682d1e9ff21ed244fd13a324a1fea0964036c058e47f50f4b662c166971392904cb7b307ce9b09777ceaac5017abaacc2a07230a6d509d64898441405bc77c76cc6ded78fdfa346816cef888dac0ad4f7f9697cffeb453376c1c7034e0e7b58f5e1f1f50c22aae6b6429aeebf8444561bdbc5675feb5698e61560d82ef8881107c601f1289229e18ffc1777cb8633cf2c90d702c91cbbc6bed42b81974c7f721afa6cf81520c1d80302aa8dadba6f450bf63b50dcb3a03a07c6020d1dd42168a35a58cc345f1429df94e94a9e8b6bf8829685f6d5302f5d9baaaeed82536837a26095e17e04e643542f0e80c289e1a6df2704d7a7e1a97b218522c1a5f336ef0effb5a2362c3abf85e66ab898b8d43e12c01816d348b3eb76c3053e138787ec894bb9f26b0322fbd0373d55cf7ffa52c2848da191e09e037547bde4db8fd853ae1d2d96c696cbdb0d9292b51450f8e7fb369750f52c0395c51106775be21926b308aa7ed17065ff82deaf1c56ed97dbd41605155b3eb150842f6425b803700fec8fefef74cd0c23aff21db6cf5be4ddfee2a48e3018beb8e7ad06b08525ccd4fc992f593babc0b4d1a72c7df392fdc23ce22094489f09e0f0bfccea4d844e829092f44e61ff83f963d00c7cb36e7aea72211ec9d9ba29492451a42d44b3a2103b3588045eb42e4d5512393541804e4ef05b5ef44a69b33b55b94c67abf9a1a61da4fb267ae0d784bfe6d16a775ade81f0edc277cc68282e6213a6a0427f2df35538754843870ae134b0d0cd858da7fe3befc2fd613</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 880(Div. 2)</title>
      <link href="/2023/06/29/Codeforces%20Round%20880%20(Div.%202)/"/>
      <url>/2023/06/29/Codeforces%20Round%20880%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p>挂个传送门：<a href="https://codeforces.com/contest/1836">Dashboard - Codeforces Round 880 (Div. 2) - Codeforces</a></p><p>评价是，切完ABC蹲大牢</p><h5 id="b.-astrophysicists">B. Astrophysicists</h5><p><strong>题意</strong>：</p><p><span class="math inline">\(k*g\)</span> 银币分配给 <span class="math inline">\(n\)</span> 人，设一个人分到 <span class="math inline">\(x\)</span> 银币，<span class="math inline">\(r=x \mod g\)</span> 对每人有补正如下：</p><ul><li>若 <span class="math inline">\(r\geq \lceil \frac{g}{2} \rceil\)</span>，则向上修正至 <span class="math inline">\(x+(g-r)\)</span>；</li><li>否则，向下修正至 <span class="math inline">\(x-r\)</span> .</li></ul><p>求分配完后，剩下的银币数目之和最小值。</p><p><strong>题解</strong>：</p><p>​ 什么黑心资本家出的题。</p><p>​ 考虑一个人分配到的银币，从 <span class="math inline">\(0\)</span> 增加至 <span class="math inline">\(g\)</span> 。增加至 <span class="math inline">\(\lceil \frac{g}{2}\rceil\)</span> 前，经补正他所获得银币为 <span class="math inline">\(0\)</span> ，原先分配银币即剩下；增加至 <span class="math inline">\(\lceil \frac{g}{2}\rceil\)</span> 后，我们需要额外的银币为其补正。 故对一个人来说，我们的收益和他分配的银币呈一个由两直线构成的分段函数，从 <span class="math inline">\(0\)</span> 开始并且回到 <span class="math inline">\(0\)</span> 。我们的最大收益点在 <span class="math inline">\(p=\lceil \frac{g}{2}\rceil-1\)</span> 。</p><p>​ 此时可以分成两种情况讨论：</p><ul><li><p>若 $n<em>p k</em>g $ ，那所有人贪心分配（至多 <span class="math inline">\(p\)</span> ），最后每个人分配到 <span class="math inline">\(0\)</span> ，方案显然最优，结果为 $ k*g $ 。</p></li><li><p>若<span class="math inline">\(n*p&lt; k*g\)</span>， 最优分配结果为<span class="math inline">\(g\lfloor \frac{p*n}{g} \rfloor\)</span> 。</p></li></ul><p>​ 讨论下第二种情况，为什么是这个式子。</p><p>​ 易知，最优方案不存在向上修正。设第 <span class="math inline">\(i\)</span> 个人分配到 <span class="math inline">\(x_i\)</span> 银币，则有<span class="math inline">\(\sum x_i = k*g\)</span>，因此我们的收益 <span class="math inline">\(income\)</span> 满足 $income=(x_i% g)(x_i)% g $ 。这是一个比较重要的性质，答案必定是 <span class="math inline">\(g\)</span> 的倍数。</p><p>​ 设 <span class="math inline">\(income=kg\)</span> ，则必有 $kg p*n $ （答案上限就是 <span class="math inline">\(p*n\)</span> ），故 $income = kg = g  { g } $</p><p><strong>code</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n, k, g;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k &gt;&gt; g;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> p = ((g + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p * n &gt;= k * g) &#123;</span><br><span class="line">        cout &lt;&lt; k * g &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; p * n / g * g &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c.-k-th-equality">C. K-th equality</h5><p><strong>题意</strong>：</p><p>​ 构造第 <span class="math inline">\(k\)</span> 大字典序字符串，其中字符串形如 <span class="math inline">\(A\)</span> 位数 <span class="math inline">\(+B\)</span> 位数 <span class="math inline">\(=C\)</span> 位数。</p><p><strong>题解</strong>：</p><p>​ 体感很简单的一道题。</p><p>​ 设 <span class="math inline">\(x\)</span> 位数的范围为 <span class="math inline">\([L_x, R_x)\)</span></p><p>​ 由于 <span class="math inline">\(A\leq 6\)</span>，因此枚举 <span class="math inline">\(x+y=z\)</span> 中的 <span class="math inline">\(x\)</span> 。</p><p>​ 接下来寻找对 <span class="math inline">\(y\)</span> 的限制条件。</p><ul><li><span class="math inline">\(L_B\leq y&lt;R_B\)</span></li><li><span class="math inline">\(L_C\leq z&lt; R_C\)</span> ，即 <span class="math inline">\(L_C\leq x+y &lt;R_C\)</span></li></ul><p>​ 由此可得限制条件 <span class="math inline">\(max\{L_B,L_C-x\}\leq y&lt;min\{R_B,R_C+x\}\)</span></p><p>​ 然后边统计边算即可。复杂度 <span class="math inline">\(O (10^A)\)</span></p><p><strong>code</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> mn[<span class="number">8</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">10000</span>, <span class="number">100000</span>, <span class="number">1000000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> A, B, C;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k;</span><br><span class="line">    cin &gt;&gt; A &gt;&gt; B &gt;&gt; C &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> mx = mn[A + <span class="number">1</span>], i = mn[A]; i &lt; mx; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">max</span>(mn[C] - i, mn[B]);</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">min</span>(mn[C + <span class="number">1</span>] - i, mn[B + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= r - l) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; l + k - <span class="number">1</span> &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; i + l + k - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> k -= r - l;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="e.-twin-clusters">E. Twin Clusters</h5><p><strong>题意：</strong></p><p>​ 给定长为 <span class="math inline">\(2^{k+1}\)</span> 的一序列，值域为 <span class="math inline">\([0,4^k)\)</span> 。求原序列两不相交子区间，使得两子区间中数字的异或和相同。</p><p><strong>题解：</strong></p><p>​ 瞄了眼 Tutorial ，不太好想。一开始想过类似于分块的思路，实际解法也差不多，不过只取一个块。</p><p>​ 先关注二进制下低 <span class="math inline">\(k\)</span> 位。算上空串，共有 <span class="math inline">\(2^{k+1}+1\)</span> 个值，但实际上低 <span class="math inline">\(k\)</span> 位值域 <span class="math inline">\([0,2^k-1]\)</span> 共 <span class="math inline">\(2^k\)</span> 个值，因此根据鸽巢原理，我们可以匹配出 <span class="math inline">\(2^k+1\)</span> 个区间 <span class="math inline">\((l_i, r_i]\)</span>，使得这每个区间 <span class="math inline">\(S_{r_i} \ xor\ S_{l_i}\)</span> 的低<span class="math inline">\(k\)</span> 位均为 <span class="math inline">\(0\)</span> 。</p><p>​ 接下来关注这些线段的高 <span class="math inline">\(k\)</span> 位。采取同样的方法，根据鸽巢原理，必定存在两个子区间高 <span class="math inline">\(k\)</span> 位的异或和相同，取这两子区间的交即为结果。</p><p><strong>code</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x, y) make_pair(x, y)</span></span><br><span class="line">    <span class="type">int</span> k, n;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    n = (<span class="number">1</span> &lt;&lt; (k + <span class="number">1</span>));</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">g</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">s</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt; &gt; Line;</span><br><span class="line">    unordered_map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt; mp;</span><br><span class="line">    mp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    g[<span class="number">0</span>] = s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> lbit = (<span class="number">1ll</span> &lt;&lt; k) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> hbit = (((<span class="number">1ll</span> &lt;&lt; (k &lt;&lt; <span class="number">1</span>)) - <span class="number">1</span>) ^ lbit);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; g[i];</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] ^ g[i];</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> p = (s[i] &amp; lbit);</span><br><span class="line">        <span class="keyword">if</span> (mp[p] || p == <span class="number">0</span>) Line.<span class="built_in">push_back</span>(<span class="built_in">mp</span>(mp[p], i));</span><br><span class="line">        mp[p] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    unordered_map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">int</span>&gt; pos;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> line: Line) &#123;</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> p = ((s[line.second] ^ s[line.first]) &amp; hbit);</span><br><span class="line">        <span class="keyword">if</span> (pos[p] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> l1 = Line[pos[p] - <span class="number">1</span>], l2 = line;</span><br><span class="line">            <span class="keyword">if</span> (l1.second &lt;= l2.first) &#123;</span><br><span class="line">                cout &lt;&lt; l1.first + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; l1.second &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; l2.first + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; l2.second &lt;&lt; endl;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; <span class="built_in">min</span>(l1.first, l2.first) + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="built_in">max</span>(l1.first, l2.first) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; l1.second + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span></span><br><span class="line">                     &lt;&lt; l2.second &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> pos[p] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d.-lottery">D. Lottery</h5><p><strong>题意：</strong></p><p>​ 给定 <span class="math inline">\(n\)</span> 个人，每人买一张彩票，票号在 <span class="math inline">\([0,m]\)</span> 范围内。设开奖号为 <span class="math inline">\(x\)</span> ，则票号距离 <span class="math inline">\(x\)</span> 最近的 <span class="math inline">\(k\)</span> 人中奖，平局情况则编号小的获胜。作为第 <span class="math inline">\(n+1\)</span> 人，你编号最大，求最小位置，使得能够使你中奖的编号尽可能多。</p><p><strong>题解：</strong></p><p>​ 非常繁琐的一道题。先来看这幅图（截自 tutorials ）：</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202307021737523.png" alt="image-20230702173756179" /><figcaption aria-hidden="true">image-20230702173756179</figcaption></figure><p>​ 假设当前选择编号为 <span class="math inline">\(c\)</span> ，<span class="math inline">\(c\)</span> 的前 <span class="math inline">\(k\)</span> 名为 <span class="math inline">\(a\)</span> ，后 <span class="math inline">\(k\)</span> 名为 <span class="math inline">\(b\)</span> 。则中奖区间为 <span class="math inline">\((\lfloor \frac{a+c}{2} \rfloor, \lceil \frac{b+c}{2} \rceil)\)</span> 。由此计算结果。</p><p>​ 接下来讨论需要枚举哪些 <span class="math inline">\(c\)</span> 。由上面图可知，处在 <span class="math inline">\((d,e)\)</span> 区间内时，中奖区间虽然改变，但实际中奖区间长度不变（<span class="math inline">\(a\)</span> 和 <span class="math inline">\(b\)</span> 没有变化）。故我们只需讨论 <span class="math inline">\(n\)</span> 个人所选号码的前后两三个数即可。 当然，特别考虑边界情况。</p><p>​ 输入量较大，需要注意 <span class="math inline">\(IO\)</span> 效率。</p><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; v;</span><br><span class="line"><span class="type">int</span> nowl, nowr;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">calc</span><span class="params">(<span class="type">long</span> <span class="type">long</span> now_pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (nowl &lt; n &amp;&amp; v[nowl] &lt; now_pos) ++nowl;</span><br><span class="line">    <span class="keyword">while</span> (nowr &lt; n &amp;&amp; v[nowr] &lt;= now_pos) ++nowr;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> posl = nowr - k &lt; <span class="number">0</span> ? <span class="number">0</span> : (now_pos + v[nowr - k]) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> posr = nowl + k - <span class="number">1</span> &gt;= n ? m : (now_pos + v[nowl + k - <span class="number">1</span>] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0ll</span>, posr - posl + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; c;</span><br><span class="line">        v.<span class="built_in">push_back</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    v.<span class="built_in">push_back</span>(m + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    nowl = nowr = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res_pos = <span class="number">0</span>, ans = <span class="built_in">calc</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> bl = i == <span class="number">0</span> ? <span class="built_in">max</span>(<span class="number">0ll</span>, v[i] - <span class="number">2</span>) : <span class="built_in">max</span>(v[i] - <span class="number">2</span>, v[i - <span class="number">1</span>] + <span class="number">3</span>);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> br = <span class="built_in">min</span>(v[i] + <span class="number">2</span>, m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> now_pos = bl; now_pos &lt;= br; now_pos++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> p = <span class="built_in">calc</span>(now_pos);</span><br><span class="line">            <span class="keyword">if</span> (p &gt; ans) &#123;</span><br><span class="line">                ans = p;</span><br><span class="line">                res_pos = now_pos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; res_pos &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios_base::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="f.-doctors-brown-hypothesis">F. Doctor's Brown Hypothesis</h5><p><strong>题意：</strong></p><p>​ 给定一有向图，求无序点对 <span class="math inline">\((u, v)\)</span> 的数目，使得 <span class="math inline">\(u\)</span> 和 <span class="math inline">\(v\)</span> 相互之间存在着长度为 <span class="math inline">\(k\)</span> 的路径，其中 <span class="math inline">\(u=v\)</span> 也被允许。</p><p><strong>题解：</strong></p><p>​ 不会。稍微翻译下 tutorial 。</p><p>​ 突破口在 <span class="math inline">\(k\geq n^3\)</span> 。显然对于所有满足答案的点对，两点都在同一个强连通分量内。于是讨论范围缩减到同一个 <span class="math inline">\(SCC\)</span> 。对强连通分量内的所有环的大小，存在一个最大公约数 <span class="math inline">\(g\)</span> 。将所有的边 <span class="math inline">\(&lt;s,t&gt;\)</span> 按照 <span class="math inline">\(t=(s+1)mod\ g\)</span> 进行染色。由于 <span class="math inline">\(k\)</span> 比较大，所以可以认为颜色相同的点都是等价的。</p><p>​ 对于一个连通分量内，满足条件的点对有以下两种：</p><ul><li><span class="math inline">\(g|k\)</span> ，则所有颜色相同点对满足条件。</li><li><span class="math inline">\(2|g\)</span> 且 <span class="math inline">\(k\equiv g/2\ mod \ g\)</span> ，则所有颜色差值为 <span class="math inline">\(g/2\)</span> 的点对满足条件</li></ul><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> k;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec[N];</span><br><span class="line"><span class="type">int</span> col[N], cnt_col;</span><br><span class="line"><span class="type">int</span> _stack[N], <span class="type">_t</span>, dfn[N], low[N], cnt, siz[N];</span><br><span class="line"><span class="type">bool</span> book[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//强连通分量</span></span><br><span class="line">    dfn[x] = low[x] = ++cnt;</span><br><span class="line">    _stack[++<span class="type">_t</span>] = x;</span><br><span class="line">    book[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ver: v[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[ver]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(ver);</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], low[ver]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (book[ver]) low[x] = <span class="built_in">min</span>(low[x], dfn[ver]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dfn[x] == low[x]) &#123;</span><br><span class="line">        ++cnt_col;</span><br><span class="line">        <span class="type">int</span> p;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            p = _stack[<span class="type">_t</span>];</span><br><span class="line">            col[p] = cnt_col;</span><br><span class="line">            ++siz[cnt_col];</span><br><span class="line">            book[p] = <span class="literal">false</span>;</span><br><span class="line">            --<span class="type">_t</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (p != x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag[N], dis[N];</span><br><span class="line"><span class="type">bool</span> solved[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> d, <span class="type">int</span> des)</span> </span>&#123;</span><br><span class="line">    dis[x] = d;</span><br><span class="line">    flag[x] = des;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ver: vec[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag[ver] != des) <span class="built_in">dfs</span>(ver, d + <span class="number">1</span>, des);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tag[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">draw_col</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> now, <span class="type">int</span> base_num, <span class="type">int</span> des)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//尝试染色</span></span><br><span class="line">    num[x] = now;</span><br><span class="line">    tag[x] = des;</span><br><span class="line">    <span class="type">bool</span> Flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ver: vec[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (tag[ver] != des) Flag &amp;= <span class="built_in">draw_col</span>(ver, (now + <span class="number">1</span>) % base_num, base_num, des);</span><br><span class="line">        <span class="keyword">else</span> Flag &amp;= (num[ver] == ((num[x] + <span class="number">1</span>) % base_num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt_num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Draw_col</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> now, <span class="type">int</span> base_num, <span class="type">int</span> des)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//染色，统计数目</span></span><br><span class="line">    num[x] = now;</span><br><span class="line">    tag[x] = des;</span><br><span class="line">    ++cnt_num[now];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ver: vec[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tag[ver] != des) <span class="built_in">Draw_col</span>(ver, (now + <span class="number">1</span>) % base_num, base_num, des);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!col[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y: v[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (col[i] == col[y]) vec[i].<span class="built_in">push_back</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> search_num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (solved[col[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        solved[col[i]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (siz[col[i]] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> x = i, y = vec[x][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(y, <span class="number">0</span>, y);</span><br><span class="line">        d += dis[x] + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j * j &lt;= d; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d % j != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> p = j, rem_num = <span class="number">1</span>;</span><br><span class="line">            <span class="type">bool</span> now_flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (d % p == <span class="number">0</span>) &#123;</span><br><span class="line">                ++search_num;</span><br><span class="line">                <span class="keyword">if</span> (now_flag &amp;&amp; <span class="built_in">draw_col</span>(x, <span class="number">0</span>, p, search_num)) rem_num = p;</span><br><span class="line">                <span class="keyword">else</span> now_flag = <span class="literal">false</span>;</span><br><span class="line">                p *= j;</span><br><span class="line">            &#125;</span><br><span class="line">            d /= (p / j);</span><br><span class="line">            g *= rem_num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d &gt; <span class="number">1</span> &amp;&amp; (++search_num) &amp;&amp; <span class="built_in">draw_col</span>(x, <span class="number">0</span>, d, search_num)) g *= d;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; g; j++) cnt_num[j] = <span class="number">0</span>;</span><br><span class="line">        ++search_num;</span><br><span class="line">        <span class="built_in">Draw_col</span>(x, <span class="number">0</span>, g, search_num);</span><br><span class="line">        <span class="keyword">if</span> (k % g == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; g; j++) ans += <span class="number">1ll</span> * cnt_num[j] * (cnt_num[j]+<span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (g % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; k % g == g / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; g / <span class="number">2</span>; j++) ans += <span class="number">1ll</span> * cnt_num[j] * cnt_num[j + g / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>当我开始真正爱自己</title>
      <link href="/2023/06/29/%E5%BD%93%E6%88%91%E5%BC%80%E5%A7%8B%E7%9C%9F%E6%AD%A3%E7%88%B1%E8%87%AA%E5%B7%B1/"/>
      <url>/2023/06/29/%E5%BD%93%E6%88%91%E5%BC%80%E5%A7%8B%E7%9C%9F%E6%AD%A3%E7%88%B1%E8%87%AA%E5%B7%B1/</url>
      
        <content type="html"><![CDATA[<p><em>作者：卓别林</em></p><p>当我真正开始爱自己，</p><p>我才认识到，所有的痛苦和情感的折磨，</p><p>都只是提醒我：活着，不要违背自己的本心。</p><p>今天我明白了，这叫做“真实”。</p><p>​</p><p>当我真正开始爱自己，</p><p>我才懂得，把自己的愿望强加于人，</p><p>是多么的无礼，就算我知道，时机并不成熟，</p><p>那人也还没有做好准备，</p><p>就算那个人就是我自己。</p><p>今天我明白了，这叫做“尊重”。</p><p>​</p><p>当我开始爱自己，</p><p>我不再渴求不同的人生，</p><p>我知道任何发生在我身边的事情，</p><p>都是对我成长的邀请。</p><p>如今，我称之为“成熟”。</p><p>​</p><p>当我开始真正爱自己，</p><p>我才明白，我其实一直都在正确的时间，</p><p>正确的地方，发生的一切都恰如其分。</p><p>由此我得以平静。</p><p>今天我明白了，这叫做“自信”。</p><p>​</p><p>当我真正开始爱自己，</p><p>我不再牺牲自己的自由时间，</p><p>不再去勾画什么宏伟的明天。</p><p>今天我只做有趣和快乐的事，</p><p>做自己热爱，让心欢喜的事，</p><p>用我的方式、我的韵律。</p><p>今天我明白了，这叫做“单纯”。</p><p>​</p><p>当我开始真正爱自己，</p><p>我开始远离一切不健康的东西。</p><p>不论是饮食和人物，还是事情和环境，</p><p>我远离一切让我远离本真的东西。</p><p>从前我把这叫做“追求健康的自私自利”，</p><p>但今天我明白了，这是“自爱”。</p><p>​</p><p>当我开始真正爱自己，</p><p>我不再总想着要永远正确，不犯错误。</p><p>我今天明白了，这叫做“谦逊“。</p><p>​</p><p>当我开始真正爱自己，</p><p>我不再继续沉溺于过去，</p><p>也不再为明天而忧虑，</p><p>现在我只活在一切正在发生的当下，</p><p>今天，我活在此时此地，</p><p>如此日复一日。这就叫“完美”。</p><p>​</p><p>当我开始真正爱自己，</p><p>我明白，我的思虑让我变得贫乏和病态，</p><p>但当我唤起了心灵的力量，</p><p>理智就变成了一个重要的伙伴，</p><p>这种组合我称之为，“心的智慧”。</p><p>我们无须再害怕自己和他人的分歧，</p><p>矛盾和问题，因为即使星星有时也会碰在一起，形成新的世界，今天我明白，这就是“生命”。</p>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
