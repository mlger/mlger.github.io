<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ubuntu WeChat 安装</title>
      <link href="/2024/04/14/Ubuntu%20WeChat%20%E5%AE%89%E8%A3%85/"/>
      <url>/2024/04/14/Ubuntu%20WeChat%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="一前言">一、前言</h4><p>微信官方对 linux 系统一直都没有很好的支持，虽然可以用 wine 来兼容 windows 微信，但安装和适配都较为复杂。2022 年 1 月，麒麟软件与腾讯公司联手推动了基于 Linux 平台的原生微信适配工作。优麒麟的原生微信也同样支持 Ubuntu 系统，因此是一个较好的选择。</p><h4 id="二安装与配置">二、安装与配置</h4><h5 id="安装">1. 安装</h5><p>阅读完本文所有内容再考虑进行安装。</p><p>软件的安装参考如下链接：</p><p><a href="https://zhuanlan.zhihu.com/p/690854988">2024如何在Ubuntu上安装原生微信wechat weixin - 知乎</a></p><h5 id="有关-lsb">2. 有关 lsb</h5><p>安装教程中的核心部分为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo <span class="built_in">cp</span> /etc/lsb-release /etc/lsb-release.Ubuntu</span><br><span class="line">sudo apt -y install com.tencent.wechat</span><br><span class="line">sudo apt -y install electronic-wechat-icons-atzlinux</span><br><span class="line">sudo <span class="built_in">cp</span> /etc/lsb-release /etc/lsb-release.wechat</span><br></pre></td></tr></table></figure><p>注意到除了安装的命令之外，还出现了比较特别的两行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/lsb-release /etc/lsb-release.Ubuntu</span><br><span class="line">sudo <span class="built_in">cp</span> /etc/lsb-release /etc/lsb-release.wechat</span><br></pre></td></tr></table></figure><p>其中涉及三个文件：<code>lsb-release</code>、<code>lsb-release.Ubuntu</code>、<code>lsb-release.wechat</code>，下面为了方便简称为 <code>lsb</code>。</p><ul><li><p><code>lsb</code> 记录了系统的 Linux 发行版信息，包括发行版的标识、版本号和一些其他信息。<strong>强烈不建议更改。</strong></p></li><li><p><code>lsb.Ubuntu</code> 是对系统原 <code>lsb</code> 文件的备份。</p></li><li><p><code>lsb.wechat</code> 是适配微信的优麒麟系统发行版信息。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lg@ubuntu:/etc$ <span class="built_in">cat</span> lsb-release.Ubuntu </span><br><span class="line">DISTRIB_ID=Ubuntu</span><br><span class="line">DISTRIB_RELEASE=22.04</span><br><span class="line">DISTRIB_CODENAME=jammy</span><br><span class="line">DISTRIB_DESCRIPTION=<span class="string">&quot;Ubuntu 22.04.4 LTS&quot;</span></span><br><span class="line"></span><br><span class="line">lg@ubuntu:/etc$ <span class="built_in">cat</span> lsb-release.wechat </span><br><span class="line">DISTRIB_ID=Kylin</span><br><span class="line">DISTRIB_RELEASE=V10</span><br><span class="line">DISTRIB_CODENAME=kylin</span><br><span class="line">DISTRIB_DESCRIPTION=<span class="string">&quot;Kylin V10 SP1&quot;</span></span><br><span class="line">DISTRIB_KYLIN_RELEASE=V10</span><br><span class="line">DISTRIB_VERSION_TYPE=enterprise</span><br><span class="line">DISTRIB_VERSION_MODE=normal</span><br></pre></td></tr></table></figure><p>这两条 <code>cp</code> 指令会将系统元 <code>lsb</code> 备份到 <code>lsb.Ubuntu</code>，然后用优麒麟系统的 <code>lsb</code> 文件替代。这么做的是因为微信的登陆接口会读取系统的发行版信息，若非优麒麟则无法登陆。操作比较恶心，属于是反向适配了。</p><h5 id="解决办法">3. 解决办法</h5><p>目前我的解决办法是采用脚本启动，启动前用优麒麟的 <code>lsb</code> 替换系统 <code>lsh</code>，然后开始计时，十五秒后替换回来，这意味着在启动微信后十五秒内必须完成登陆，且十五秒内不可强制断电关机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /opt/WeChat/files/wechat.sh</span></span><br><span class="line"><span class="comment"># 当前的 /etc/lsb-release 文件路径</span></span><br><span class="line">CURRENT_LSB_RELEASE=<span class="string">&quot;/etc/lsb-release&quot;</span></span><br><span class="line"><span class="comment"># 原始文件</span></span><br><span class="line">UBUNTU_LSB_RELEASE=<span class="string">&quot;/etc/lsb-release.Ubuntu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 /etc/lsb-release.wechat 文件替换当前的 /etc/lsb-release</span></span><br><span class="line">sudo <span class="built_in">cp</span> /etc/lsb-release.wechat <span class="variable">$CURRENT_LSB_RELEASE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 WeChat 应用程序</span></span><br><span class="line">/opt/WeChat/files/wechat &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待15秒后恢复lsb</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Wait for reset.&quot;</span></span><br><span class="line"><span class="built_in">sleep</span> 15</span><br><span class="line">sudo <span class="built_in">cp</span> <span class="variable">$UBUNTU_LSB_RELEASE</span> <span class="variable">$CURRENT_LSB_RELEASE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Reset successfully!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本里的两条 sudo 需要在系统配置中添加免密设置。</p><p>打开终端，并使用以下命令编辑 <code>/etc/sudoers</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure><p>在打开的文件中，添加如下规则（假设你的用户名为 <code>lg</code>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lg ALL=(root) NOPASSWD: /bin/cp /etc/lsb-release.wechat /etc/lsb-release</span><br><span class="line">lg ALL=(root) NOPASSWD: /bin/cp /etc/lsb-release.Ubuntu /etc/lsb-release</span><br></pre></td></tr></table></figure><p>注意：编辑 <code>/etc/sudoers</code> 文件时要格外小心，确保不要修改错误并保存。建议使用 <code>visudo</code> 命令编辑，因为它会在保存前检查语法错误。</p><p>因为启动方式发生变化，我们需要修改桌面图标，换为脚本启动。</p><p>（由于我的图标是自己创建的，因此文件名可能有所不同，需要注意。）</p><p>打开图标配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/share/applications/wechat.desktop</span><br></pre></td></tr></table></figure><p>将 <code>Exec</code> 条目更换为执行脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exec=bash /opt/WeChat/files/wechat.sh</span><br></pre></td></tr></table></figure><p>然后重启即可运用配置。</p><h4 id="三卸载铜豌豆源">三、卸载铜豌豆源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge atzlinux-v12-archive-keyring</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><h4 id="四后记">四、后记</h4><p>关于微信原生这个问题我也是今天搜索的时候偶然发现，不知道其中是否存在更多的漏洞/问题，这种安装方式还是有待斟酌的。</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEEC 代码 Lab 开发指北</title>
      <link href="/2024/04/13/SEEC%20%E4%BB%A3%E7%A0%81%20Lab%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8C%97/"/>
      <url>/2024/04/13/SEEC%20%E4%BB%A3%E7%A0%81%20Lab%20%E5%BC%80%E5%8F%91%E6%8C%87%E5%8C%97/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="aa8edcaea5e88a74426e17d2de8109936aefff7bc868170720eaf0c62a833fb3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软工II </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS-Lab0x02 思路</title>
      <link href="/2024/04/13/OS-Lab0x02%20%E6%80%9D%E8%B7%AF/"/>
      <url>/2024/04/13/OS-Lab0x02%20%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="一任务">一、任务</h4><p>制作一个 FAT12 镜像查看器。</p><p>支持命令：ls, ls -l, cat。</p><h4 id="二知识">二、知识</h4><p>学长的文章（写得好好）： <a href="https://blog.csdn.net/qq_66026801/article/details/130520032">FAT12镜像查看工具_解析fat32镜像文件-CSDN博客</a></p><p>cat 需要访问数据区。</p><p>ls、ls -l 需要访问目录区。</p><h5 id="mbr-区">1. MBR 区</h5><p>从第 <code>11</code> 个字节开始的 <code>25</code> 个字节构成一个较为特殊的结构 <code>BPB(Bios Parameter Block)</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">typedef struct BPB &#123;</span><br><span class="line">    u16  BPB_BytsPerSec;//每扇区字节数</span><br><span class="line">    u8   BPB_SecPerClus;//每簇扇区数</span><br><span class="line">    u16  BPB_RsvdSecCnt;//Boot记录占用的扇区数</span><br><span class="line">    u8   BPB_NumFATs;        //FAT表个数</span><br><span class="line">    u16  BPB_RootEntCnt;//根目录最大文件数</span><br><span class="line">    u16  BPB_TotSec16;//扇区总数</span><br><span class="line">    u8   BPB_Media;             //介质描述符</span><br><span class="line">    u16  BPB_FATSz16;        //每个FAT表所占扇区数</span><br><span class="line">    u16  BPB_SecPerTrk;         //每磁道扇区数（Sector/track）</span><br><span class="line">    u16  BPB_NumHeads;        //磁头数（面数）</span><br><span class="line">    u32  BPB_HiddSec;        //隐藏扇区数</span><br><span class="line">    u32  BPB_TotSec32;        //如果BPB_ToSec16为0，该值为扇区数</span><br><span class="line">&#125; BPB;                          //25字节</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="fat-表">2. FAT 表</h5><p><code>FAT1</code> 与 <code>FAT2</code> 互为备份，所以理论上两张表是一样的。</p><p>FAT 表项的值的含义：</p><ul><li>通常情况下代表文件下一簇号。</li><li>值 <code>&gt;= 0xFF8</code>，该簇已经是文件最后一个簇。</li><li>值 <code>= 0xFF7</code>，表示一个坏簇。</li></ul><p><strong>簇的编号与 FAT 表中的索引</strong>：每个簇都有一个唯一的编号，FAT 表中的项索引与这些簇的编号对应。例如，第一个簇的编号对应 FAT 表中的第一个项，第二个簇对应第二个项，依此类推。</p><h5 id="根目录区">3. 根目录区</h5><p>一个目录项占据 <code>32</code> 字节。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct RootEntry &#123;</span><br><span class="line">    char DIR_Name[11];      //长度名+扩展名</span><br><span class="line">    u8   DIR_Attr;          //文件属性</span><br><span class="line">    char reserved[10];      //保留位</span><br><span class="line">    u16  DIR_WrtTime;       //最后一次写入时间</span><br><span class="line">    u16  DIR_WrtDate;       //最后一次写入日期</span><br><span class="line">    u16  DIR_FstClus;    //开始簇号</span><br><span class="line">    u32  DIR_FileSize;      //文件大小</span><br><span class="line">&#125; RootEntry;                //32字节</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由此，归结起来，FAT12访问文件的基本操作为：</p><ol type="1"><li>首先通过根目录文件查找文件名，确定是哪一个条目，接着在条目中访问 DIR_FstClus 对应的开始簇号。</li><li>当一个簇号访问完后，通过FAT表项查询下一簇号，决定是结束还是继续访问下一簇号，重复第二条。</li></ol><h5 id="数据区">4. 数据区</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct Entry&#123;</span><br><span class="line">char FILE_NAME[11];      //长度名+扩展名</span><br><span class="line">    u8   FILE_Attr;          //文件属性</span><br><span class="line">    char reserved[10];      //保留位</span><br><span class="line">    u16  DIR_WrtTime;       //最后一次写入时间</span><br><span class="line">    u16  DIR_WrtDate;       //最后一次写入日期</span><br><span class="line">    u16  DIR_FstClus;    //开始簇号</span><br><span class="line">    u32  DIR_FileSize;      //文件大小</span><br><span class="line">&#125;;//跟 RootEntry 一模一样</span><br></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/5a90e9eb1d9186eaad167bb31fd1ce9d.png" alt="" /><figcaption>FAT12.png</figcaption></figure><h5 id="file-attribution">5. File Attribution</h5><table><thead><tr class="header"><th>位</th><th>掩码</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>0</td><td>0x01</td><td>只读</td></tr><tr class="even"><td>1</td><td>0x02</td><td>隐藏</td></tr><tr class="odd"><td>2</td><td>0x04</td><td>系统</td></tr><tr class="even"><td>3</td><td>0x08</td><td>卷标</td></tr><tr class="odd"><td>4</td><td>0x10</td><td>子目录</td></tr><tr class="even"><td>5</td><td>0x20</td><td>档案</td></tr><tr class="odd"><td>6</td><td>0x40</td><td>设备（内部使用，磁盘上看不到）</td></tr><tr class="even"><td>7</td><td>0x80</td><td>没有使用</td></tr></tbody></table><p>0x0F 是 LFN。</p><h4 id="三代码设计">三、代码设计</h4><p>整体访问思路是：表项 =&gt; 数据区 =&gt; 下一表项</p><p>数据预处理，获取 BPB、表项、根目录及数据簇。</p><p>暂时先不考虑 LFN 的情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BPB</span> &#123;                  <span class="comment">// 11-35  25Bytes</span></span><br><span class="line">    <span class="type">uint16_t</span> BPB_BytsPerSec;  <span class="comment">// 每扇区字节数</span></span><br><span class="line">    <span class="type">uint8_t</span> BPB_SecPerClus;   <span class="comment">// 每簇扇区数</span></span><br><span class="line">    <span class="type">uint16_t</span> BPB_RsvdSecCnt;  <span class="comment">// Boot记录占用的扇区数</span></span><br><span class="line">    <span class="type">uint8_t</span> BPB_NumFATs;      <span class="comment">// FAT表个数</span></span><br><span class="line">    <span class="type">uint16_t</span> BPB_RootEntCnt;  <span class="comment">// 根目录最大文件数</span></span><br><span class="line">    <span class="type">uint16_t</span> BPB_TotSec16;    <span class="comment">// 扇区总数</span></span><br><span class="line">    <span class="type">uint8_t</span> BPB_Media;        <span class="comment">// 介质描述符</span></span><br><span class="line">    <span class="type">uint16_t</span> BPB_FATSz16;     <span class="comment">// 每个FAT表所占扇区数</span></span><br><span class="line">    <span class="type">uint16_t</span> BPB_SecPerTrk;   <span class="comment">// 每磁道扇区数（Sector/track）</span></span><br><span class="line">    <span class="type">uint16_t</span> BPB_NumHeads;    <span class="comment">// 磁头数（面数）</span></span><br><span class="line">    <span class="type">uint32_t</span> BPB_HiddSec;     <span class="comment">// 隐藏扇区数</span></span><br><span class="line">    <span class="type">uint32_t</span> BPB_TotSec32;    <span class="comment">// 如果BPB_ToSec16为0，该值为扇区数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Entry</span> &#123;              <span class="comment">// 32 Bytes</span></span><br><span class="line">    <span class="type">char</span> FILE_Name[<span class="number">11</span>];     <span class="comment">// 长度名+扩展名</span></span><br><span class="line">    <span class="type">uint8_t</span> FILE_Attr;      <span class="comment">// 文件属性</span></span><br><span class="line">    <span class="type">char</span> reserved[<span class="number">10</span>];      <span class="comment">// 保留位</span></span><br><span class="line">    <span class="type">uint16_t</span> DIR_WrtTime;   <span class="comment">// 最后一次写入时间</span></span><br><span class="line">    <span class="type">uint16_t</span> DIR_WrtDate;   <span class="comment">// 最后一次写入日期</span></span><br><span class="line">    <span class="type">uint16_t</span> DIR_FstClus;   <span class="comment">// 开始簇号</span></span><br><span class="line">    <span class="type">uint32_t</span> DIR_FileSize;  <span class="comment">// 文件大小</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LongFileNameEntry</span> &#123;  <span class="comment">// unused temporarily</span></span><br><span class="line">    <span class="type">uint8_t</span> LFNOrd;         <span class="comment">// 长文件名序号</span></span><br><span class="line">    <span class="type">uint16_t</span> LFNPart1[<span class="number">5</span>];   <span class="comment">// 长文件名的第一部分</span></span><br><span class="line">    <span class="type">uint8_t</span> LFNAttributes;  <span class="comment">// 文件属性标志</span></span><br><span class="line">    <span class="type">uint8_t</span> LFNReserved1;   <span class="comment">// 保留字段，应为0x00</span></span><br><span class="line">    <span class="type">uint8_t</span> LFNChecksum;    <span class="comment">// 校验和</span></span><br><span class="line">    <span class="type">uint16_t</span> LFNPart2[<span class="number">6</span>];   <span class="comment">// 长文件名的第二部分</span></span><br><span class="line">    <span class="type">uint16_t</span> LFNReserved2;  <span class="comment">// 保留字段，应为0x0000</span></span><br><span class="line">    <span class="type">uint16_t</span> LFNPart3[<span class="number">2</span>];   <span class="comment">// 长文件名的第三部分</span></span><br><span class="line">&#125;;</span><br><span class="line">BPB bpb;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; tabFAT;</span><br><span class="line">vector&lt;Entry&gt; rootEntry, dataEntry;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">char</span>* str)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以下代码慎重参考，个人风格较强。</strong>（好吧个人风格没写到 QwQ）。</p><p>C++ 的 string 库用起来不太习惯，手写了一个 myString。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20240413145103653.png" alt="" /><figcaption>image-20240413145103653</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验收准备</title>
      <link href="/2024/04/11/%E9%AA%8C%E6%94%B6%E5%87%86%E5%A4%87/"/>
      <url>/2024/04/11/%E9%AA%8C%E6%94%B6%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h4 id="一-hello-os">一、 Hello OS</h4><ol type="1"><li>制作镜像</li></ol><p>bximage fd 1.44M name</p><ol start="2" type="1"><li>boot.asm</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm boot.asm –o boot.bin</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>写入软盘</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dd if=boot.bin of=a.img bs=512 count=1</span><br><span class="line">- if：代表输入文件</span><br><span class="line">- of：代表输出设备</span><br><span class="line">- bs：block size</span><br><span class="line">- count：block count</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>bochsrc</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">megs:32</span><br><span class="line">display_library: sdl2</span><br><span class="line">floppya: 1_44=a.img, status=inserted</span><br><span class="line">boot: floppy</span><br><span class="line">romimage: file=$BXSHARE/BIOS-bochs-legacy</span><br><span class="line"></span><br><span class="line">- megs:32: 指定模拟器虚拟机的内存大小为 32 MB。这表示 Bochs 将模拟一个拥有 32 MB 内存的虚拟计算机。</span><br><span class="line">- display_library: sdl2: 指定使用 SDL2 库来进行图形显示。这将影响模拟器的图形输出方式。</span><br><span class="line">- floppya: 1_44=a.img, status=inserted: 设置第一个虚拟软盘驱动器 (floppya) 的参数。1_44=a.img 表示使用 1.44 MB 容量的软盘镜像文件 a.img，status=inserted 表示在启动时将这个软盘镜像插入虚拟机中。</span><br><span class="line">- boot: floppy: 指定虚拟机启动时从软盘 (floppy) 启动。</span><br><span class="line">- romimage: file=$BXSHARE/BIOS-bochs-legacy: 指定使用 Bochs 提供的旧版 BIOS 镜像文件 BIOS-bochs-legacy。</span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>启动</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bochs -f bochsrc</span><br><span class="line">-f 是一个选项，后面跟着配置文件的名称，这里是 bochsrc。</span><br></pre></td></tr></table></figure><h4 id="三实验问题">三、实验问题</h4><ol type="1"><li><p>8086 有哪 5 类寄存器？ 请分别举例说明其作⽤。</p><ol type="1"><li><strong>通用寄存器</strong>：<ul><li>通用寄存器用于存储数据和执行算术和逻辑操作。</li><li>例如：AX、BX、CX、DX 寄存器。其中，AX 可用于存放运算结果，BX 可用于存放内存地址，CX 可用于循环计数，DX 则可用于 I/O 操作。</li></ul></li><li><strong>段寄存器</strong>：<ul><li>段寄存器用于存储段的起始地址，是实现内存分段的关键。</li><li>例如：CS、DS、SS、ES 寄存器。CS 用于存放代码段的起始地址，DS 存放数据段的起始地址，SS 存放堆栈段的起始地址，ES 则是额外的数据段寄存器，用于一些特定的操作。</li></ul></li><li><strong>指令指针寄存器</strong>：<ul><li>指令指针寄存器存储了 CPU 正在执行的指令的地址。</li><li>例如：IP 寄存器，它存放着当前指令的偏移地址。</li></ul></li><li><strong>标志寄存器</strong>：<ul><li>标志寄存器用于存储 CPU 执行指令后产生的标志位，例如零标志、进位标志等。</li><li>例如：FLAGS 寄存器，包含了 AF（辅助进位标志）、ZF（零标志）、SF（符号标志）等。</li></ul></li><li><strong>控制寄存器</strong>：<ul><li>控制寄存器用于控制 CPU 的工作模式和行为。</li><li><strong>CR0（Control Register 0）</strong>：<ul><li>控制处理器的基本运行模式和特权级别。</li><li>包括控制处理器的保护模式、分页机制、数学协处理器的使用等。</li><li>包含的标志位例如保护模式使能标志（PE）、分页使能标志（PG）等。</li></ul></li><li><strong>CR2（Control Register 2）</strong>：<ul><li>存储导致页面故障（Page Fault）的线性地址。</li><li>在分页机制中，当发生页面故障时，处理器会将故障的线性地址存储在 CR2 中。</li></ul></li><li><strong>CR3（Control Register 3）</strong>：<ul><li>存储页目录表（Page Directory Table）的物理地址。</li><li>在分页机制中，CR3 寄存器指定了页表的基址，用于实现虚拟地址到物理地址的转换。</li></ul></li><li><strong>CR4（Control Register 4）</strong>：<ul><li>控制处理器的一些扩展特性和功能。</li><li>包括控制页大小（PS）、物理地址扩展（PAE）、机器检查异常（MCE）等功能。</li></ul></li><li><strong>CR8（Control Register 8）</strong>：<ul><li>控制处理器对外部中断的响应优先级。</li><li>允许软件控制中断响应的屏蔽级别。</li></ul></li><li><strong>MSR（Model-Specific Registers）</strong>：<ul><li>一类特殊的控制寄存器，用于存储处理器的模型特定配置信息和状态。</li><li>包括诸如时间戳计数器（TSC）、性能计数器（PMC）、功耗管理（Power Management）等功能。</li></ul></li></ul></li></ol><p>这些寄存器的作用使得 CPU 能够执行各种不同的指令，并对数据进行处理、存储和传输。</p></li><li><p>有哪些段寄存器， 它们的作⽤是什么？</p><p>​ 对应用程序来说，主要设计3类段：存放程序中指令代码的代码段（Code Segment）、存放当前运行程序所用数据的数据段（Data Segment）和指明程序使用的堆栈区域的堆栈段（Stack Segment）。 ​ 为了表明段在主存中的位置，8086设计有4个16位段寄存器：代码段寄存器CS、堆栈段寄存器SS、数据段寄存器DS和附加段寄存器ES（Extra Segment）。其中，附加段也是用于存放数据的数据段，专为处理数据串设计的串指令必须使用附加段作为其目的操作数的存放区域。</p></li><li><p>什么是寻址？ 8086 有哪些寻址⽅式？</p><p>寻址是指找到操作数的地址(从而能够取出操作数)。</p><p>8086的寻址方式</p><ul><li>立即寻址、直接寻址</li><li>寄存器寻址、寄存器间接寻址、寄存器相对寻址</li><li>基址加变址、相对基址加变址</li></ul></li><li><p>主程序与⼦程序之间如何传递参数</p><ul><li>利用寄存器传递参数</li><li>缺点：能传递的参数有限，因为寄存器有限</li><li>利用约定的地址传递参数</li><li>利用堆栈传递参数（常用）</li></ul></li><li><p>解释 boot.asm ⽂件中 org 07c00h 的作⽤。 如果去掉这⼀句， 整个程序应该怎么修改？</p><p>​ 告诉汇编器，当前这段代码会放在 07c00h处。所以，如果之后遇到需要绝对寻址的指令，那么绝对地址就是07c00h加上相对地址。</p><p>​ 如果去掉 org 07c00h，需要修改程序中的所有跳转、访存和地址相关的指令，确保它们正确地指向引导扇区程序在内存中的新位置。同时，还需要确保程序的大小不超过 512 字节，并且适当调整程序入口点。这样 BIOS 才能正确加载引导扇区程序并执行。</p></li><li><p>解释 int 10h 的功能。</p><p>中断调用 10H 功能，用于执行文本和图形模式下的视频显示操作。</p></li><li><p>解释 boot.asm ⽂件中 times 510-(<span class="math inline">\(-\)</span>$) db 0 的作⽤。</p><p>零填充使文件大小达到 510 字节，以确保引导扇区的大小为 512 字节。</p><ul><li><code>times</code> 是一个汇编伪操作，它用于重复执行一段代码或填充一定数量的数据。</li><li><code>510-($-$$)</code> 表示需要填充的字节数，其中 <code>$</code> 表示当前位置的地址。因此，<code>$-$$</code> 表示当前位置距离文件开头的偏移量。<code>510-($-$$)</code> 计算了当前位置到文件开头的偏移量，然后将其与 510 比较，以确定需要填充多少字节。</li><li>前面的 2 字节被用于存放磁盘分区的信息。</li><li><code>db 0</code> 表示以字节为单位将零填充到指定的位置。</li></ul></li><li><p>解释 bochsrc 中各参数的含义。</p><ol type="1"><li><code>megs:32</code>：<ul><li>这指定了虚拟机或仿真器应该分配给操作系统或应用程序的内存量。在这种情况下，32 表示分配了 32MB 的内存。这可以用来模拟具有指定内存量的计算机环境。</li></ul></li><li><code>display_library: sdl2</code>：<ul><li>这指定了用于显示的库或驱动程序。在这里，<code>sdl2</code> 可能是指 Simple DirectMedia Layer（简称SDL）的第二个版本，它是一个跨平台的多媒体库，用于在不同的平台上处理音频、视频和输入。使用 SDL2 可能是为了在模拟器或虚拟机中提供跨平台的图形支持。</li></ul></li><li><code>floppya: 1_44=a.img, status=inserted</code>：<ul><li>这定义了一个虚拟的软盘驱动器，指定了软盘的类型和镜像文件的位置。在这种情况下，<code>1_44</code> 表示一个 1.44MB 的软盘，<code>a.img</code> 是镜像文件的路径。<code>status=inserted</code> 表示该软盘已插入到虚拟软盘驱动器中。</li></ul></li><li><code>boot: floppy</code>：<ul><li>这告诉虚拟机或仿真器在启动时应该从软盘驱动器引导。也就是说，操作系统或引导程序应该从软盘镜像 (<code>a.img</code>) 中加载。</li></ul></li><li><code>romimage: file=$BXSHARE/BIOS-bochs-legacy</code> 这一行指定了一个 ROM 镜像文件的路径，路径为 <code>$BXSHARE/BIOS-bochs-legacy</code>。</li></ol></li><li><p>boot.bin 应该放在软盘的哪⼀个扇区？ 为什么？</p><p><code>boot.bin</code> 需要被放置在软盘的第一个扇区，以便 BIOS 能够正确加载并执行其中的引导程序。</p></li><li><p>为什么不让 Boot 程序直接加载内核， ⽽需要先加载 Loader 再加载内核？</p><p>在一些操作系统设计中，引导程序（Bootloader）和加载程序（Loader）的分离是有一些好处的：</p><ol type="1"><li><strong>复杂度管理</strong>：引导程序负责在计算机启动时加载最基本的系统组件，如引导扇区、文件系统等，而加载程序则负责更复杂的任务，例如从文件系统中加载内核、初始化内存、设置环境等。将这些任务分开可以更好地管理复杂度，使得引导程序更加简洁、可靠。</li><li><strong>灵活性</strong>：通过将加载程序与引导程序分开，可以更灵活地设计系统。例如，加载程序可以支持从不同类型的文件系统中加载内核，而引导程序则可以专注于在引导阶段完成最基本的硬件初始化和引导过程。</li><li><strong>模块化设计</strong>：将引导过程分成多个阶段可以实现系统的模块化设计。这样，如果需要更改加载过程中的某一部分，只需要修改加载程序而不影响引导程序，从而提高了系统的可维护性和扩展性。</li><li><strong>错误处理</strong>：通过引导程序和加载程序的分离，可以更好地处理错误情况。例如，如果加载程序在加载内核时出现错误，可以有机会显示错误消息或采取其他适当的处理措施，而不会影响到引导程序的功能。</li></ol><p>总的来说，通过引导程序和加载程序的分离，可以更好地管理复杂度、提高灵活性、实现模块化设计并改善错误处理，从而提高操作系统的可靠性和可维护性。</p></li><li><p>Loader 的作⽤有哪些？</p><p>加载程序（Loader）在操作系统启动过程中扮演着重要的角色，其主要作用包括：</p><ol type="1"><li><strong>加载内核</strong>：加载程序负责从存储介质（如硬盘、软盘、网络等）中读取操作系统内核的镜像文件，并将其加载到内存中。加载内核是操作系统启动过程中最关键的任务之一。</li><li><strong>初始化内存</strong>：加载程序可能需要在加载内核之前对系统内存进行初始化。这包括设置内存分页、建立内存映射表、分配内存空间等操作，以确保内核能够正常运行。</li><li><strong>设置环境</strong>：加载程序负责设置操作系统运行所需的执行环境。这包括设置堆栈、参数传递、初始化全局变量等操作，以确保内核能够正确执行。</li><li><strong>启动内核</strong>：加载程序加载完内核后，将控制权转移给内核，启动操作系统的正常运行。这通常是通过跳转到内核的入口点来实现的。</li><li><strong>错误处理</strong>：加载程序可能需要处理加载过程中出现的错误情况。这包括检测加载错误、显示错误信息、尝试恢复等操作，以确保系统能够正确启动或提供错误信息以供用户参考。</li></ol><p>总的来说，加载程序负责将操作系统内核加载到内存中，并为其提供必要的执行环境，从而启动操作系统的正常运行。加载程序在操作系统启动过程中起着至关重要的作用。</p></li><li><p>Kernel 的作⽤有哪些？</p><p>操作系统内核（Kernel）是操作系统的核心部分，负责管理计算机的硬件资源并提供各种系统服务。其主要作用包括：</p><ol type="1"><li><strong>硬件管理</strong>：内核管理计算机的硬件资源，包括处理器、内存、输入输出设备等。它负责分配和管理这些资源，以确保它们能够被应用程序有效地使用。</li><li><strong>进程管理</strong>：内核负责管理系统中运行的进程。它分配处理器时间片给不同的进程，并调度它们的执行顺序。此外，内核还负责进程的创建、终止、暂停和恢复等操作。</li><li><strong>内存管理</strong>：内核管理系统的内存资源，包括物理内存和虚拟内存。它负责将进程的内存空间映射到物理内存中，并处理内存的分配、回收和页面置换等操作。</li><li><strong>文件系统</strong>：内核提供文件系统服务，允许应用程序访问和管理文件和目录。它负责文件的创建、打开、读写、关闭等操作，并管理文件系统的存储空间。</li><li><strong>设备驱动程序</strong>：内核包含设备驱动程序，允许应用程序通过标准接口与硬件设备进行通信。它负责处理设备的初始化、数据传输、中断处理等操作。</li><li><strong>系统调用接口</strong>：内核提供系统调用接口，允许应用程序向内核请求系统服务。这些系统调用包括文件操作、进程管理、网络通信等，为应用程序提供了访问操作系统功能的途径。</li><li><strong>安全性和权限管理</strong>：内核负责实施安全策略和权限管理，保护系统和用户数据免受未经授权的访问和恶意软件的攻击。</li></ol><p>总的来说，内核是操作系统的核心部分，负责管理系统的硬件资源、提供系统服务和接口，并保证系统的安全性和稳定性。它为应用程序提供了一个统一的接口，使它们能够在计算机系统上运行并与硬件设备进行通信。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Compiler-Lab0x02</title>
      <link href="/2024/04/08/Compiler-Lab0x02/"/>
      <url>/2024/04/08/Compiler-Lab0x02/</url>
      
        <content type="html"><![CDATA[<p><strong>请辨证看待本文，并保留自己的思考。</strong></p><h4 id="一可视化语法树">一、可视化语法树</h4><p>代码格式化需要对语法树的结构及节点间的联系有比较深入的理解，图形化的语法树可以提供很好的帮助。</p><h5 id="idea-antlr4-插件">1. IDEA Antlr4 插件</h5><p>在 IDEA 中安装并启用 Antlr4 插件，然后下端栏便会出现 ANTLR Preview 界面。切换到该界面，然后打开 SysYParser.g4，插件会自动读取并解析，在终端输入代码/选择代码文件，插件便会生成可视化的语法树。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20240408153004719.png" alt="" /><figcaption>image-20240408153004719</figcaption></figure><h5 id="使用-antlr-grun">2. 使用 Antlr-grun</h5><p>如果你没有安装 grun，先安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt update</span><br><span class="line"><span class="variable">$sudo</span> apt install grun</span><br></pre></td></tr></table></figure><p>使用 grun 生成语法树的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grun [语法名] [入口] -gui</span><br></pre></td></tr></table></figure><p>输入后在下方输入代码，然后输入终止符 Ctrl-D 即可在弹出窗口中见到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$COMPILER</span>/src//切换到工作目录</span><br><span class="line">$ antlr4 SysYLexer.g4 SysYParser.g4</span><br><span class="line">$ javac *.java</span><br><span class="line">$ grun SysY program -gui &lt; ../tests/test.txt//管道输入</span><br></pre></td></tr></table></figure><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20240408153940165.png" alt="" /><figcaption>image-20240408153940165</figcaption></figure><h4 id="二正式工作">二、正式工作</h4><h5 id="错误监听器">1. 错误监听器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;input path is required&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;\nYour Output:&quot;);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">CharStream</span> <span class="variable">input</span> <span class="operator">=</span> CharStreams.fromFileName(source);</span><br><span class="line"></span><br><span class="line">        <span class="type">SysYLexer</span> <span class="variable">lexer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysYLexer</span>(input);</span><br><span class="line">        <span class="type">CommonTokenStream</span> <span class="variable">tokens</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonTokenStream</span>(lexer);</span><br><span class="line">        <span class="type">SysYParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysYParser</span>(tokens);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更换errorListeners</span></span><br><span class="line">        <span class="type">ErrorListener</span> <span class="variable">errorListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorListener</span>();</span><br><span class="line">        parser.removeErrorListeners();</span><br><span class="line">        parser.addErrorListener(errorListener);</span><br><span class="line">        <span class="comment">// 进行语法分析，生成语法树</span></span><br><span class="line">        <span class="type">ParseTree</span> <span class="variable">tree</span> <span class="operator">=</span> parser.program();</span><br><span class="line">        <span class="comment">// 错误监听</span></span><br><span class="line">        <span class="keyword">if</span> (errorListener.hasErrors()) &#123;</span><br><span class="line">            errorListener.printErrors();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Traverse the tree by visitor model.</span></span><br><span class="line">        Visitor&lt;ParseTreeList&gt; visitor = <span class="keyword">new</span> <span class="title class_">Visitor</span>&lt;ParseTreeList&gt;();</span><br><span class="line">        <span class="type">ParseTreeList</span> <span class="variable">visitResult</span> <span class="operator">=</span> visitor.visit(tree);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> visitor.getResult();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​ 通过寻找父类，可以获取如下类/方法：</p><ul><li>void SysYParser.removeErrorListeners(): 清除所有错误监听器。</li><li>void SysYParser.addErrorListener(ANTLRErrorListener listener): 添加错误监听器。</li><li>ParseTree SysYParser.program(): 这是整个语法分析的入口，执行之后会将输入的代码进行语法分析，并生成语法分析树。</li><li>BaseErrorListener.class: 这是错误监听器的基础版本，我们在其上进行修改。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorListener</span> <span class="keyword">extends</span> <span class="title class_">BaseErrorListener</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; errors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syntaxError</span><span class="params">(Recognizer&lt;?, ?&gt; recognizer, Object offendingSymbol, <span class="type">int</span> line, <span class="type">int</span> charPositionInLine,</span></span><br><span class="line"><span class="params">                            String msg, RecognitionException e)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="string">&quot;Error type B at Line &quot;</span> + line + <span class="string">&quot;: &quot;</span> + msg;</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义函数...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printErrors</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改完后 new 一个监听器然后替换掉原来的，接着执行 SysYParser.program() 即可对代码进行语法分析，其中遇到语法错误会由监听器处理。</p><h5 id="代码格式化">2. 代码格式化</h5><p>由于代码格式化对语法树的整体结构掌握有极高的要求，所以先进入这个板块进行分析。</p><p>假设你还没有读过代码，这里将解释一些核心的类/方法。</p><p>在错误监听的 task 中我们已经通过入口方法进行语法分析，生成了语法分析树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ParseTree</span> <span class="variable">tree</span> <span class="operator">=</span> parser.program();</span><br></pre></td></tr></table></figure><p>我们需要自己完成的 Visitor 类继承自 SysYParserBaseVisitor 类，可以通过 Visitor.visit() 遍历语法树。</p><p>先看看 SysYParserBaseVisitor 类，它继承自 AbstractParseTreeVisitor 类，其中有若干方法，命名都是 visit+语法单元的结构，方法内容都是 return visitChildren(ctx)，我们无需修改;</p><p>再看看父类 AbstractParseTreeVisitor，里面有几个比较关键的方法，其中出现了一个 accept 方法，也将其找出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SysYParserBaseVisitor.class</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">visit</span><span class="params">(ParseTree tree)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tree.accept(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">visitChildren</span><span class="params">(RuleNode node)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.defaultResult();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> node.getChildCount();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n &amp;&amp; <span class="built_in">this</span>.shouldVisitNextChild(node, result); ++i) &#123;</span><br><span class="line">            <span class="type">ParseTree</span> <span class="variable">c</span> <span class="operator">=</span> node.getChild(i);</span><br><span class="line">            <span class="type">T</span> <span class="variable">childResult</span> <span class="operator">=</span> c.accept(<span class="built_in">this</span>);</span><br><span class="line">            result = <span class="built_in">this</span>.aggregateResult(result, childResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">visitTerminal</span><span class="params">(TerminalNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.defaultResult();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RuleContext.class</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">accept</span><span class="params">(ParseTreeVisitor&lt;? extends T&gt; visitor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitChildren(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// TerminalNodeImpl.class</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">accept</span><span class="params">(ParseTreeVisitor&lt;? extends T&gt; visitor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitTerminal(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>还有出现的两个类，以及其它方法的溯源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RuleNode.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RuleNode</span> <span class="keyword">extends</span> <span class="title class_">ParseTree</span> &#123;</span><br><span class="line">    RuleContext <span class="title function_">getRuleContext</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RuleContext.class</span></span><br><span class="line"><span class="comment">// 获取节点的 Text</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getText</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.getChildCount() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.getChildCount(); ++i) &#123;</span><br><span class="line">                builder.append(<span class="built_in">this</span>.getChild(i).getText());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> builder.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取节点的语法编号(如果没有对应语法，直接返回-1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRuleIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TerminalNode.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TerminalNode</span> <span class="keyword">extends</span> <span class="title class_">ParseTree</span> &#123;</span><br><span class="line">    Token <span class="title function_">getSymbol</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Token.class</span></span><br><span class="line"><span class="comment">//这个应该比较熟悉了</span></span><br><span class="line">    String <span class="title function_">getText</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getType</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这些信息大致足够理解 Visitor.visit() 的流程了。</p><p>对于 Visitor.visit(tree):</p><ol type="1"><li>若 tree 是终止符 TerminalNode（叶子结点，也是词法符），返回默认 Result (这个我们可以自定义)。</li><li>若 tree 是语法规则符 RuleNode（非叶节点），result 初始化为节点的 、defaultResult，visit 每一个 child，并按顺序将其遍历结果 aggregate 在一起，返回 result。</li></ol><p>需要注意的一点是每次都是同一个 visitor 在 visit，因此类内部的变量也会受到修改。默认 Visitor.visit(ParserTree tree) 的等价代码，可以写成如下清晰的递归结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  T <span class="title function_">visit</span><span class="params">(ParseTree tree)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (tree <span class="keyword">instanceof</span> TerminalNode) &#123; <span class="comment">//叶子结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.visitTerminal((TerminalNode)tree);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (tree <span class="keyword">instanceof</span> RuleNode) &#123;</span><br><span class="line">        <span class="type">ParseTree</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.defaultResult();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.aggregateResult(result, <span class="built_in">this</span>.visitChildren(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">visitChildren</span><span class="params">(RuleNode node)</span> &#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.defaultResult();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> node.getChildCount();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n &amp;&amp; <span class="built_in">this</span>.shouldVisitNextChild(node, result); ++i) &#123;</span><br><span class="line">        <span class="type">ParseTree</span> <span class="variable">c</span> <span class="operator">=</span> node.getChild(i);</span><br><span class="line">        <span class="type">T</span> <span class="variable">childResult</span> <span class="operator">=</span> <span class="built_in">this</span>.visit(c);</span><br><span class="line">        result = <span class="built_in">this</span>.aggregateResult(result, childResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">visitTerminal</span><span class="params">(TerminalNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.defaultResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这只是为了方便理解，我们并不需要修改 visit() 方法，我们只需要修改 visitChildern() 方法和 visitTerminal() 方法。</p><p>下面来体验一下遍历语法树的过程，修改 visitChildern，在其进入的时候输出，退出的时候输出。修改 visitTerminal，输出其类型及 Text。这里的 Parser 可能稍有修改，但并不要紧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CharStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CharStreams;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CommonTokenStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.ParseTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;input path is required&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;\nYour Output:&quot;);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">CharStream</span> <span class="variable">input</span> <span class="operator">=</span> CharStreams.fromFileName(source);</span><br><span class="line"></span><br><span class="line">        <span class="type">SysYLexer</span> <span class="variable">lexer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysYLexer</span>(input);</span><br><span class="line">        <span class="type">CommonTokenStream</span> <span class="variable">tokens</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonTokenStream</span>(lexer);</span><br><span class="line">        <span class="type">SysYParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysYParser</span>(tokens);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更换errorListeners</span></span><br><span class="line">        <span class="type">ErrorListener</span> <span class="variable">errorListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorListener</span>();</span><br><span class="line">        parser.removeErrorListeners();</span><br><span class="line">        parser.addErrorListener(errorListener);</span><br><span class="line">        <span class="comment">// 进行语法分析，生成语法树</span></span><br><span class="line">        <span class="type">ParseTree</span> <span class="variable">tree</span> <span class="operator">=</span> parser.program();</span><br><span class="line">        <span class="comment">// 错误监听</span></span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">        <span class="comment">// Traverse the tree by visitor model.</span></span><br><span class="line">        Visitor&lt;Void&gt; visitor = <span class="keyword">new</span> <span class="title class_">Visitor</span>&lt;Void&gt;();</span><br><span class="line">        <span class="type">Void</span> <span class="variable">visitResult</span> <span class="operator">=</span> visitor.visit(tree);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Visitor.java</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.Vocabulary;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.VocabularyImpl;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.ParseTree;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.RuleNode;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.TerminalNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Visitor</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Void</span>&gt; <span class="keyword">extends</span> <span class="title class_">SysYParserBaseVisitor</span>&lt;Void&gt; &#123;</span><br><span class="line">    <span class="comment">// 实现Visitor类的具体方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONST</span> <span class="operator">=</span> <span class="number">1</span>, INT = <span class="number">2</span>, VOID = <span class="number">3</span>, IF = <span class="number">4</span>, ELSE = <span class="number">5</span>, WHILE = <span class="number">6</span>, BREAK = <span class="number">7</span>, CONTINUE = <span class="number">8</span>,</span><br><span class="line">            RETURN = <span class="number">9</span>, PLUS = <span class="number">10</span>, MINUS = <span class="number">11</span>, MUL = <span class="number">12</span>, DIV = <span class="number">13</span>, MOD = <span class="number">14</span>, ASSIGN = <span class="number">15</span>, EQ = <span class="number">16</span>, NEQ = <span class="number">17</span>, LT = <span class="number">18</span>,</span><br><span class="line">            GT = <span class="number">19</span>, LE = <span class="number">20</span>, GE = <span class="number">21</span>, NOT = <span class="number">22</span>, AND = <span class="number">23</span>, OR = <span class="number">24</span>, L_PAREN = <span class="number">25</span>, R_PAREN = <span class="number">26</span>, L_BRACE = <span class="number">27</span>,</span><br><span class="line">            R_BRACE = <span class="number">28</span>, L_BRACKT = <span class="number">29</span>, R_BRACKT = <span class="number">30</span>, COMMA = <span class="number">31</span>, SEMICOLON = <span class="number">32</span>, IDENT = <span class="number">33</span>, INTEGER_CONST = <span class="number">34</span>,</span><br><span class="line">            WS = <span class="number">35</span>, LINE_COMMENT = <span class="number">36</span>, MULTILINE_COMMENT = <span class="number">37</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RULE_program</span> <span class="operator">=</span> <span class="number">0</span>, RULE_compUnit = <span class="number">1</span>, RULE_decl = <span class="number">2</span>, RULE_constDecl = <span class="number">3</span>, RULE_bType = <span class="number">4</span>,</span><br><span class="line">            RULE_constDef = <span class="number">5</span>, RULE_constInitVal = <span class="number">6</span>, RULE_varDecl = <span class="number">7</span>, RULE_varDef = <span class="number">8</span>, RULE_initVal = <span class="number">9</span>,</span><br><span class="line">            RULE_funcDef = <span class="number">10</span>, RULE_funcType = <span class="number">11</span>, RULE_funcFParams = <span class="number">12</span>, RULE_funcFParam = <span class="number">13</span>, RULE_block = <span class="number">14</span>,</span><br><span class="line">            RULE_blockItem = <span class="number">15</span>, RULE_stmt = <span class="number">16</span>, RULE_exp = <span class="number">17</span>, RULE_cond = <span class="number">18</span>, RULE_lVal = <span class="number">19</span>, RULE_number = <span class="number">20</span>,</span><br><span class="line">            RULE_unaryOp = <span class="number">21</span>, RULE_funcRParams = <span class="number">22</span>, RULE_funcRParam = <span class="number">23</span>, RULE_constExp = <span class="number">24</span>,</span><br><span class="line">            RULE_funcName = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] makeRuleNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;program&quot;</span>, <span class="string">&quot;compUnit&quot;</span>, <span class="string">&quot;decl&quot;</span>, <span class="string">&quot;constDecl&quot;</span>, <span class="string">&quot;bType&quot;</span>, <span class="string">&quot;constDef&quot;</span>, <span class="string">&quot;constInitVal&quot;</span>,</span><br><span class="line">                <span class="string">&quot;varDecl&quot;</span>, <span class="string">&quot;varDef&quot;</span>, <span class="string">&quot;initVal&quot;</span>, <span class="string">&quot;funcDef&quot;</span>, <span class="string">&quot;funcType&quot;</span>, <span class="string">&quot;funcFParams&quot;</span>,</span><br><span class="line">                <span class="string">&quot;funcFParam&quot;</span>, <span class="string">&quot;block&quot;</span>, <span class="string">&quot;blockItem&quot;</span>, <span class="string">&quot;stmt&quot;</span>, <span class="string">&quot;exp&quot;</span>, <span class="string">&quot;cond&quot;</span>, <span class="string">&quot;lVal&quot;</span>, <span class="string">&quot;number&quot;</span>,</span><br><span class="line">                <span class="string">&quot;unaryOp&quot;</span>, <span class="string">&quot;funcRParams&quot;</span>, <span class="string">&quot;funcRParam&quot;</span>, <span class="string">&quot;constExp&quot;</span>, <span class="string">&quot;funcName&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] ruleNames = makeRuleNames();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] makeSymbolicNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="literal">null</span>, <span class="string">&quot;CONST&quot;</span>, <span class="string">&quot;INT&quot;</span>, <span class="string">&quot;VOID&quot;</span>, <span class="string">&quot;IF&quot;</span>, <span class="string">&quot;ELSE&quot;</span>, <span class="string">&quot;WHILE&quot;</span>, <span class="string">&quot;BREAK&quot;</span>, <span class="string">&quot;CONTINUE&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RETURN&quot;</span>, <span class="string">&quot;PLUS&quot;</span>, <span class="string">&quot;MINUS&quot;</span>, <span class="string">&quot;MUL&quot;</span>, <span class="string">&quot;DIV&quot;</span>, <span class="string">&quot;MOD&quot;</span>, <span class="string">&quot;ASSIGN&quot;</span>, <span class="string">&quot;EQ&quot;</span>, <span class="string">&quot;NEQ&quot;</span>,</span><br><span class="line">                <span class="string">&quot;LT&quot;</span>, <span class="string">&quot;GT&quot;</span>, <span class="string">&quot;LE&quot;</span>, <span class="string">&quot;GE&quot;</span>, <span class="string">&quot;NOT&quot;</span>, <span class="string">&quot;AND&quot;</span>, <span class="string">&quot;OR&quot;</span>, <span class="string">&quot;L_PAREN&quot;</span>, <span class="string">&quot;R_PAREN&quot;</span>, <span class="string">&quot;L_BRACE&quot;</span>,</span><br><span class="line">                <span class="string">&quot;R_BRACE&quot;</span>, <span class="string">&quot;L_BRACKT&quot;</span>, <span class="string">&quot;R_BRACKT&quot;</span>, <span class="string">&quot;COMMA&quot;</span>, <span class="string">&quot;SEMICOLON&quot;</span>, <span class="string">&quot;IDENT&quot;</span>, <span class="string">&quot;INTEGER_CONST&quot;</span>,</span><br><span class="line">                <span class="string">&quot;WS&quot;</span>, <span class="string">&quot;LINE_COMMENT&quot;</span>, <span class="string">&quot;MULTILINE_COMMENT&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] _SYMBOLIC_NAMES = makeSymbolicNames();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] makeLiteralNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="literal">null</span>, <span class="string">&quot;&#x27;const&#x27;&quot;</span>, <span class="string">&quot;&#x27;int&#x27;&quot;</span>, <span class="string">&quot;&#x27;void&#x27;&quot;</span>, <span class="string">&quot;&#x27;if&#x27;&quot;</span>, <span class="string">&quot;&#x27;else&#x27;&quot;</span>, <span class="string">&quot;&#x27;while&#x27;&quot;</span>, <span class="string">&quot;&#x27;break&#x27;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&#x27;continue&#x27;&quot;</span>, <span class="string">&quot;&#x27;return&#x27;&quot;</span>, <span class="string">&quot;&#x27;+&#x27;&quot;</span>, <span class="string">&quot;&#x27;-&#x27;&quot;</span>, <span class="string">&quot;&#x27;*&#x27;&quot;</span>, <span class="string">&quot;&#x27;/&#x27;&quot;</span>, <span class="string">&quot;&#x27;%&#x27;&quot;</span>, <span class="string">&quot;&#x27;=&#x27;&quot;</span>, <span class="string">&quot;&#x27;==&#x27;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&#x27;!=&#x27;&quot;</span>, <span class="string">&quot;&#x27;&lt;&#x27;&quot;</span>, <span class="string">&quot;&#x27;&gt;&#x27;&quot;</span>, <span class="string">&quot;&#x27;&lt;=&#x27;&quot;</span>, <span class="string">&quot;&#x27;&gt;=&#x27;&quot;</span>, <span class="string">&quot;&#x27;!&#x27;&quot;</span>, <span class="string">&quot;&#x27;&amp;&amp;&#x27;&quot;</span>, <span class="string">&quot;&#x27;||&#x27;&quot;</span>, <span class="string">&quot;&#x27;(&#x27;&quot;</span>, <span class="string">&quot;&#x27;)&#x27;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&#x27;&#123;&#x27;&quot;</span>, <span class="string">&quot;&#x27;&#125;&#x27;&quot;</span>, <span class="string">&quot;&#x27;[&#x27;&quot;</span>, <span class="string">&quot;&#x27;]&#x27;&quot;</span>, <span class="string">&quot;&#x27;,&#x27;&quot;</span>, <span class="string">&quot;&#x27;;&#x27;&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] _LITERAL_NAMES = makeLiteralNames();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Vocabulary</span> <span class="variable">VOCABULARY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VocabularyImpl</span>(_LITERAL_NAMES, _SYMBOLIC_NAMES);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] tokenNames;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        tokenNames = <span class="keyword">new</span> <span class="title class_">String</span>[_SYMBOLIC_NAMES.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tokenNames.length; i++) &#123;</span><br><span class="line">            tokenNames[i] = VOCABULARY.getLiteralName(i);</span><br><span class="line">            <span class="keyword">if</span> (tokenNames[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">                tokenNames[i] = VOCABULARY.getSymbolicName(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tokenNames[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">                tokenNames[i] = <span class="string">&quot;&lt;INVALID&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">getNodeTypeID</span><span class="params">(ParseTree node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node <span class="keyword">instanceof</span> RuleNode) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((RuleNode) node).getRuleContext().getRuleIndex();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TerminalNode) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((TerminalNode) node).getSymbol().getType();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getNodeType</span><span class="params">(ParseTree node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node <span class="keyword">instanceof</span> RuleNode) &#123;</span><br><span class="line">            <span class="keyword">return</span> ruleNames[getNodeTypeID(node)];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TerminalNode) &#123;</span><br><span class="line">            <span class="keyword">return</span> tokenNames[getNodeTypeID(node)];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Void <span class="title function_">visitChildren</span><span class="params">(RuleNode node)</span> &#123;</span><br><span class="line">        <span class="type">Void</span> <span class="variable">result</span> <span class="operator">=</span> defaultResult();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> node.getChildCount();</span><br><span class="line">        enterNode(node);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n &amp;&amp; <span class="built_in">this</span>.shouldVisitNextChild(node, result); ++i) &#123;</span><br><span class="line">            <span class="type">ParseTree</span> <span class="variable">c</span> <span class="operator">=</span> node.getChild(i);</span><br><span class="line">            <span class="built_in">this</span>.visit(c);</span><br><span class="line">        &#125;</span><br><span class="line">        exitNode(node);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Void <span class="title function_">visitTerminal</span><span class="params">(TerminalNode node)</span> &#123;</span><br><span class="line">        <span class="comment">//enter:</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//run:</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Terminal nodeType: &quot;</span> + getNodeType(node) + <span class="string">&quot; code: &quot;</span> + node.getText());</span><br><span class="line">        <span class="comment">//exit:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enterNode</span><span class="params">(RuleNode node)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Enter nodeType: &quot;</span> + getNodeType(node) + <span class="string">&quot; code: &quot;</span> + node.getText());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exitNode</span><span class="params">(RuleNode node)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Exit  nodeType: &quot;</span> + getNodeType(node) + <span class="string">&quot; code: &quot;</span> + node.getText());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># Input:</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Output:</span><br><span class="line">Enter nodeType: program code: intmain()&#123;inta=<span class="number">1</span>;&#125;</span><br><span class="line">Enter nodeType: compUnit code: intmain()&#123;inta=<span class="number">1</span>;&#125;</span><br><span class="line">Enter nodeType: funcDef code: intmain()&#123;inta=<span class="number">1</span>;&#125;</span><br><span class="line">Enter nodeType: funcType code: <span class="type">int</span></span><br><span class="line">Terminal nodeType: <span class="string">&#x27;int&#x27;</span> code: <span class="type">int</span></span><br><span class="line">Exit  nodeType: funcType code: <span class="type">int</span></span><br><span class="line">Enter nodeType: funcName code: main</span><br><span class="line">Terminal nodeType: IDENT code: main</span><br><span class="line">Exit  nodeType: funcName code: main</span><br><span class="line">Terminal nodeType: <span class="string">&#x27;(&#x27;</span> code: (</span><br><span class="line">Terminal nodeType: <span class="string">&#x27;)&#x27;</span> code: )</span><br><span class="line">Enter nodeType: block code: &#123;inta=<span class="number">1</span>;&#125;</span><br><span class="line">Terminal nodeType: <span class="string">&#x27;&#123;&#x27;</span> code: &#123;</span><br><span class="line">Enter nodeType: blockItem code: inta=<span class="number">1</span>;</span><br><span class="line">Enter nodeType: decl code: inta=<span class="number">1</span>;</span><br><span class="line">Enter nodeType: varDecl code: inta=<span class="number">1</span>;</span><br><span class="line">Enter nodeType: bType code: <span class="type">int</span></span><br><span class="line">Terminal nodeType: <span class="string">&#x27;int&#x27;</span> code: <span class="type">int</span></span><br><span class="line">Exit  nodeType: bType code: <span class="type">int</span></span><br><span class="line">Enter nodeType: varDef code: a=<span class="number">1</span></span><br><span class="line">Terminal nodeType: IDENT code: a</span><br><span class="line">Terminal nodeType: <span class="string">&#x27;=&#x27;</span> code: =</span><br><span class="line">Enter nodeType: initVal code: <span class="number">1</span></span><br><span class="line">Enter nodeType: exp code: <span class="number">1</span></span><br><span class="line">Enter nodeType: number code: <span class="number">1</span></span><br><span class="line">Terminal nodeType: INTEGER_CONST code: <span class="number">1</span></span><br><span class="line">Exit  nodeType: number code: <span class="number">1</span></span><br><span class="line">Exit  nodeType: exp code: <span class="number">1</span></span><br><span class="line">Exit  nodeType: initVal code: <span class="number">1</span></span><br><span class="line">Exit  nodeType: varDef code: a=<span class="number">1</span></span><br><span class="line">Terminal nodeType: <span class="string">&#x27;;&#x27;</span> code: ;</span><br><span class="line">Exit  nodeType: varDecl code: inta=<span class="number">1</span>;</span><br><span class="line">Exit  nodeType: decl code: inta=<span class="number">1</span>;</span><br><span class="line">Exit  nodeType: blockItem code: inta=<span class="number">1</span>;</span><br><span class="line">Terminal nodeType: <span class="string">&#x27;&#125;&#x27;</span> code: &#125;</span><br><span class="line">Exit  nodeType: block code: &#123;inta=<span class="number">1</span>;&#125;</span><br><span class="line">Exit  nodeType: funcDef code: intmain()&#123;inta=<span class="number">1</span>;&#125;</span><br><span class="line">Exit  nodeType: compUnit code: intmain()&#123;inta=<span class="number">1</span>;&#125;</span><br><span class="line">Exit  nodeType: program code: intmain()&#123;inta=<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>语法树：</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/antlr4_parse_tree.png" alt="" /><figcaption>antlr4_parse_tree</figcaption></figure><p>至此已经说明了遍历的全部流程，完成格式化即是利用语法树节点之间的关系与节点的性质，实现空格添加、缩进添加、换行添加三种功能。<strong>只需要改动 visitTerminal(), enterNode(), exitNode() 三个方法，enterNode() 和 exitNode() 分为换行、缩进、空格三个模块。</strong>由于我自己实现的逻辑可以说是比较糟糕的，这里就不详细讲了，这一块是本次Lab的核心，需要深入理解语法树的结构。有一些小 tricks：</p><ul><li>关于缩进添加，可以使用一些代码中不可能出现的符号进行占位，比如一个缩进四个空格我们可以替换为四个 '@' ，最后再进行替换。</li><li>关于换行，可以单独写一个方法，先移除所有空格，然后加换行，接着添加缩进。</li><li>关于换行，不要考虑结束换行，考虑开始换行。最后黄桥</li><li>关于空格，任意两 token 之间至多一个空格，我们可以在最后使用正则表达式进行替换，在操作时就会省心很多。</li><li>后面忘了。</li></ul><h5 id="染色">3. 染色</h5><p>染色功能所在层级主要为终结符，也就是说我们只需要在将终结符的字串添加到 result 之前染色，然后添加，然后恢复默认值即可。关键字、运算符、长整数高亮极其显然。</p><p>关于函数名高亮，我们可以修改 Parser.g4，将函数定义与函数调用中的 IDENT 父节点挂一个 FuncType 即可。然后在碰到 IDENT 终结符的时候判断其父节点的类型是否是 FuncType 即可。</p><p>我们可以使用 ParserTree.getParent() 来获取父节点。</p><p>语句高亮指 stmt 但不包括 block。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private Boolean childrenIsBlock(RuleNode node) &#123;</span><br><span class="line">    int n = node.getChildCount();</span><br><span class="line">    if (n != 1) return false;</span><br><span class="line">    else return getNodeType(node.getChild(0)) == RULE_block;</span><br><span class="line">&#125;</span><br><span class="line">    private Boolean isSpecialStmt(RuleNode node) &#123;</span><br><span class="line">    int n = node.getChildCount();</span><br><span class="line">    if (n == 0) return false;</span><br><span class="line">    int type = getNodeType(node.getChild(0));</span><br><span class="line">    return type == IF || type == ELSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明高亮是个语法符，也是直接判断。</p><p>Rainbow 括号也非常简单，一种可行的实现方法是定义一个全局的 blockLevel 表示括号颜色下标，然后终结符判断为左括号增，右括号减。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private Integer getBlockLevel() &#123;</span><br><span class="line">       return this.blockLevel;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private void addBlockLevel() &#123;</span><br><span class="line">       int val = getBlockLevel();</span><br><span class="line">       this.blockLevel = (val + 1) % 6;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private void recoverBlockLevel() &#123;</span><br><span class="line">       int val = getBlockLevel();</span><br><span class="line">       this.blockLevel = ((val - 1) % 6 + 6) % 6;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>有一句比较关键的话：</p><blockquote><p>如果某个终结符满足多个染色条件，以最接近的一次为准。</p><p>其他情况：<strong>不包含</strong>任何颜色或格式</p></blockquote><p>我们需要从当前节点开始匹配，若匹配不到结果，则递归遍历父节点，直到 null 即表示其他情况。</p><p>至此染色环节结束。</p><blockquote><p>这是一条必经的路</p><p>没有指引出口的光</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Compiler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 相关配置</title>
      <link href="/2024/04/08/Ubuntu%20%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/04/08/Ubuntu%20%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="一前言">一、前言</h4><p>这是我在若干次重装 Ubuntu-22.04-LTS 时遇到的普遍性问题，遂志之。</p><h4 id="二配置">二、配置</h4><h5 id="无法连接校园网的问题">1. 无法连接校园网的问题</h5><p>在重装完系统之后出现无法连接校园网，但却可以连接手机热点的问题。</p><p>原因是 iwlwifi 驱动未加载，查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsmod | grep iwlwifi</span><br></pre></td></tr></table></figure><p>发现并无输出，说明驱动并没有启动。重新加载模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo modprobe iwlwifi</span><br></pre></td></tr></table></figure><p>加载后即可顺利连接校园网。</p><h5 id="修改配置文件后无法进入系统的问题">2. 修改配置文件后无法进入系统的问题</h5><p>在修改完配置后无法顺利进入系统，黑屏仅右上角有光标闪烁。</p><p>开机选择 ubuntu develop 模式启动，选择 root，输入密码后即可以 root 进入命令行模式，定位错误信息修改后即可。</p><h5 id="开机自动挂载硬盘">3. 开机自动挂载硬盘</h5><p>因为我 Ubuntu 和 Windows 系统会共用一些文件（没错就是这个 blog），每次开机需要打开磁盘挂载，比较麻烦，所以需要实现开机自动挂载。</p><p>手动挂载后，查看分区信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">df</span> - h</span><br><span class="line"></span><br><span class="line">文件系统        大小  已用  可用 已用% 挂载点</span><br><span class="line">tmpfs           1.4G  2.4M  1.4G    1% /run</span><br><span class="line">/dev/nvme1n1p8   73G   25G   45G   36% /</span><br><span class="line">...</span><br><span class="line">/dev/nvme0n1p1  806G  482G  325G   60% /media/lg/新加卷</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看见最后一个就是目标挂载盘。查询挂载盘 UUID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo blkid /dev/nvme0n1p1 </span><br><span class="line"></span><br><span class="line">/dev/nvme0n1p1: LABEL=<span class="string">&quot;M-fM-^VM-0M-eM-^JM- M-eM-^MM-7&quot;</span> BLOCK_SIZE=<span class="string">&quot;512&quot;</span> UUID=<span class="string">&quot;1210A22E10A218AD&quot;</span> TYPE=<span class="string">&quot;ntfs&quot;</span> PARTUUID=<span class="string">&quot;50ec242e-01&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开文件 /etc/fstab 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/fstab</span><br></pre></td></tr></table></figure><p>添加挂载条目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># /dev/nvme0n1p1</span></span><br><span class="line">UUID=1210A22E10A218AD /media/lg/新加卷 ntfs defaults 0 2</span><br></pre></td></tr></table></figure><p>第一个数字：0表示开机不检查磁盘，1表示开机检查磁盘； 第二个数字：0表示交换分区，1代表启动分区（Linux），2表示普通分区</p><h5 id="idea-运行内存设置">4. IDEA 运行内存设置</h5><p>这几天在系统运行过程中，出现了三种卡顿情况：Webstorm 崩溃，IDEA 崩溃，以及输入框崩溃。经过内存监听，初步推断是内存问题。新买的两根 16G 的内存条还没发货，先看看能不能从软件层面入手。</p><p>顶部菜单 &gt; help &gt; Edit Custom VM options，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-Xmx5000m  最大堆内存大小为 5000MB</span><br><span class="line">-Xms1000m  //初始堆内存大小,随着应用程序的需求逐渐增加堆内存大小，最终不会超过 -Xmx 指定的最大值.</span><br><span class="line">-XX:ReservedCodeCacheSize=512m  设置保留代码缓存的大小为 512MB。代码缓存用于存储已编译的代码，以提高程序的执行效率。</span><br><span class="line">-XX:+UseG1GC  指示 JVM 使用 G1 (Garbage-First) 垃圾收集器</span><br></pre></td></tr></table></figure><p>顺便清除下 IDEA 的缓存。</p><p>顶部菜单 &gt; Invalidate Caches &gt; 二三项 &gt; Invalidate and Restart.</p><h5 id="更换输入源">5. 更换输入源</h5><p>经过调查，发现了输入区集体严重延迟的源头是 ibus-pinyin 输入法。</p><blockquote><p>由于读取 sqlite 词库时有大量的IO操作，ibus-pinyin 在系统高负载时输入时有卡住的现象。</p></blockquote><p>查找到的解决方法几乎全部都是治标不治本，遂决定更换输入法。</p><p>目前没有找到特别合适的替代，暂时先更新原输入法吧，崩溃后再继续折腾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install --reinstall ibus ibus-gtk ibus-gtk3 ibus-clutter ibus-pinyin</span><br><span class="line">$ ibus restart</span><br></pre></td></tr></table></figure><h5 id="系统容灾备份-clonezilla">6. 系统容灾备份 (Clonezilla)</h5><p>设备准备：2 枚 U盘，一枚作为引导盘（容量 4G 即可），一枚作为备份盘（需要较大容量，视备份数据量而定，我使用的是 64GB U盘）。其中引导盘需要先格式化（可以选择任意设备通用），并在其上建立一个分区。</p><p>在 Clonezilla 官网上下载 zip 包，并解压到引导盘。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo lsblk</span><br><span class="line">$ sudo unzip clonezilla-live-20240116-mantic-amd64.zip -d /usb-boot</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /usb-boot/utils/linux/</span><br><span class="line">$ sudo bash makeboot.sh /dev/sdaX</span><br></pre></td></tr></table></figure><p><strong>这里的 /dev/sdaX 是引导盘，注意不能填错！！！</strong></p><p>然后插入引导盘，进入 BIOS 界面设备选择将其置顶，再启动即可进入 Clonezilla 界面。</p><p>备份的操作逻辑比较简单，这里就不多讲了。</p><h4 id="三参考资料">三、参考资料</h4><p><a href="https://blog.csdn.net/qq_35451572/article/details/79541106">Ubuntu 磁盘挂载——开机自动挂载_ubuntu2204如何设置开机挂载硬盘-CSDN博客</a></p><p><a href="https://blog.csdn.net/u014072827/article/details/114397807">ubuntu之制作再生龙(Clonezilla)启动盘_再生龙压缩包-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下 MySQL 安装与权限相关问题</title>
      <link href="/2024/04/04/Ubuntu%20%E4%B8%8B%20MySQL%20%E5%AE%89%E8%A3%85%E4%B8%8E%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
      <url>/2024/04/04/Ubuntu%20%E4%B8%8B%20MySQL%20%E5%AE%89%E8%A3%85%E4%B8%8E%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="一-mysql-安装与密码配置">一、 MySQL 安装与密码配置</h4><h5 id="mysql-安装">1. MySQL 安装</h5><p>MySQL 安装比较方便，运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install mysql-server</span><br></pre></td></tr></table></figure><p>安装完成后，MySQL 服务将自动启动。验证 MySQL 服务器运行情况，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl status mysql</span><br></pre></td></tr></table></figure><p>输出显示服务正在运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">● mysql.service - MySQL Community Server</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Thu 2024-04-04 00:35:37 CST; 45min ago</span><br><span class="line">    Process: 15355 ExecStartPre=/usr/share/mysql/mysql-systemd-start pre (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 15363 (mysqld)</span><br><span class="line">     Status: <span class="string">&quot;Server is operational&quot;</span></span><br><span class="line">      Tasks: 38 (<span class="built_in">limit</span>: 16491)</span><br><span class="line">     Memory: 366.4M</span><br><span class="line">        CPU: 17.785s</span><br><span class="line">     CGroup: /system.slice/mysql.service</span><br><span class="line">             └─15363 /usr/sbin/mysqld</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="以-root-用户登陆">2. 以 root 用户登陆</h5><p>刚安装完的 MySQL 是没有登陆密码的，以 root 身份登陆 MySQL，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mysql</span><br></pre></td></tr></table></figure><p>顺利进入 MySQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">16</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.36</span><span class="number">-0</span>ubuntu0<span class="number">.22</span><span class="number">.04</span><span class="number">.1</span> (Ubuntu)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2024</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure><h5 id="初始化密码">3. 初始化密码</h5><p>初始化 root 密码，键入如下指令，将 MyPassword 替换为自己的密码即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span><span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;MyPassword&#x27;</span>;</span><br></pre></td></tr></table></figure><p>重新加载授权表并退出，使最近对授权进行的更改生效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> flush privileges;</span><br><span class="line">mysql<span class="operator">&gt;</span> quit;</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>重新进入 MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mysql -uroot -p</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><p>然后输入密码即可。</p><h4 id="二权限相关问题与解决">二、权限相关问题与解决</h4><p>以上过程证明了 MySQL 的安装是顺利的，以及密码设置也无误。但我去掉 <code>sudo</code> 运行，却出现如下情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">ERROR 2002 (HY000): Can<span class="string">&#x27;t connect to local MySQL server through socket &#x27;</span>/tmp/mysql.sock<span class="string">&#x27; (2)</span></span><br></pre></td></tr></table></figure><p>一开始以为是密码输入错误，但由于 <code>sudo</code> 状态下能顺利登入。</p><p>接下来检查权限，先以 root 用户登入服务器。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use mysql;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span>,host,plugin <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>             <span class="operator">|</span> host      <span class="operator">|</span> plugin                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> debian<span class="operator">-</span>sys<span class="operator">-</span>maint <span class="operator">|</span> localhost <span class="operator">|</span> caching_sha2_password <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.infoschema <span class="operator">|</span> localhost <span class="operator">|</span> caching_sha2_password <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.session    <span class="operator">|</span> localhost <span class="operator">|</span> caching_sha2_password <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys        <span class="operator">|</span> localhost <span class="operator">|</span> caching_sha2_password <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root             <span class="operator">|</span> localhost <span class="operator">|</span> mysql_native_password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+-----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若 root 的 plugin 是 auth_socket，更换为 mysql_native_password 即可解决问题。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> plugin <span class="operator">=</span> <span class="string">&#x27;mysql_native_password&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> flush privileges;</span><br></pre></td></tr></table></figure><p>错误只能在 <code>socket '/tmp/mysql.sock' (2)</code> 这里了。打开 /tmp 目录却发现并没有 mysql.sock 这个文件。</p><p>尝试查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo find / -name mysql.sock</span><br></pre></td></tr></table></figure><p>发现其在 <code>/var/lib/mysql</code> 目录下，创建软链接即可解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ln</span> -s /var/lib/mysql/mysql.sock /tmp/mysql.sock</span><br></pre></td></tr></table></figure><p>但是我整个系统都不存在 mysql.sock 文件。</p><p>上网检索后发现可能是系统运行一个 cron 任务删除了 /tmp 下的临时文件。</p><p>重启 MySQL 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mysql restart</span><br></pre></td></tr></table></figure><p>再次查询，没有任何变化。</p><blockquote><p>mysql.sock 这个文件有什么用？</p><p>连接 localhost 通常通过一个 Unix 域套接字文件进行，一般是 /tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个 cron 任务删除了 /tmp 下的临时文件。</p></blockquote><p>通过 TCP/IP 连接进入 MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -h 127.0.0.1 -p </span><br></pre></td></tr></table></figure><p>可以顺利进入。</p><p>现在解决办法变为，重新指定一个不同的套接字，也就是生成 mysql.sock 或寻找替代。</p><blockquote><p>On Unix, you can connect to the mysqld server by using two different ways: a Unix socket file (for example, /var/run/mysqld/mysqld.sock), or by using TCP/IP (for example, <code>127.0.0.1:3306</code>).</p></blockquote><p><code>/var/run/mysqld/mysqld.sock</code> 这个文件就是我们所需要的。查询发现确实有这个文件。</p><p>接下来就是配置，查询到的配置方法如下：</p><figure><img src="https://img-blog.csdn.net/20171220111132201?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGpmMTYxMTA1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" /><figcaption>img</figcaption></figure><p>打开 <code>/etc/mysql/my.cnf</code> 配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure><figure><img src="/home/lg/.config/Typora/typora-user-images/image-20240404015837864.png" alt="" /><figcaption>image-20240404015837864</figcaption></figure><p>发现不太一样，可以看到有效信息只有两行，这两行配置告诉MySQL服务器去两个指定目录查找 .cnf 配置文件，并将它们包含到主配置文件中。</p><p>继续查询，<code>/etc/mysql/conf.d/</code> 和 <code>/etc/mysql/mysql.conf.d/</code> 目录下一共四个配置文件，一一查看后发现并没有 [client] 条目。</p><p>创建 client 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/mysql/mysql.conf.d</span><br><span class="line">sudo vim client.cnf</span><br></pre></td></tr></table></figure><p>写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /var/run/mysqld/mysqld.sock    <span class="comment"># change the socket source</span></span><br></pre></td></tr></table></figure><p>然后以普通用户启动 MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 18</span><br><span class="line">Server version: 8.0.36-0ubuntu0.22.04.1 (Ubuntu)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动成功。</p><p>三、参考文档</p><p><a href="https://blog.csdn.net/qq_40421671/article/details/113735462">ubuntu18.04下mysql必须要sudo权限才能打开-CSDN博客</a></p><p><a href="https://www.jetbrains.com/help/datagrip/how-to-connect-to-mysql-with-unix-sockets.html">Create a MySQL data source using unix sockets | DataGrip Documentation</a></p><p><a href="https://blog.csdn.net/hjf161105/article/details/78850658">亲测有效，解决Can 't connect to local MySQL server through socket '/tmp/mysql.sock '(2) ";_can't connect to local mysql server through socket-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II-0x09 软件体系结构基础</title>
      <link href="/2024/03/07/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x09%20%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/03/07/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x09%20%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c7752beb4612179377db03c31e44c59c563f3a5fc1a2a2d80a005c66c7775e78"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件工程与计算II </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大二下相关</title>
      <link href="/2024/03/07/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E7%9B%B8%E5%85%B3/"/>
      <url>/2024/03/07/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h4 id="一index">一、index</h4><h5 id="软工ii">1. 软工II</h5><ul><li><p><a href="https://p.internal-paas.seec.seecoder.cn/">seec门户系统</a></p></li><li><p><a href="developer.internal-paas.seec.seecoder.cn">developer系统</a></p></li><li><p>作业相关</p><ul><li><a href="https://nqq5jc94uf.feishu.cn/docx/Qi4ydjqfQoV7ynxrCujciCB7nGh">大作业描述</a></li><li><a href="https://nqq5jc94uf.feishu.cn/docx/Mo8UdFKMHoBcxkxzTkQcRo8mnSe">Developer使用说明</a></li><li><a href="https://nqq5jc94uf.feishu.cn/docx/T3UedRuVHozcwMxgBe9cXxqRnjd">文档Lab1-项目启动文档</a></li><li><a href="https://nqq5jc94uf.feishu.cn/docx/Wsdud2WMKol0qZxZViVcBGXfnSc">文档Lab2-用例文档</a></li><li><a href="https://nqq5jc94uf.feishu.cn/docx/V9fFdlZMUol8xRxrYrVcPBEInkb">代码Lab1-熟悉项目</a></li><li><a href="https://nqq5jc94uf.feishu.cn/docx/UfM1dtvK3oUFKsxhP8LcztRZn3b">代码Lab2-商店商品模块</a></li></ul></li></ul><h5 id="compiler">2. Compiler</h5><ul><li><a href="http://docs.compilers.cpl.icu/#/">Compiler@NJU-SE (cpl.icu)</a></li><li><a href="https://oj.compilers.cpl.icu/#/">Online Judge (cpl.icu)</a></li></ul><h5 id="数据管理基础-操作系统">3. 数据管理基础 / 操作系统</h5><ul><li><a href="https://selearning.nju.edu.cn/login/index.php">教学支持系统: 登录本网站 (nju.edu.cn)</a></li></ul><h5 id="ml">4. ML</h5><ul><li>https://www.lamda.nju.edu.cn/ML2024Spring/</li></ul><h5 id="nlp">5. NLP</h5><h4 id="二最近活动">二、最近活动</h4><table><thead><tr class="header"><th>活动</th><th>时间/deadline</th></tr></thead><tbody><tr class="odd"><td>大创二阶段</td><td>03/07 - 03/22</td></tr></tbody></table><h4 id="三任务链">三、任务链</h4><table><thead><tr class="header"><th>阶段一</th><th>进度</th></tr></thead><tbody><tr class="odd"><td>ML lab2</td><td></td></tr><tr class="even"><td>软工II 代码Lab4</td><td></td></tr><tr class="odd"><td>近纲书评</td><td></td></tr><tr class="even"><td>OS Lab1 验收 0412</td><td></td></tr><tr class="odd"><td>毛概社会实践材料 0426</td><td></td></tr><tr class="even"><td>OS Lab2</td><td></td></tr><tr class="odd"><td>数据库作业 6</td><td></td></tr><tr class="even"><td>ML Lab2</td><td></td></tr><tr class="odd"><td>NLP Lab1</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> todo-list </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II-0x08 软件设计基础</title>
      <link href="/2024/03/04/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x08%20%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/03/04/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x08%20%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f3f9b04e987517478bb426f7a66b7b7742335f141d5cb3a74b8506d79e04ffcf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件工程与计算II </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II-0x07 需求文档化与验证</title>
      <link href="/2024/03/04/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x07%20%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3%E5%8C%96%E4%B8%8E%E9%AA%8C%E8%AF%81/"/>
      <url>/2024/03/04/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x07%20%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3%E5%8C%96%E4%B8%8E%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f534c4634042a019b5e7614183dc38d7947e16a5fb692b240809c840a90deff7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件工程与计算II </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II-0x06 需求分析方法</title>
      <link href="/2024/02/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x06%20%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95/"/>
      <url>/2024/02/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x06%20%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="aa7445460101032cdbe5761df815d9375b27e5a69176638a3a6e1950d269942e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件工程与计算II </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II-0x05 软件需求基础</title>
      <link href="/2024/02/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x05%20%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/02/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x05%20%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="da01cbcf3d9edd43bcbc1edf33cc21c0aef1a2ac1a6c5a1cae035e3bac0e8a24"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件工程与计算II </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II-0x04 项目管理基础</title>
      <link href="/2024/02/27/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x04%20%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/02/27/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x04%20%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b6cc74803c2b9432658837a49f1521a20a930bbd4d6917eec86ceeabddc55bf8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件工程与计算II </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II-0x03 示例项目描述</title>
      <link href="/2024/02/27/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x03%20%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE%E6%8F%8F%E8%BF%B0/"/>
      <url>/2024/02/27/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x03%20%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE%E6%8F%8F%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c62d49ffc5616e42c7949bfd57103edf62776d12bdd8b745bffe3d3968bcbc7a">912a58fe804a02bfcba207b0f915ff49e8f77b118f659e1b3ebdddd69d5037e1859dfd6576b159a46031c48c29a1ec9a371b87e107e52865577e10b0aa46e13655c289302f16be5b6b89f246d37f56370038ceb3a47bb1a9b927de4c3bd5db4b96cec01198ee61997479e634fe3f2925dd65ace5e3eb9ad68abeabd17909888cdfe12a27e8b2ec79b4536920785cc947589c0b057f3bf239c8166a681f539db618289a617eb258d02a878ed0622a525859322a96dc0462ed9e5e254fca3e4388e5b9de18040882c85ba5dceeb13a6316fc0f8aced576217717a2be74d658986e39f167851ec49704e952fa73d888b48b3bf44ce4a5479b9d40743f0c9acbf2a22461a51f7c0399a2a0fbbdbc02644aec8098dc53315dfac207eae8cfc55d8e853546653555b107818a9178e0a028a747a982ef3105d60e5bdef143fe667da73b963c2ff6e43000f4128a33057c02d396b3c1a2c1c4f99b7bddd37195eecab6b39a4d7ae6007a62a3a713f0207cafcb0f31777cd55aa4fc9d583e6ce91fb1a2de1a0c853a31501155a578b35d2d5f62307bd8555d5a90c74dc2238eb932e806cd27edfd0eccdbb01085e3444c77592893bdc976a1aa920e49d8971a26037d0bbdbc45430588ed65ab3e35adb20973e50b323de4c5575e787428e80576675db6d82fa6f7aaee5e72232af6c160c39bbbf6a0b5498c36f809cf740b5a4dfb7ebac02bd3c49573cde8bb6e94547d7d7675bbfad3d743e0b58f1e89dc5c7cfb739f8cd237a9121c1d7c539cdf84aac45fe5d90c079d61dfb444f84c612581e0da4f3ccec97e647421742925a2cc634d40f2a0cc118c8d6cbe88035ae6ec88e5e515f93131ec5ec4093cffb5eebf6823e32300d2ca1e0ba8353f13e7c70424510ddb748aab21e0533c44b6a2bcf8bc813b6e82482b3bdb1b64b5564bc10dbb5ab8a65eba1b15a3b712564619ea4ca2a34fc81a988ab7def018e07388a689588413bab138d247805395f00c4475019090800d3489d3c40266633596c3a81cf05d87b8749187583091aa525d5effc75ac2e80773ee3a71994320ec8e80e141c47a0f74a998191f0d74741950ecacbd747b658b57022776b9f956a2d485d5c6154a848f61f2cc5953891cbb016f3a177663691a510b0424c25aab5f7152616e6c94e1baf64de0539554693302e041d213ad093fece904105898a810863cddb7cf5d582f325dd712e02b0fff5c330adb96c03fb32769252a81c9dced63bb84e772d74ac150ef96b827bc9f9263e477a274eb1793ebd2c771e55b0dc18146d1ef5c729c756cf44c15ae5e6b0460a72032eac7d1671456493b01406c3c37183cf85086c22d3721f21f7d0fde16e4361ff7c870f83d68bc1b55491461df236ec30de6992b43780fc710393a71e4b08a9eb1cbf89a8cf3a98893b5bbafd249f2b6a1701924c963de12c4647f2684686a9486c96b1e88608976ed5fb9fcb18325a000cdc8894a0ec2124f76c12ca24d17f871c04f5baed9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件工程与计算II </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程与计算II-0x02 软件工程的发展</title>
      <link href="/2024/02/26/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x02%20%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%8F%91%E5%B1%95/"/>
      <url>/2024/02/26/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-0x02%20%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%8F%91%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="80ecedee9384b550c35c56e7ce1f2b5ccaa118477e0901429853738d6312b421"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件工程与计算II </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于抑郁症</title>
      <link href="/2024/01/22/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87/"/>
      <url>/2024/01/22/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9f260e531b54b630fbc8313ca043c5eedf8598ebc70a588a352f187936fb2d23">7feab2e74e7ac8c26f5b44aac0c37567ff466b63919be9d0ba0ba966bbb2663d32df72e4636f9a57d9b45e369f5d3b81c009155d2629396ad68c367e3b51894426e559d4aa911a5984c666f8105313cbc3dfe487b2ad33e5c244854277c051f0ea0d00331c31f4eea091e5372759c08569e53d3997333f9bcc2b9e69a6813620843c9826707360f5a383420cdb7043cc81706b8626cba862d6bedbcbd8c44e45a4fc8fff123d1593edd827ac883d8d2145d5f6609a761e4f1894f1914a96202b47902bd64feef1673316dff9d80d6c275dc0127755a29321f09873b0b1a57466dce8ec7ae177182a9337ee7736e42c08ce10ce2cd70a1eca941a9f615aa53c4120d881bc8e13cd26fde4f862d82ab23c149754f60294c050da8c9673b3d403b1799f7b007774e56d835755f874ca3508541202ec7c20f05156efdd09c330907538f6a3fee627254e70d200a3d4c31a270447266b0c1a46588f019988dd8faad6dabc96de1605c055c36a7aceb88ca28ac6ab724fec130a79a2429117f8a56f86fddb8e30dd6082ee7811a74ecf52f6100f19c005e2d073e92a14be0be6474dfe39faa1318607571898925305317280230bb5e710c4d9cb8ce395da558129068cea65b6aa06d85288242946c6bbe4f8d30e0604842e5108e2054cc8d8d4ecc521b1632ef025ed08989a1e4a2db8e7b5e76bccb398eb9d01930355d79d4d5280da94f964510374117bbdd6972bc7d073eb0b9d3026faa5ca723e8ccf22f15d466201c4cf8ddda2238c6d4f90214ddfbd1ca1be3001bae45d1b0fb9ece660adbf0a80a837dcf4427562361a5896b87e57dc514a6d696add10f2edcb74dbbc5e7b4553e227512bd3b085eee37f74ffbfb1ac298e523327e7879b7e17e62a06a93e89d872e1fe3f80928a583aebf02a0fe232bf60dae99281efed2bc753115261eb32753528069648cefedea059239f117b938156803841349898da3e0e8c190b703715c1ec531bd03d85b43a23bb13ecf06d6fb6e25719e4cbf8c1ba34b45a90b08ed083f7c4763cf6931c10f71763257d8469a650f901c174442101daabc602d797be19b1bcd1e558d7f39d15911070656132bf8f8dd1f47f41984742eb27d8cacdbc013b053cc9999c9525df3356092e54e3f8020282d07ed7521b96d619a434f42a69c0e67fe9d86ad0bf1475fc0390e2d2c0fa98102e54726f5533c164648c4a971f68409d3c5bf1b431edd41c653931726771cf669b59598210a70274b058d4d67e7a2dcff75ae9e94587572cfc6e9461b755a0350b735d61a0f4ec7af53b7bb6f7625af1c1ce73478657a9098ea50763b22ad5d02dcfd7c599d9fb429e078744b0e5d07bd8acd3765176274ae99864d822bf8c4217283bdf6a6d4ead20450bcd403a775f3e5a7e9c8036009f2046f40fbfa585b810cf8d772f0cfb2fa91a15e3a5e46685cb650a8c36d0b870bcab9adc9df7f5eaa1539f82534d891f0f9fa7e12dec05632c9419d5ec7ee153d2947dfbdd3930704bfd985fc1829ecf4a9b2a5f16fcf0fbe7ef5b095d834aa802efb5e688c99cce014147392433deb5dcea81252bdc9c366af2d049daa68688df348c6d5d6c9e53cf1f56189b40b38460e8e568f6d1b2e541706d8ac89f5c38a97e796c3fd811b38e62b993937f5afb3259a403fd9d647e70093e085f783e477ddf658268b1f85e0fa82bc791647884f95f88f9aeec5341f49da4d34e91259276a1089515a7c9a20d0aaa8242e1680d8b96b89bcdbf0d41482c1059bc38c72417bf41c83b98128162227fe7d34b0a0a808c9e1f52f1fcfd9152775736b9af6878b7661fb50947ee46938ec3d344a8e741c36a61ccc2d5e5100dd866d790bafb9034c9b2109983cf8d8803715145245e4c8b4ca1cb86dc1e1e5dcd6fed67ce05e758e9151a4888d708c22a76af5680dc942bbe88acc44b27945acada8568a67b71ac6805baacfeab5cb719cfcd1d7ba7efe7df8587c057485dba6c4c058468efa50951d52bf569acb52fca488e77e99b017d1723a4216c87284f27525810852751e8cdd7936e28d26917a8756ba93b835260c6ca5bae7ccddd12385fd96f8cb04813b426b325dd82a966e564abed1010d276205fd74b94bbac4d419d1bdf406a2ee77ecc1a73687a25b973f397abed2a8cfa72561e3d22a1f9ba6c5f3f4a1076d1ee409d6b83cd8f39f5f8d49c2e48bce0f43354bf3df5a4f33702284592b2ac5537bcc522c5e1630243d98ee9d9198e93ff66e353cde97f3c82eae7348f06da6f0684c514e21e974189f525675612a46acbfcaf98dc92d43b1f974a1976c3c13676b55ae42e2bf49a53d594bb7456b98de563d46b33cc93006d68c2fa04af6187947305b75712f679122cdd8c842a70e9ddfa05faa3f1d55263cdba6abe1a1afe5d2fc758ac570837acb27dab12b6d83d3d8b7fad87146897ba23206b12df3097cb79df03394f797a17d0d0b9ce230d2f60acbd12a696f0b107135fb95a5d50cb50c10fcbf2d994a0f7458fd64519f1196bffb8f6dfd915d1a18a7dedae2649d0c6882c0f4888af18dc0658eba2b50501a98fd913d15b904d3cf563500dff6fa8c3d77ffaef8d846a6742b9ffeab78419b3f3775262f5276b1fccecb38f9a2c13d9f3bbc93624656b3f344942f859a54c114fc75e2132e772af1e5f6a1d06c71facc83f1853e822af0d3122bbdd2baaee5ea0a1d3d66f3dd7c9a98ee157729e75a0c4fce93c39b14523d8ff3a738e2c9db8f3a8a08755db7cbadee7a1299c008dba973a2187e05f441a0a4951f8daf1fd3d24fce1c4f42c357701e625ac73f9595c5120e7a880c36bd6c5baaca5a090e48ab82c78f1f6508726b44fe7f16dad2ddbf5775f45ee4a4423e6c75b8df70c9bb7979f94ee155849eaaf117ab6f3b0e77218f48d2bf728cd826cd310987c2f835e09b081cb38a7aa0e2a8040af124a3ff23ebbdfa88b35427c7ca5d2ecfa647b7897f66a82f22dd6fe322b889c8f1112c2f0c832dd3c3ddeb3a25b79b0daa4b3cc136c159ca24499d53eac1a3738838a7a334ef662ab3ee058f5b02d02b5919ef529113da77eec27b11877d721585b642a4a1d1ce85e29d751d2357937d1b0661832479bb0bf291b80d16ba8ce841608826c5e5838df246755bc1da7034065ae78866580749762609d6ed92ea6a55bbb389f8f2e3f3639e9fec81f14fbed3c3c76d1fdbbc7f0b0e65f4b93e7cbf1ad201e1acd95bcf59cc4fb5c19571db1a90470e5c27839632cf2c55a81b87b32aef9da53</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 抑郁症 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>走在自己的时区里</title>
      <link href="/2024/01/20/%E8%B5%B0%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%B6%E5%8C%BA%E9%87%8C/"/>
      <url>/2024/01/20/%E8%B5%B0%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%B6%E5%8C%BA%E9%87%8C/</url>
      
        <content type="html"><![CDATA[<p><em>作者：来源不详</em></p><p>在时间上，纽约走在加州前面三个小时，</p><p>但加州并没有变慢。</p><p>有人22岁就毕业了，</p><p>但等了五年才找到好工作！</p><p>有人25岁就当上了CEO，</p><p>却在50岁去世了。</p><p>也有人直到50岁才当上CEO，</p><p>最后活到90岁。</p><p>有人依然单身，</p><p>而别人却早已结婚。</p><p>奥巴马55岁退任总统，</p><p>而川普却是70岁才开始当。</p><p>世上每个人都有自己的发展时区。</p><p>身边有些人看似走在你前面，</p><p>也有人看似走在你后面。</p><p>但其实每个人在自己的时区有自己的步程。</p><p>不用嫉妒或嘲笑他们。</p><p>他们都在自己的时区，你在你的！</p><p>所以，别放松。</p><p>你没有落后，</p><p>你没有领先。</p><p>在命运为你安排的属于你自己的时区里，一切都非常准时。</p><p>好，别忘了危机与奋斗</p><p>难，别忘了梦想与坚持</p><p>忙，别忘了读书与锻炼</p><p>人生，就是一场长跑</p><p>New York is 3 hours ahead of California,</p><p>but it does not make California slow.</p><p>Someone graduated at the age of 22,</p><p>but waited 5 years before securing a good job!</p><p>Someone became a CEO at 25,</p><p>and died at 50.</p><p>While another became a CEO at 50,</p><p>and lived to 90 years.</p><p>Someone is still single,</p><p>while someone else got married.</p><p>Obama retires at 55,</p><p>but Trump starts at 70.</p><p>Absolutely everyone in this world works based on their Time Zone.</p><p>People around you might seem to go ahead of you,</p><p>some might seem to be behind you.</p><p>But everyone is running their own RACE, in their own TIME.</p><p>Don't envy them or mock them.</p><p>They are in their TIME ZONE, and you are in yours!</p><p>So, Never Give up</p><p>You're not LATE.</p><p>You're not EARLY.</p><p>You are very much ON TIME, and in your TIME ZONE Destiny set up for you.</p><p>Well, Don't forget the crisis and the struggle.</p><p>Hard. Don't forget the dream and the persistence.</p><p>Busy, Don't forget to read and exercise</p><p>Life is a long run</p>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谢希仁计算机网络07-网络安全</title>
      <link href="/2023/12/26/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C07-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
      <url>/2023/12/26/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C07-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1ac1a51f6fbff62cee9d6d32e0c9f67cceacc70999280f472d8ae33198390d2d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未选择的路</title>
      <link href="/2023/12/04/%E6%9C%AA%E9%80%89%E6%8B%A9%E7%9A%84%E8%B7%AF/"/>
      <url>/2023/12/04/%E6%9C%AA%E9%80%89%E6%8B%A9%E7%9A%84%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><em>作者：罗伯特·弗罗斯特</em></p><p>黄色的树林里分出两条路，</p><p>可惜我不能同时去涉足，</p><p>我在那路口久久伫立，</p><p>我向着一条路极目望去，</p><p>直到它消失在丛林深处。</p><p>​</p><p>但我却选了另外一条路，</p><p>它荒草萋萋，十分幽寂，</p><p>显得更诱人、更美丽；</p><p>虽然在这两条小路上，</p><p>都很少留下旅人的足迹；</p><p>​</p><p>虽然那天清晨落叶满地，</p><p>两条路都未经脚印污染。</p><p>呵，留下一条路等改日再见！</p><p>但我知道路径延绵无尽头，</p><p>恐怕我难以再回返。</p><p>​</p><p>也许多少年后在某个地方，</p><p>我将轻声叹息把往事回顾：</p><p>一片树林里分出两条路，</p><p>而我选了人迹更少的一条，</p><p>从此决定了我一生的道路。</p><hr /><h5 id="the-road-not-taken">The Road Not Taken</h5><p>Two roads diverged in a yellow wood,</p><p>And sorry I could not travel both</p><p>And be one traveler, long I stood</p><p>And looked down one as far as I could</p><p>To where it bent in the undergrowth;</p><p>​</p><p>Then took the other, as just as fair,</p><p>And having perhaps the better claim,</p><p>Because it was grassy and wanted wear;</p><p>Though as for that the passing there</p><p>Had worn them really about the same,</p><p>​</p><p>And both that morning equally lay</p><p>In leaves no step had trodden black.</p><p>Oh, I kept the first for another day!</p><p>Yet knowing how way leads on to way,</p><p>I doubted if I should ever come back.</p><p>​</p><p>I shall be telling this with a sigh</p><p>Somewhere ages and ages hence:</p><p>Two roads diverged in a wood,and I—</p><p>I took the one less traveled by,</p><p>And that has made all the difference.</p>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数笔记（下）</title>
      <link href="/2023/11/27/%E7%BA%BF%E4%BB%A3%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2023/11/27/%E7%BA%BF%E4%BB%A3%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="751d8f912e081680b0cd714b66be060c01813bac8720fb816b60d973c6032d8a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 线代 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谢希仁计算机网络06-应用层</title>
      <link href="/2023/11/25/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C06-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2023/11/25/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C06-%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>应用层许多协议都是基于<strong>客户服务器方式</strong>。即便是 P2P 实质上也是一种特殊的客户服务器方式，客户 (clinet) 和服务器 (server) 都是指通信中涉及的两个<strong>应用进程</strong>。</p><h4 id="域名系统-dns">6.1 域名系统 DNS</h4><h5 id="概述">6.1.1 概述</h5><p>​ 域名系统 DNS 能把互联网上的主机名字转换为 IP 地址。互联网采用层次树状结构的命名方法，并使用分布式的域名系统 DNS。DNS 使大多数名字都在本地进行<strong>解析 (resolve)</strong>，仅少量解析需要在互联网上进行通信。</p><p>​ 域名到 IP 地址的解析是由分布在互联网上的许多<strong>域名服务器程序</strong>共同完成的，人们也常讲运行域名服务器程序的机器称为<strong>域名服务器</strong>。</p><p>​ 域名解析的请求以 UDP 用户数据报的方式进行传输。具体传输路径待后续探讨。</p><h5 id="互联网域名结构">6.1.2 互联网域名结构</h5><p>​ 互联网采用层次树状结构进行命名，任何一个连接在互联网上的主机或路由器，都有一个唯一的<strong>层次结构的名字</strong>，即<strong>域名 (domain name)</strong>。域还可以划分为子域，这样就形成了顶级域、二级域、三级域等等。每个域名由<strong>标号 (label)</strong> 序列组成，各标号间用<strong>点</strong>隔开，</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123095017782.png" alt="" /><figcaption>image-20231123095017782</figcaption></figure><ul><li>每个标号不超过 63 字符。</li><li>不区分大小写。</li><li>多标号组成完整域名不超过 255 字符。</li></ul><p>​ 顶级域名分为四大类：</p><ul><li><strong>国家顶级域名 nTLD</strong>：如 cn 表示中国，us 表示美国等等，又常记为 ccTLD (country-code)。</li><li><strong>通用顶级域名 gTLD</strong>：截至 2006 年 12 月，已达 20 个。公司企业 com，网络服务机构 net，非营利性组织 org，国际组织 int，美国专用教育机构 edu，美国政府部门 gov，美国军事部门 mil，等等。</li><li><strong>基础结构域名</strong>：又称反向域名，只有一个 arpa，用于反向域名解析。</li><li><strong>新顶级域名 New gTld</strong>：2011 年正式批准，任何公司机构都有权申请。</li></ul><p>​ 二级域名划分为<strong>类别域名</strong>和<strong>行政区域名</strong>两大类。</p><ul><li>类别域名：7 个，科研机构 ac，工商金融等企业 com，教育机构 edu，政府机构 gov，国防机构 mil，互联网服务机构 net，非营利性组织 org。</li><li>行政区域名：34 个，如江苏省 js，北京 bj，等等。</li></ul><p>​ 一般采用域名树来表示互联网的域名系统，其中根节点无名，如图：</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123095841535.png" alt="" /><figcaption>image-20231123095841535</figcaption></figure><h5 id="域名服务器">6.1.3 域名服务器</h5><p>​ 一个服务器管辖的范围叫做<strong>区 (zone)</strong>，一个区中所有节点必须联通。每一个区设置相应的<strong>权限域名服务器 (authoritative name server)</strong>，用于保存该区主机域名到 IP 的映射。</p><p>​ 按照所起作用，可将域名服务器划分为四种不同类型：</p><ul><li><strong>根域名服务器 (root name server)</strong>：最高层次服务器，也是最重要的服务器。全世界 588 (2016 年 2 月) 个地点安装的跟服务器，只有 13 个域名，a.rootservers.net，...，m.rootservers.net。这表明，互联网是由 13 套装置构成这 13 组域名服务器。每一地点的根服务器往往由多台机器组成。根域名服务器采用<strong>任播 (anycast)</strong> 技术，DNS 客户查询时，路由器就能找到最近的一个根域名服务器。</li><li><strong>顶级域名服务器</strong>：管理在该服务器注册的所有二级域名，收到 DNS 请求时给出回答。</li><li><strong>权限域名服务器</strong>：负责一个区的域名服务器。当一个权限域名服务器还不能给出回答时，便回复客户下一步应当请求哪个服务器。</li><li><strong>本地域名服务器</strong>：并不属于服务器层次结构。主机发出 DNS 请求时，先发往本地服务器。本地服务器若无法作出回应，则继续作为客户方向其他根域名服务器发出查询报文，得到结果后再将回复发送给主机。</li></ul><p>​ 主机向本地服务器查询一般采用<strong>递归查询</strong>，即逐步深入。而本地服务器向根域名服务器查询采用<strong>迭代查询</strong>，即遍历询问。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123101430625.png" alt="" /><figcaption>image-20231123101430625</figcaption></figure><p>​ 为提高可靠性，DNS 域名服务器还将数据复制到几个域名服务器保存，其中一个为<strong>主域名服务器 (master name server)</strong>，其余为<strong>辅助域名服务器 (secondary name sever)</strong>。</p><p>​ 为提高效率，域名服务器广泛使用<strong>高速缓存</strong>，存放最近查询过的域名以及从何处获得域名映射信息的记录。域名服务器为每项内容设置计时器并处理超时项。</p><h4 id="文件传送协议">6.2 文件传送协议</h4><h5 id="概述-1">6.2.1 概述</h5><p>​ <strong>文件传送协议 FTP (File Transfer Protocol)</strong> 提供交互式访问，允许客户指明文件类型与格式，并允许文件具有存取权限。屏蔽系统细节，适合于在异构网络中任意计算机间传送文件。</p><p>​ 基于 TCP 的 FTP 和基于 UDP 的 TFTP 是文件共享协议的一大类，即<strong>复制整个文件</strong>，欲修改文件，只能修改副本，然后将整个副本传回。</p><p>​ 另一大类是<strong>联机访问 (on-line access)</strong>。由操作系统提供对远地文件进行访问的服务，如同对本地文件访问一样。操作系统提供<strong>透明存取</strong>。透明存取优点为更改远地文件时无需作过多改动。属于该协议的有<strong>网络文件系统 NFS (Network File System)</strong>。</p><h5 id="ftp-工作原理">6.2.2 FTP 工作原理</h5><p>​ 采用客户服务器方式。FTP 服务器进程由两大部分组成：一个负责接收请求的<strong>主进程</strong>和若干个负责处理单个请求的<strong>从属进程</strong>。工作步骤如下：</p><ol type="1"><li>打开熟知端口（端口号 21），以便客户连接。</li><li>等待客户发出连接请求。</li><li>启动从属进程处理请求，建立连接（熟知端口号 20），处理完毕终止该从属进程。</li><li>回到等待状态，继续接受请求。主进程与从属进程是<strong>并发</strong>的。</li></ol><p>​ 主进程即负责<strong>控制连接</strong>，从属进程即负责<strong>数据连接</strong>。FTP 控制信息是<strong>带外 (out of band)</strong> 传送的。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123103128516.png" alt="" /><figcaption>image-20231123103128516</figcaption></figure><p>​ NFS 允许应用进程打开一个远地文件并从某一特定位置开始读写数据，在网络上传送的仅是少量修改数据。</p><h5 id="简单文件传送协议-tftp">6.2.3 简单文件传送协议 TFTP</h5><p>​ 两个优点：</p><ul><li>可用于 UDP 环境。</li><li>代码所占内存小，可以用于小型机或某些特殊设备。</li></ul><p>​ 主要特点：</p><ul><li>每次传输 512 字节，最后一次可不足。</li><li>报文按序编号，1 开始。</li><li>支持 ASCII 或 二进制传送。</li><li>可对文件进行读或写。</li><li>使用很简单的首部。</li></ul><p>​ 发送一方在规定时间内收不到确认就需重发数据 PDU。 TFTP 熟知端口号码为 69。</p><h4 id="远程终端协议-telnet">6.3 远程终端协议 TELNET</h4><p>​ TELNET 能将用户击键传到远地主机，也能将远地主机输出通过 TCP 连接返回用户屏幕。又称<strong>终端仿真协议</strong>。</p><p>​ 为了适应不同操作系统的差异，TELNET 定义了数据和命令应怎样通过互联网，这些定义就是所谓的<strong>网络虚拟终端 NVT (Network Virtual Terminal)</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123104246975.png" alt="" /><figcaption>image-20231123104246975</figcaption></figure><p>​ NVT 的格式定义很简单。所有通信都使用 8 位一个字节。运转时，采用 7 位 ASCII 码传输数据，最高位为 1 时用作控制命令。定义了两字符的 <strong>CR-LF</strong> 作为标准的行结束控制符。</p><h4 id="万维网-www">6.4 万维网 WWW</h4><p>​ 万维网是一个<strong>大规模的、联机式的信息储藏所</strong>。能方便地从一个站点访问（或称<strong>链接</strong>到）另外一个站点。万维网是一个分布式的<strong>超媒体 (hypermedia)</strong> 系统，是<strong>超文本 (hypertext)</strong> 系统的扩充。超文本是指包含指向其它文档的链接的文本。超文本是万维网的基础。</p><p>​ 万维网以客户服务器的方式工作。客户发出请求，服务器返回客户所需的万维网文档。万维网必须解决如下几个问题：</p><ul><li>怎样标志分布在整个互联网上的万维网文档？</li><li>用什么协议实现万维网各种链接？</li><li>如何使不同作者创作不同风格的文档，都能在各种主机上显示出来，同时使用户清楚知道什么地方存在着链接？、</li><li>如何使用户方便找到所需信息？</li></ul><h5 id="统一资源定位符-url">6.4.2 统一资源定位符 URL</h5><p><span class="math display">\[URL:=&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;\]</span></p><p>​ 常用协议 http，其次是 ftp。<主机>指出万维网文档的位置，<端口>和<路径>有时可以省略。</p><h6 id="使用-http-的-url">6.4.2.1 使用 HTTP 的 URL</h6><p><span class="math display">\[URL:=http://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;\]</span></p><p>​ HTTP 默认端口号 80，通常可省略。若再省略路径，则连接到<strong>主页 (home page)</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123105938675.png" alt="" /><figcaption>image-20231123105938675</figcaption></figure><h5 id="超文本传送协议-http">6.4.3 超文本传送协议 HTTP</h5><h6 id="http-的操作过程">6.4.3.1 HTTP 的操作过程</h6><p>​ 从层次角度看，HTTP 是<strong>面向事务的 (transaction-oriented)</strong> 应用层协议，可以传输任何可从互联网上得到的信息，如文本、超文本、声音和图像等。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123113251838.png" alt="" /><figcaption>image-20231123113251838</figcaption></figure><p>​ 每个万维网网点都有一个服务器进程，不断监听 TCP 端口 80，以便发现是否有连接建立请求。一旦监听到连接建立请求并建立 TCP 连接后，浏览器就发出浏览某个页面的请求，服务器就返回页面作为响应。这种交互过程遵循的格式和规则，就是 HTTP。</p><p>​ HTTP 报文通常使用 TCP 的连接传送，但 HTTP 本身是<strong>无连接</strong>的。</p><p>​ HTTP 协议是<strong>无状态的 (stateless)</strong>。每次访问时服务器响应都相同，并不记录曾经的访问。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123113709977.png" alt="" /><figcaption>image-20231123113709977</figcaption></figure><p>​ 如图所示，请求一个 Web 文档所需时间是传输时间加上两倍往返时间 RTT。</p><p>​ HTTP/1.0 每次请求都有两倍 RTT 开销，加上每建立一次连接都需要分配缓存和变量，开销很大，这种<strong>非持续连接</strong>会使 Web 服务器负担很重。</p><p>​ HTTP/1.1 协议使用了<strong>持续连接</strong>，响应后仍在一段时间内保持该条连接，响应同一个服务器的请求。该协议有两种工作方式，<strong>非流水线方式 (without pipelining)</strong> 和<strong>流水线方式 (with pipelining)</strong>。</p><p>​ 非流水线特点是，客户收到前一个响应后才能发出下一个请求，节省了建立连接所需一个 RTT 时间。</p><p>​ 流水线方式特点是，客户收到响应前就可发送下一个请求，服务器可连续响应，访问<strong>所有对象</strong>只需一个 RTT 时间，提高了效率。</p><h6 id="代理服务器">6.4.3.2 代理服务器</h6><p>​ <strong>代理服务器 (proxy server)</strong> 又称<strong>万维网高速缓存 (Web cache)</strong>。将最近的一些请求和响应暂存于本地磁盘，新请求到达先经代理服务器查询，查询不到则作为客户发送请求。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123114554859.png" alt="" /><figcaption>image-20231123114554859</figcaption></figure><h6 id="http-报文结构">6.4.3.3 HTTP 报文结构</h6><p>​ HTTP 有两类报文：请求报文和响应报文。</p><p>​ HTTP 是<strong>面向文本的 (text-oriented)</strong>，因此报文每个字段都是一些 ASCII 码。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123114745262.png" alt="" /><figcaption>image-20231123114745262</figcaption></figure><p>​ <strong>开始行</strong>：请求报文称<strong>请求行 (Request-Line)</strong>，响应报文称<strong>状态行 (Status-Line)</strong>。最后 CR 和 LF 分别代表回车和换行。</p><ul><li><del>==有点复杂，先咕咕了==</del></li></ul><h5 id="web-文档">6.4.4 Web 文档</h5><h6 id="静态-web-文档">6.4.4.1 静态 Web 文档</h6><p>​ 超文本标记语言 HTML 是一种制作 Web 页面的标准语言。其中插入链接的终端可以是其它网站页面，称<strong>远程链接</strong>；亦可为本地计算机的某一个文件或文件某处，称<strong>本地连接</strong>。</p><p>​ XML (Extensible Markup Language) 是<strong>可扩展标记语言</strong>，设计宗旨是传输数据。</p><p>​ XHTML (Extensible HTML) 是可扩展超文本标记语言，是更严格的 HTML 版本，并将逐渐取代 HTML。</p><p>​ CSS 是<strong>层叠样式表</strong>。HTML 负责结构化内容，CSS 负责格式化结构化的内容。</p><p>​ 以上都是<strong>静态文档 (static document)</strong>，创建完即不会改变。缺点是不够灵活，但 HTML 可以由不懂程序设计的人员创建，优点是简单。</p><h6 id="动态-web-文档">6.4.4.2 动态 Web 文档</h6><p>​ <strong>动态文档 (dynamic document)</strong> 是指文档内容是在浏览器访问万维网服务器时才由应用程序动态创建的。动态文档的开发是编写用于生成文档的应用程序，因此开发难度更大。实现动态文档需要对 Web 服务器的功能进行扩充：</p><ul><li>增加一个应用程序用来处理浏览器发来的数据并创建动态文档。</li><li>增加一个机制，使 Web 服务器将浏览器发来的数据传送给该程序，Web 服务器解释该应用程序输出并向浏览器返回 HTML 文档。</li></ul><p>​ <strong>通用网关接口 CGI (Common Gateway Interface)</strong> 是一种标准，定义动态文档该如何创建，输入数据该如何提供给应用程序，输出结果应如何使用。 CGI 的正式名是 <strong>CGI 脚本 (script)</strong>，又称 cgi-bin 脚本，因为在许多 Web 服务器上，为便于找到 CGI 程序，就放在 /cgi-bin 目录下。</p><p>6.4.4.3 活动 Web 文档</p><p>​ 有两种技术可用于浏览器屏幕显示的连续更新：</p><ul><li><strong>服务器推送 (sever push)</strong>：将所有工作交给服务器，服务器不断运行与动态文档相关应用程序并定期更新发送。<ul><li>服务器开销过大。</li><li>要求 TCP 保持连接，TCP 连接数目增加导致平均带宽下降，时延增大。</li></ul></li><li><strong>活动文档 (active document)</strong>：把所有工作转移给浏览器端。传送角度看，浏览器和服务器都将活动文档看成静态文档。</li></ul><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123175807768.png" alt="" /><figcaption>image-20231123175807768</figcaption></figure><p>​ Java 技术是用于创建和运行活动文档的技术，是活动文档技术的一部分。</p><h5 id="web-信息检索系统">6.4.5 Web 信息检索系统</h5><p>​ 工具是<strong>搜索引擎 (search engine)</strong>，分两大类，<strong>全文检索</strong>搜索引擎和<strong>分类目录</strong>搜索引擎。</p><p>​ 全文搜索引擎通过搜索软件到互联网上各网站收集信息，建立一个在线索引数据库供用户查询，这种索引数据库必须及时更新以剔除过时信息。全文检索可以检索出大量信息，但缺点是结果不够准确。</p><p>​ 分类搜索引擎并不采集任何信息，而是用个网站向搜索引擎提交网站信息时填写的关键词和网站描述等信息，经审核后输入到分类目录数据库中，供用户查询。查询时无需使用关键词，只需按照分类，因而查询准确性较好。</p><p>​ 目前出现了<strong>垂直搜索引擎</strong>，在关键词检索基础上限制搜索领域，返回结果更倾向于信息、消息、条目等。</p><p>​ 还有<strong>元搜索引擎</strong>，将用户提交的检索发送到多个独立的搜索引擎上，处理结果并返回，重在提高搜索速度、智能化搜索结果、个性化搜索。查全率和准确率都较高。</p><p>​ Google 搜索软件同时进行许多运算，核心技术是 <strong>PageRank</strong>，即<strong>网页排名</strong>。PageRank 对链接数目进行加权统计。Larry Page 和 Sergey Brin 两人利用稀疏矩阵技巧，大大简化了计算量。</p><h5 id="博客和微博">6.4.6 博客和微博</h5><p>​ blog 使得网民不仅是互联网内容的消费者，亦是<strong>生产者</strong>。</p><p>​ 微博是一种互动及传播极快的工具，实时性、现场感和快捷性往往超过所有媒体。</p><h4 id="电子邮件">6.5 电子邮件</h4><h5 id="概述-2">6.5.1 概述</h5><p>​ 电子邮件两个重要标准：<strong>简单邮件传送协议 SMTP (Simple Mail Transfer Protocol)</strong> 和<strong>互联网文本报文格式</strong>。</p><p>​ SMTP 只能传送可打印的 7 位 ASCII 邮件，因此后来又提出<strong>通用互联网邮件扩充 MIME (Multipurpose Internet Mail Extensions)</strong>，可同时传送多种类型数据，数据类型于首部说明。</p><p>​ 一个电子邮件系统应有三个主要组成构件：<strong>用户代理、邮件服务器、邮件发送协议（如 SMTP）和邮件读取协议（如 POP3）</strong></p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123182738670.png" alt="" /><figcaption>image-20231123182738670</figcaption></figure><p>​ <strong>用户代理 UA (User Agent)</strong> 是用户与电子邮件系统的接口，又称为<strong>电子邮件客户端软件</strong>，如 Microsoft Outlook 和张小龙的 Foxmail。</p><p>​ 一个 UA 至少应当具有如下四个功能：</p><ul><li>撰写。</li><li>显示。</li><li>处理，包括发送邮件和接收邮件。</li><li>通信。</li></ul><p>​ 互联网上有许多<strong>邮件服务器</strong>，功能是发送和接收邮件并向发件人报告邮件传送结果，使用两种不同的协议，一种用于 UA 向服务器发送邮件或在服务器间发送邮件，如 SMTP；另一种用于 UA 从服务器读取邮件，如 POP3。</p><p>​ SMTP 和 POP3 都是用 TCP 连接来传送邮件的，使用 TCP 是为了保证可靠性。邮件由发送方服务器与接收方服务器间建立 TCP 连接进行传输，<strong>不会在任何中间邮件服务器落地</strong>。</p><p>​ 整个发送过程有两种不同通信方式，一是<strong>推 (push)</strong>，用于 SMTP 客户将邮件推给 SMTP 服务器；一是<strong>拉 (pull)</strong>，POP3 客户将邮件从 POP3 服务器拉过来。来件暂时存储在用户邮件服务器中，方便时便从服务器中读取来信。</p><p>​ TCP/IP 体系电子邮件系统规定<strong>电子邮件地址 (e-mail address)</strong> 格式如下： <span class="math display">\[username@邮件服务器域名\]</span></p><h5 id="smtp">6.5.2 SMTP</h5><p>​ SMTP 分连接建立、邮件传送、连接释放三部分，TCP 连接总是在通讯双方 SMTP 服务器直接建立，且 SMTP 传输的是明文，不利于保密。后来对 SMTP 进行扩充，称为 ESMTP。客户端发送报文时改用发送 EHLO 报文，若被拒绝则表明对方仍是一个标准的 SMTP 邮件服务器，不支持扩展，就采用原来的参数进行 SMTP 传输。</p><h5 id="电子邮件的格式">6.5.3 电子邮件的格式</h5><p>​ 首部包含一些关键字，最重要的是 To 和 Subject（<strong>主题</strong>），还有一项是<strong>抄送</strong>，表明给某某人发送一个副本。某些系统允许用户使用<strong>盲复写副本 Bcc (Blind carbon copy)</strong>，又称<strong>暗送</strong>，使发件人能将副本送与某人，但不希望为收件人知道。</p><h5 id="邮件读取协议-pop3-和-imap">6.5.4 邮件读取协议 POP3 和 IMAP</h5><p>​ 用户从 POP3 服务器读取了邮件，邮件即从服务器删除。容易猜到会有很多不必要的麻烦，因此 POP3 进行了些功能扩充，包括允许用户设置邮件读取后仍在 POP3 服务器中存放的时间。</p><p>​ IMAP 是一个联机协议，用户打开 IMAP 服务器的邮箱时，可以看到邮件首部。若需要打开某个邮件，则该邮件才传送到计算机上。缺点是如果用户没有将邮件复制到计算机上，则邮件一直存放在 IMAP 服务器中，需上网才能查看邮件。</p><h5 id="基于-web-的电子邮件">6.5.5 基于 Web 的电子邮件</h5><p>​ 打开浏览器后即可方便地收发邮件。</p><p>​ 浏览器和邮件服务器间传输用 HTTP 协议，但邮件服务器间仍采用 SMTP 协议。</p><h5 id="通用互联网邮件扩充-mime">6.5.6 通用互联网邮件扩充 MIME</h5><p>​ SMTP 有如下缺点：</p><ul><li>不能传送可执行文件或其它二进制文件。</li><li>限于传输 7 位 ASCII 码。</li><li>SMTP 服务器会拒收超过一定长度的邮件。</li><li>某些 SMTP 实现并未完全按照 SMTP 互联网标准。</li></ul><p>​ 于是提出<strong>通用互联网邮件扩充 MIME</strong>，继续用原来的邮件格式，但增加邮件主体结构，定义传送非 ASCII 编码规则。主要包括三部分：</p><ul><li>5 个新的首部，可包含在原来的首部中，提供了有关邮件主体信息。</li><li>定义了许多邮件内容格式，对多媒体电子邮件表示方法进行格式化。</li><li>定义传送编码，可对任何内容格式转换。</li></ul><p>​ 内容传送编码：</p><ul><li>最简单的是 7 位 ASCII，每行不能超过 1000 字符。</li><li>quoted-printable，适用于存在少量非 ASCII 码的数据，除特殊字符 '=' 之外，都不改变。'=' 和不可打印的 ASCII 以及非 ASCII 编码：二进制代码用两个十六进制数表示，然后在前加上一个等号 '='。'=' 的 quoted-printable 编码是 "=3D"。</li><li>base64 编码，可用于任意二进制文件。先将二进制代码划分为一个个 24 位单元，每个单元分为 4 个 6 位组，每个 6 位组按如下方法转化为 ASCII：0 到 63 的表示：先是 'A' 到 'Z' 26 个大写字母，再是 'a' 到 'z' 26 个小写字母，再是 '0' 到 '9' 10个数字，最后是 '+' 和 '/'。然后用 ASCII 码发送。 24 位的代码编码后变成了 32 位，开销为 25%。</li></ul><h4 id="动态主机配置协议-dhcp">6.6 动态主机配置协议 DHCP</h4><p>​ 在协议软件中给参数赋值的动作叫<strong>协议配置</strong>。连接到互联网的计算机的协议软件需要配置的项目包括：</p><ul><li>IP地址；</li><li>子网掩码；</li><li>默认路由 IP 地址；</li><li>域名服务器 IP 地址。</li></ul><p>​ 用人工进行协议配置很不方便，且易出错，应当采用自动配置方法。现在广泛使用的是<strong>动态主机配置协议 DHCP (Dynamic Host Configuration Protocol)</strong>，提供机制<strong>即插即用联网</strong>，允许计算机加入新的网络获取 IP 地址而不用手工参与。</p><p>​ DHCP 给运行服务器软件而位置固定的计算机指派一个永久地址，重启时地址不变。</p><p>​ DHCP 采用客户服务器方式。需要 IP 地址的计算机启动时就向 DHCP 广播<strong>发现报文 (DHCPDISCOVER)</strong>（目的 IP 地址全置为 1），DHCP 服务器回答报文称为<strong>提供报文 (DHCPOFFER)</strong>，先从数据库中查找配置信息，若找到则返回，找不到则从 IP 地址池中取出一个分配之。</p><p>​ 每个网络至少有一个 DHCP <strong>中继代理 (relay agent)</strong>，收到主机 A 的广播发现报文后，就<strong>单播</strong>向 DHCP 服务器转发报文，收到服务器回答报文后转发给 A。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231123194215241.png" alt="" /><figcaption>image-20231123194215241</figcaption></figure><p>​ DHCP 客户只能在一段有限时间内使用分配到的 IP，称为<strong>租用期 (lease period)</strong>。DHCP 客户使用的端口号为 68，服务器用的 UDP 端口是 67。</p><ul><li>租用期过了一半，DHCP 发送请求报文请求更新租用期。</li><li>若服务器同意，则发回确认报文。更新计时器。</li><li>不同意，则发回否认报文。客户必须重新申请 IP 地址。</li><li>提前终止租用期，发送释放报文即可。</li></ul><h4 id="简单网络管理协议-snmp">6.7 简单网络管理协议 SNMP</h4><h5 id="基本概念">6.7.1 基本概念</h5><p>​ 网络管理包括对硬件、软件和人力的使用、综合与协调，以便对网络资源进行监视、测试、配置、分析、评价和控制，以合理的价格满足网络的一些需求，如实时运行性能、服务质量等。</p><p>​ <strong>管理站</strong>又称管理器，是整个网络管理系统的核心，通常是个有着良好图形界面的高性能工作站，并由网络管理员直接操作和控制。</p><p>​ 管理站所在部门常称为<strong>网络运行中心 NOC (Network Operations Center)</strong>，管理站中关键构件是<strong>管理程序</strong>，管理站（硬件）或管理程序（软件）均可称为<strong>管理者 (manager)</strong> 或管理器，网络管理员 (administrator) 才是指人。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231124091630752.png" alt="" /><figcaption>image-20231124091630752</figcaption></figure><p>​ 被管网络中有很多<strong>被管设备</strong>，可以是主机、路由器、打印机、集线器、网桥或网络解调器等。被管设备有时可称<strong>网络元素</strong>或<strong>网元</strong>。每个被管设备都要运行一个程序以便和管理站中的管理程序通信，这些程序称为<strong>网络管理代理程序</strong>或简称<strong>代理 (agent)</strong>。</p><p>​ <strong>简单网络管理协议 SNMP (Simple Network Management Protocol)</strong> 中的管理程序和代理按客户服务器方式工作。管理程序运行 SNMP 客户程序，代理运行 SNMP 服务器程序。被管对象 SNMP 服务器不断监听来自管理站 SNMP 客户的请求，一旦发现就立刻返回i信息或执行某个动作。</p><p>​ 网络管理基本原理：<strong>若要管理某个对象，必然会给该对象添加一些硬件或软件，但这种“添加”对原有对象影响必须小些。</strong></p><p>​ 若网元使用的不是 SNMP 而是另一种网管协议，可使用<strong>委托代理 (proxy agent)</strong> 实现如协议转换和过滤操作等功能对被管对象进行管理。</p><p>​ 下将详细介绍 SMI、MIB 和 SNMP。</p><p>​ SMI 建立规则，MIB 对变量进行说明， SNMP 完成网管的动作。</p><h5 id="管理信息结构-smi">6.7.2 管理信息结构 SMI</h5><p>​ SMI 有三个任务：</p><ul><li>被管对象怎么命名；</li><li>被管对象的数据类型；</li><li>被管对象如何编码。</li></ul><h6 id="被管对象的命名">6.7.2.1 被管对象的命名</h6><p>​ 采用<strong>对象命名树 (object naming tree)</strong>，根无名。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231124092730981.png" alt="" /><figcaption>image-20231124092730981</figcaption></figure><h6 id="被管对象的数据类型">6.7.2.2 被管对象的数据类型</h6><p>​ SMI 使用基本抽象语法记法 1 (ASN.1) 来定义数据类型，也增加了一些新的定义。SMI 把数据类型分为两大类：<strong>简单类型</strong>和<strong>结构化</strong>类型。</p><p>​ 两种结构化类型 sequence 和 sequence of，前者类似于 C 语言的 struct，后者类似于 C 语言的 array。</p><h6 id="编码方法">6.7.2.3 编码方法</h6><p>​ SMI 使用 ASN.1 制定的<strong>基本编码规则 BER (Basic Encoding Rule)</strong> 进行编码。把所有数据元素表示为 T-L-V 三个字段，T (Tag) 定义类型，L (Length) 定义 V 字段长度，V (Value) 定义字段的值。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231124093746676.png" alt="" /><figcaption>image-20231124093746676</figcaption></figure><p>​ T 字段又称为<strong>标记字段</strong>，分为如下三个子字段：</p><ul><li><strong>类别（2 位）</strong>：通用类 (00)，应用类 (01)，上下文类 (10)，专用类 (11)。</li><li>格式（1 位）：简单数据类型 (0)，结构化数据类型 (1)。</li><li>编号（5 位）：用以标志不同数据类型。</li></ul><h5 id="信息管理库-mib">6.7.3 信息管理库 MIB</h5><p>​ 管理程序使用 MIB 中信息的<strong>值</strong>对网络进行管理，只有在 MIB 中的对象才是 SNMP 所能管理的。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231124094124719.png" alt="" /><figcaption>image-20231124094124719</figcaption></figure><p>​ MIB 变量只给出了每个数据项的逻辑定义，而一个路由器使用的内部数据结构可能与 MIB 的定义不同。</p><h5 id="snmp-的协议数据单元和报文">6.7.4 SNMP 的协议数据单元和报文</h5><p>​ SNMP 实际上只有两种基本管理功能：</p><ul><li><strong>读</strong>：Get 报文检测被管对象状况。</li><li><strong>写</strong>：Set 报文改变被管对象状况。</li></ul><p>​ SNMP 不是完全的探寻协议，允许不经过询问发送某些信息，这些信息称之为<strong>陷阱 (trap)</strong>，能捕捉事件，但参数受限。仅在严重事件发生时才发送陷阱，且陷阱所需字节数很少。</p><p>​ SNMP 使用无连接的 UDP，开销很小。在运行代理的服务器端使用熟知端口 <strong>161</strong> 接收 Get 或 Set 报文以及发送响应报文，运行管理程序的客户端使用熟知端口 <strong>162</strong> 接收来自各代理的 trap 报文。</p><p>​ SNMP 报文无固定字段，采用 ASN.1 编码。一个 SNMP 报文由四部分组成：<strong>版本、首部、安全参数、数据部分</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231124094913065.png" alt="" /><figcaption>image-20231124094913065</figcaption></figure><h4 id="p2p">6.9 P2P</h4><p>​ 目前互联网流量中，P2P 文件分发已经占据最大份额。</p><h5 id="集中目录服务器的-p2p-初代-p2p-napster">6.9.1 集中目录服务器的 P2P —— 初代 P2P Napster</h5><p>​ 使用 Napster 可通过互联网免费下载各种 MP3 音乐，运行 Napster 的所有用户，都必须及时向 Napster 的目录服务器报告自己已经存有哪些音乐文件。当用户需要时，便向服务器发出查询，服务器返回存有这一文件的计算机 IP 地址。</p><h5 id="分布式结构的-p2p-文件共享程序">6.9.2 分布式结构的 P2P 文件共享程序</h5><p>​ 二代 P2P Gnutella 使用洪泛法在大量 Gnutella 用户间进行查询。其使用了一种<strong>有限范围的洪泛查询</strong>。</p><p>​ 下介绍更后来的技术——比特洪流 BT (Bit Torrent)。BT 把参与某个文件分发的所有对等方称之为一个<strong>洪流 (torrent)</strong>，对等方下载文件的数据单元称为<strong>文件块 (block)</strong>。</p><p>​ 每个洪流有一个基础设施节点称<strong>追踪器 (tracker)</strong>，一个对等放方加入洪流时必须<strong>登记</strong>（或称<strong>注册</strong>），并周期性通知其仍处于洪流中。</p><p>​ 一个洪流中，文件的需求方和提供方之间通过建立 TCP 连接传输文件块。当一个对等方 A 加入洪流时，追踪器为其指派若干个<strong>相邻对等方</strong>，A 通过 TCP 连接周期性向相邻对等方索取它们拥有的文件块列表。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231124100046577.png" alt="" /><figcaption>image-20231124100046577</figcaption></figure><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231124100053260.png" alt="" /><figcaption>image-20231124100053260</figcaption></figure><p>​ A 必须抉择的是：哪些文件块需要向相邻对等放请求？在众多请求中，应向哪些相邻对等放发送所请求的文件块？</p><p>​ 对于前者，A 采用<strong>最稀有的优先 (rarest first)</strong> 技术，凡是 A 所缺少而相邻对等方已拥有的块，都应当去索取。</p><p>​ 对于后者，采用算法：凡当前有以最高数据率向 A 传送文件块的某相邻对等方， A 就优先将请求块传送给它。</p><h5 id="在-p2p-对等方中搜索对象">6.9.4 在 P2P 对等方中搜索对象</h5><p>​ 数据库中存储信息仅两个部分：<strong>资源名 K</strong>（又称关键字）、存放该对象的节点的 IP 地址 N（有的 IP 还附有端口号）。</p><p>​ 现在广泛使用的索引和查找技术叫<strong>分布式散列表 DHT (Distributed Hash Table)</strong>，是由大量对等方共同维护的哈希表。基于 DHT 的算法如 Chord，把资源名 K 及 IP 地址 N 分别映射到<strong>资源名标识符 KID</strong> 和<strong>节点标识符 NID</strong>。把结点标识符从小到大沿顺时针排列成一个环形覆盖网络 Chord 环并按规则映射：</p><ul><li>NID 按照标识符值映射到 Chord 环上对应的点。</li><li>KID 按照其标识符值映射到最近的下一个 NID。</li></ul><p>​ 举例说明： K31 和 K2 都放在 N4，表示要找资源 K31 或 K2 的结点的 IP，应当到 N4 去找。即按 K 映射到 KID，从 KID 找到 NID，在 NID 中寻找 IP 地址 N。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231124101342545.png" alt="" /><figcaption>image-20231124101342545</figcaption></figure><p>​ 定位一个资源，平均沿环发送查找报文 N/2 个或遍历所有结点，显然效率很低。</p><p>​ 为加速查找，可以采用倍增算法，每个结点 x 指向 <span class="math inline">\(x+1, x+2, x+4, x+8...\)</span> 的结点，这样当欲定位某个编号的结点时，即可在 log 的开销内查找。举例：</p><p>​ 当前在结点 <span class="math inline">\(1\)</span>，欲定位到结点 <span class="math inline">\(28\)</span>，则 <span class="math inline">\(1 + 16 = 17\)</span>, <span class="math inline">\(17 + 8 = 25\)</span>, <span class="math inline">\(25 + 2 = 27\)</span>, <span class="math inline">\(27 + 1 = 28\)</span>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231124101751582.png" alt="" /><figcaption>image-20231124101751582</figcaption></figure><p>​ P2P 存在一些关键的问题，一是知识产权，二是 P2P 流量管理，处理网上一些灰色资源，三是网络资源占据。</p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谢希仁计算机网络05-运输层</title>
      <link href="/2023/11/22/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C05-%E8%BF%90%E8%BE%93%E5%B1%82/"/>
      <url>/2023/11/22/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C05-%E8%BF%90%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="运输层概述">5.1 运输层概述</h3><h5 id="基础知识补充">5.1.1 基础知识补充</h5><p>​ 从 IP 层来说，通讯主体是两台主机。但从运输层的视角来看，真正进行通信的实体一台主机中的一个<strong>进程</strong>与另一台主机一个的<strong>进程</strong>。</p><p>​ 因此，运输层有一个比较重要的功能——<strong>复用 (multiplexing) </strong>和<strong>分用 (demultiplexing)</strong>。复用是指发送端不同应用程序可以使用同一个运输层传输协议。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231121160059831.png" alt="" /><figcaption>image-20231121160059831</figcaption></figure><p>​ 由图观之，网络层为主机之间提供逻辑通信，而运输层为进程之间提供逻辑通信。</p><h5 id="运输层的端口">5.1.2 运输层的端口</h5><p>​ 单个计算机用的是进程标识符，但由于计算机操作系统种类很多，因此使用该种进程标识符来表示进程并不合适。</p><p>​ 此外，由于进程创建撤销均是动态的，通信一方几乎无法识别对方机器上的进程，因而将特定进程指名为终点是不可行的。</p><p>​ 解决方案是运输层采用<strong>协议端口号 (protocol port number)</strong>，或简称为<strong>端口 (port)</strong>。这种抽象的协议端口是<strong>软件端口</strong>。端口号只具有<strong>本地意义</strong>，只是为了标志<strong>本计算机</strong>应用层中的各个进程在运输层交互时的层间接口。不同计算机相同端口号是<strong>没有关联</strong>的。</p><p>​ 运输层端口号分为两大类：</p><ul><li><strong>服务器端使用的端口号</strong>：又分为两种<ul><li>熟知端口号：又称<strong>系统端口号</strong>。</li><li>系统端口号：又称<strong>短暂端口号</strong>，通信结束就回收可给其它进程使用。</li></ul></li></ul><h5 id="运输层两个协议">5.1.3 运输层两个协议</h5><p>​ <strong>用户数据报协议 UDP (User Datagram Protocol)</strong>：传输前无需建立连接，不提供可靠交付，且较为简单。</p><p>​ <strong>传输控制协议 TCP (Transmission Control Protocol)</strong>：提供<strong>面向连接</strong>的服务，但不提供广播或多播服务，较为复杂。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231121162255202.png" alt="" /><figcaption>image-20231121162255202</figcaption></figure><p>​ 接下来将详细阐述两个协议的内容及要点。</p><h4 id="用户数据报协议-udp">5.2 用户数据报协议 UDP</h4><p>​ UDP 有主要特点如：</p><ul><li>UDP 是无连接的。</li><li>UDP 使用尽最大努力的交付。</li><li>UDP 是面向报文的。直接将来自应用程序的报文添加首部后即交付 IP 层，因此报文大小的缺点需由应用程序负责。</li><li>UDP 无拥塞控制。</li><li>UDP 支持<strong>一对一</strong>、<strong>一对多</strong>、<strong>多对一</strong>和<strong>多对多</strong>交互通信。</li><li>UDP 首部开销小，止 8 字节。</li></ul><p>​ 首部格式如图：</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231121162325100.png" alt="" /><figcaption>image-20231121162325100</figcaption></figure><p>​ 若接收方发现收到端口号不正确，则丢弃并由网际控制报文协议 ICMP 发送”端口不可达“差错报文。</p><p>​ ”伪首部“的出现是为了计算检验和，在实际传输中并不存在。检验和为 UDP 数据报每一个 16 位字之和的反码，到接收端再与每一 16 位字相加，最终结果为全 1 即无差错。</p><h4 id="传输控制协议-tcp-概述">5.3 传输控制协议 TCP 概述</h4><h5 id="tcp-协议主要特点">5.3.1 TCP 协议主要特点</h5><ol type="1"><li><strong>面向连接</strong>，使用前建立连接，使用后释放连接。</li><li>只能是<strong>点对点</strong>的通信。</li><li>提供<strong>可靠交付</strong>，无差错，不丢失，不重复，且按序到达。</li><li>提供<strong>全双工通信</strong>。</li><li>面向<strong>字节流</strong>。流是指<strong>流入到进程或从进程流出的字节序列</strong>。</li></ol><h5 id="tcp-的连接">5.3.2 TCP 的连接</h5><p>​ TCP 连接的端点叫<strong>套接字 (socket)</strong> 或<strong>插口</strong>，我们由： <span class="math display">\[socket = (IP:port)\\TCP\ link::=\{socket1,socket_2\}=\{(IP_1:port_1),(IP_2:port_2)\}\]</span></p><h4 id="可靠传输工作原理">5.4 可靠传输工作原理</h4><p>​ 理想传输条件两大特点：</p><ul><li>传输信道不产生差错。</li><li>不论发送端以多快速度发送数据，接收端总来得及处理收到数据。</li></ul><h5 id="停止等待协议">5.4.1 停止等待协议</h5><p>​ 假定 A 与 B 之间进行通讯。</p><h6 id="无差错情况">5.4.1.1 无差错情况</h6><p>​ 无差错时，A 发予 B 一个分组，B 接受后对 A 发送该分组的确认，A 收到确认后继续发送下一分组，如此往复。</p><h6 id="出现差错">5.4.1.2 出现差错</h6><p>​ B 接受到分组时除了差错并丢弃，或是分组在传输中丢失，B 都不会发送任何消息。A 过了一段时间没收到确认，就执行<strong>超时重传</strong>。为实现超时重传，每发送一个分组设置一个<strong>超时计时器</strong>。若计时器到期前收到确认，则撤销计时器。</p><ul><li>A 发送完分组必须保存副本以备重传。</li><li>分组与确认分组必须<strong>编号</strong>。</li><li>重传时间应稍大于平均往返时间，提升效率节省资源。</li></ul><h6 id="确认丢失与确认迟到">5.4.1.3 确认丢失与确认迟到</h6><p>​ 倘如 B 接收到分组 <span class="math inline">\(M_1\)</span>，但发回 A 的确认丢失，A 执行重传，B 又收到了相同的分组，此时应作两个动作：</p><ul><li><strong>丢弃重复分组。</strong></li><li><strong>向 A 发送确认。</strong></li></ul><p>​ 这种可靠传输协议通常称<strong>自动重传请求 ARQ (Automatic Repeat reQuest)</strong>。</p><p>​ 重传协议的优点是简单，但缺点是信道利用率低。 <span class="math display">\[U = \frac{T_D}{T_D+RTT+T_A}\]</span> <img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231121184735026.png" alt="image-20231121184735026" /></p><p>​ 为了提高传输效率，我们采用<strong>流水线传输</strong>。为此引出下面一堆芝士。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231121184822027.png" alt="" /><figcaption>image-20231121184822027</figcaption></figure><h5 id="连续-arq-协议">5.4.2 连续 ARQ 协议</h5><p>​ 核心概念是<strong>窗口</strong>，窗口大小设定为 size。</p><p>每次，发送端将窗口内连续的分组全部发送出去，接收端采用<strong>累计确认</strong>方式，对按序到达的最后一个分组发送确认。发送端每收到一个确认，就进行调整把滑动窗口前移。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231121184940413.png" alt="" /><figcaption>image-20231121184940413</figcaption></figure><h4 id="tcp-报文段首部格式">5.5 TCP 报文段首部格式</h4><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231121185758124.png" alt="" /><figcaption>image-20231121185758124</figcaption></figure><ul><li><strong>确认号</strong>：期望收到下一个报文段的第一个数据字节的序号。</li></ul><blockquote><p>若确认号 = N，则表明：到序号 N-1 为止所有的数据都已经收到。</p></blockquote><ul><li><strong>紧急 URG (URGent)</strong>：置为 1 时，紧急指针字段有效，应尽快传送。</li><li><strong>确认 ACK (ACKnowledgment)</strong>：置为 1 时确认号才有效。TCP 规定建立连接后所有报文段 ACK 都必须置为 1。</li><li><strong>同步 SYN (SYNchronization)</strong>：置为 1 表示是一个连接请求或连接接受报文。</li><li><strong>窗口</strong>：接收方让发送方设置其发送窗口的依据。窗口字段指出了现在允许对方发送的数据量。窗口值经常动态变化着。</li><li><strong>紧急指针</strong>：指出紧急数据字节数。</li><li>选项<ul><li>TCP 最初只规定一种选项，<strong>最大报文长度 MSS (Maximum Segment Size)</strong>，指的是每一个 TCP 报文段<strong>数据字段最大长度</strong>，默认值为 536 字节。</li><li>后续增加<strong>窗口扩大</strong>选项，TCP 首部窗口是 16 位，窗口扩大选项占 3 字节，其中一个字节表示移位值 S，位数从 16 增大到 (16 + S)，且 S 最大值为 14。无需扩大时，可以发送 S = 0 的选项。</li><li><strong>时间戳</strong>，一是用于计算往返时间 RTT，二是处理 TCP 序号溢出的情况。</li></ul></li></ul><h4 id="tcp-可靠传输的实现">5.6 TCP 可靠传输的实现</h4><h5 id="补充">5.6.1 补充</h5><p>​ TCP 滑动窗口也有可能后缩，但 TCP 标准<strong>墙裂不推荐这么做</strong>。重传机制已如上讲述。</p><p>​ 发送缓存暂时存放：</p><ul><li>发送程序传送给发送方 TCP 准备发送的数据；</li><li>TCP 已发送但未收到确认的数据。</li></ul><p>​ 接收缓存暂时存放：</p><ul><li>按序到达但尚未被接收程序读取的数据；</li><li>未按序到达的数据。</li></ul><p>​ 对于未按序到达的数据，TCP 标注并无明确规定如何处理。一般是待缺失的数据流收到后，再按序交付上层。</p><h5 id="超时重传时间的选择">5.6.2 超时重传时间的选择</h5><p>​ 采用自适应算法。<strong>RTT：往返时间。RTO：超时重传时间</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231121192544945.png" alt="" /><figcaption>image-20231121192544945</figcaption></figure><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231229104747507.png" alt="" /><figcaption>image-20231229104747507</figcaption></figure><p>​ <strong>Karn 算法及修正</strong>：计算加权 RTTS 时，不考虑重传段。每重传一次，将 RTO 加倍。</p><h4 id="tcp-流量控制">5.7 TCP 流量控制</h4><p>​ 流量控制就是<strong>让发送方发送速率不要太快，让接收方来得及接收</strong>。</p><p>​ 发送方的窗口不能超过接收方给出的接收窗口的数值。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231121194421960.png" alt="" /><figcaption>image-20231121194421960</figcaption></figure><p>​ 若 B 向 A 发送零窗口后， 又有了存储空间，继续发送 rwnd = 400 的报文段，却于传输途中丢失，A 一直等待 B 的通知，而 B 也一直等待 A 的报文段，若没有其它措施，死锁局面将一直持续下去。为此，TCP 为每个连接设有一个<strong>持续计时器 (persistence timer)</strong>。只要一方收到对方零窗口通知则启动计时器，时间到期则发送零窗口<strong>探测报文段（仅携带 1 字节数据）</strong>。若窗口值确实为 0，就重置，否则死锁局面被打破。</p><p>​ TCP 的实现广泛使用 Nagle 算法：若进程把数据逐字节发送到 TCP 缓存，则发送方把第一个数据字节先发送出去，把后面到达的全部缓存。当收到第一个数据字符确认后，再把缓存中所有数据组装成一个报文发送出去，对随后到达的数据缓存。仅当收到前一个段的确认后才发送下一个段。当到达数据已经到达发送窗口大小一般或最大报文长度，就立即发送。 这种算法可以有效提高网络吞吐量。</p><p>​ <strong>窗口糊涂综合征：</strong>TCP 接收方缓存已满，而交互式应用进程每次只从接收缓存中读取 1 字节。接收方发回确认，将窗口置位 1 字节。如此下去，效率很低。为解决此问题，可以让接收方等待一段时间，待缓存能容纳一个最长报文段或有一半闲余空间，发出确认报文，并通知当前窗口大小。</p><h4 id="tcp-拥塞控制">5.8 TCP 拥塞控制</h4><h5 id="拥塞控制一般原理">5.8.1 拥塞控制一般原理</h5><p><span class="math display">\[\sum对资源需求&gt;可用资源\]</span></p><p>​ 拥塞控制即<strong>防止过多数据注入到网络中，可以使网络中路由器或链路不至过载</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231121202516053.png" alt="" /><figcaption>image-20231121202516053</figcaption></figure><p>​ 拥塞控制分为<strong>开环控制</strong>与<strong>闭环控制</strong>两种。开环控制是在设计网络时事先将有关发生拥塞的因素考虑到，但系统运行后就不做改变了。</p><p>​ 闭环控制基于环路反馈，有如下措施：</p><ul><li>检测网络系统以定位拥塞。</li><li>将拥塞信息传送到可采取行动的地方。</li><li>调整网络系统运行以解决问题。</li></ul><h5 id="拥塞控制方法">5.8.2 拥塞控制方法</h5><p>​ <strong>慢开始</strong>、<strong>拥塞避免</strong>、<strong>快重传</strong>、<strong>快恢复</strong>四种算法。</p><ul><li>慢开始：发送方维护一个<strong>拥塞窗口 cwnd (congestion winodw)</strong> 变量，发送时<strong>发送窗口等于拥塞窗口</strong>。以超时为依据判断网络拥塞，自小到大采用倍增增大拥塞窗口。</li></ul><p><span class="math display">\[\Delta cwnd =min(N,SMSS)\]</span></p><p>​ 用报文段个数作为窗口大小单位，每经过一个传输轮次，cwnd 加倍。SMSS (Sender Maximum Segment Size) 是指发送方的最大报文段。</p><ul><li>拥塞避免算法：每经过一个 RTT 就让 cwnd 加 1，呈线性缓慢增长。</li></ul><p>​ 实际操作中，慢开始和拥塞避免是配合使用的。设定一个 ssthresh 值，cwnd 小于该值，用慢启动；cwnd 大于该值，用拥塞避免；等于二者均可。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231121203427954.png" alt="" /><figcaption>image-20231121203427954</figcaption></figure><p>​ 超时则门限值置为当前 cwnd 的一半。当 B 端收到无序帧时，仍然发送对最前端已确认帧的确认，当 A 端收到一连三个确认帧，即可视为发生了数据丢失。</p><p>​ <strong>快恢复算法</strong>：发送端得知丢失个别报文段，便不进行慢启动，二是置拥塞窗口 sstresh = cwnd = cwnd / 2，并执行拥塞避免算法。</p><p>​ 拥塞避免阶段窗口线性增大，称为<strong>加法增大 AI (Additive Increase)</strong>。出现拥塞将门限值调整为原来一半，称为<strong>乘法减小 MD (Multiplicative Decrease)</strong>。二者结合即 AIMD 算法。</p><p>​ 同时发送窗口不得超过接收端窗口上限 rwnd。故有： <span class="math display">\[发送窗口上限 = min[rwnd,cwnd]\]</span></p><h5 id="主动队列管理-aqm">5.8.3 主动队列管理 AQM</h5><p>​ 路由器队列管理通常按照<strong>先进先出 FIFO</strong> 规则处理到来数据，当队列满时丢弃后续到达所有分组，称为<strong>尾部丢弃策略</strong>。但这种做法会导致短时间内大量连接同时进入满开始阶段，称为<strong>全局同步 (global syncronization)</strong>。</p><p>​ 为避免这种情况。出现了<strong>主动队列管理 AQM (Active Queue Management)</strong>，当队列长度达到某个警惕值时丢弃到达分组。曾流行的实现方法是<strong>随即早期检测 RED (Random Early Detection)</strong>，描述如下：</p><ul><li>若平均队列长小于最小门限，则将新分组加入队列。</li><li>若超过最大门限，则丢弃新分组。</li><li>若介于二者之间，则按某一丢弃概率 p 将新分组丢弃。</li></ul><h4 id="tcp-运输连接管理">5.9 TCP 运输连接管理</h4><p>​ 主动发起连接的进程称为<strong>客户 (client)</strong>，被动等待连接的进程称为<strong>服务器 (sever)</strong>。</p><h5 id="tcp-连接的建立">5.9.1 TCP 连接的建立</h5><p>​ 三次握手协议：（来自亲爱的 ChatGPT）</p><ul><li><strong>第一步 - 客户端发送连接请求：</strong><ul><li>客户端首先向服务器发送一个TCP报文，标志位中设置了SYN（同步）标志，并选择一个初始序列号（Initial Sequence Number）。</li><li>这个报文包含了客户端的一些连接参数，如MSS（Maximum Segment Size），表示客户端能够接受的最大报文段大小。</li></ul></li><li><strong>第二步 - 服务器确认请求并发送自己的连接请求：</strong><ul><li>服务器接收到客户端的SYN报文后，会回复一个确认报文，其中设置了SYN和ACK（确认）标志。</li><li>服务器也会选择一个自己的初始序列号，并在确认中包含自己的一些连接参数，如MSS。</li></ul></li><li><strong>第三步 - 客户端确认服务器的连接请求：</strong><ul><li>客户端接收到服务器的确认后，会向服务器发送一个确认报文，其中设置了ACK标志。</li><li>这个确认报文不包含SYN标志，因为连接已经建立。</li><li>服务器收到这个确认后，连接建立完成。</li></ul></li></ul><h5 id="tcp-连接释放">5.9.2 TCP 连接释放</h5><ol type="1"><li>A 的进程线向其 TCP 发出连接释放报文段，并停止发送数据，主动关闭 TCP 连接。FIN 报文消耗一个序号，即使不携带数据。</li><li>B 收到报文段后立即发出确认，确认号 ack = u + 1，从 A 到 B 的连接即释放了，但从 B 到 A 的连接仍未释放，TCP 处于<strong>半关闭</strong>状态。</li><li>若 B 依据没有要向 A 发送数据，则发出释放报文，假定序号为 w。A 收到后，必须发出确认，ack = w + 1，序号为 seq = u + 1，经过<strong>等待计时器</strong>设置的时间 2MSL 后， A 进入 CLOSED 状态。，MSL 是<strong>最长报文段寿命</strong>。</li></ol><p>​ 此外，TCP 设有一个<strong>保活计时器</strong>，每个一段时间发送探测字段，若一连几个都收不到回应，则关闭连接。</p><h5 id="tcp-有限状态机">5.9.3 TCP 有限状态机</h5><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231122081330855.png" alt="" /><figcaption>image-20231122081330855</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谢希仁计算机网络04-网络层</title>
      <link href="/2023/11/20/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C04-%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2023/11/20/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C04-%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h4 id="网络层提供的两种服务">4.1 网络层提供的两种服务</h4><p>​ 电信网采用<strong>面向连接</strong>的通信方式，并在此基础上使用可靠传输协议，当有通信需求时，双方建立<strong>虚电路</strong>进行实时通讯，通讯结束后释放通讯资源。由于终端电话机结构简单，无处理差错能力，因此此方案对电话业务来说是十分合适的。</p><p>​ 但计算机网络的终端具有很强的处理差错能力，因此网络层的设计思路为：<strong>网络层向上只提供简单灵活的、无连接、尽最大努力的数据报服务</strong>。<strong>网络层不提供服务质量的承诺</strong>，可靠传输由网络主机中的运输层保障。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118144200510.png" alt="" /><figcaption>image-20231118144200510</figcaption></figure><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118163954841.png" alt="" /><figcaption>image-20231118163954841</figcaption></figure><h4 id="网际协议-ip">4.2 网际协议 IP</h4><p>​ 与 IP 协议配套的三个协议：</p><ul><li><strong>地址解析协议 ARP (Address Resolution Protocol)</strong></li><li><strong>网际控制报文协议 ICMP (Internet Control Message Protocol)</strong></li><li><strong>网际组管理协议 IGMP (Internet Group Management Protocol)</strong></li></ul><p>​ 三协议关系如下：</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118164422575.png" alt="" /><figcaption>image-20231118164422575</figcaption></figure><p>​ TCP/IP 协议中的网络层常常被称为<strong>网际层</strong>或 <strong>IP 层</strong>。</p><h5 id="虚拟互联网络">4.2.1 虚拟互联网络</h5><p>​ <strong>没有一种单一的网络能够适应所有用户的需求</strong>。将网络连接起来需要一些不同的中间设备，一般有如下四种：</p><ul><li>物理层：<strong>转发器 (repeater)</strong></li><li>数据链路层：<strong>网桥</strong>或<strong>桥接器 (bridge)</strong></li><li>网络层：<strong>路由器</strong></li><li>网络层以上：<strong>网关 (gateway)</strong></li></ul><p>​ 由于历史原因，许多 TCP/IP 的文献曾把网络层使用的路由器称为网关。</p><p>​ 参与互连的计算机网络都是用相同的网际协议 IP，因此可以看作一个大的虚拟互连网络。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118170200174.png" alt="" /><figcaption>image-20231118170200174</figcaption></figure><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118181737412.png" alt="" /><figcaption>image-20231118181737412</figcaption></figure><h5 id="分类的-ip-地址">4.2.2 分类的 IP 地址</h5><p><span class="math display">\[IP地址 ::=\{&lt;网络号&gt;,&lt;主机号&gt;\}\]</span></p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118181859665.png" alt="" /><figcaption>image-20231118181859665</figcaption></figure><p>​ 其中 D 类地址用于<strong>多播</strong>。</p><p>​ <strong>点分十进制表示法</strong>：32 位 IPv4 地址，八位一段点分隔，每段十进制表示。</p><p>​ 常用的三种类别 IP 地址</p><ul><li>A 类地址：<ul><li>网络号占一个字节，第一位固定为 0，共 126 (<span class="math inline">\(2^7-2\)</span>) 个可分配，全 0 表示 "this"，意为“本网络”， 127 (01111111) 保留作为本地软件<strong>环回测试</strong>本主机进程之间通信之用。</li><li>主机号占三个字节，因此一个 A 类网络号最大主机数为 <span class="math inline">\(2^{24}-2\)</span> 。全 0 表示本主机连接到的单个网络地址，全 1 表示该网络上的所有主机。</li></ul></li><li>B 类地址：<ul><li>网络号占两个字节，前两位固定为 10，共 <span class="math inline">\(2^{14}-1\)</span> 个可分配，128.0.0.0不指派。最大主机数 65534，扣除全 0 和全 1。</li></ul></li><li>C类地址：<ul><li>网络号占三个字节，前三位固定 110，192.0.0.0 不指派，因此 <span class="math inline">\(2^{21}-1\)</span> 个网络号。每个 C 类地址最大主机数 254。</li></ul></li></ul><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118183641070.png" alt="" /><figcaption>image-20231118183641070</figcaption></figure><p>​ 两个路由器相连，在连线两端的接口处可分配也可不分配 IP 地址。节省资源则不分配，常称为 <strong>无编号网络</strong>或<strong>无名网络</strong>。</p><h5 id="ip-地址与硬件地址">4.2.3 IP 地址与硬件地址</h5><p>​ <strong>物理地址是数据链路层和物理层使用的地址，</strong>而 <strong>IP 地址是网络层和以上各层使用的地址，是一种逻辑地址。</strong></p><p>​ 在通讯过程，数据从高层下到低层，层层封装，然后才到链路上传输。设备在收到 MAC 帧时，根据首部硬件地址决定收下或丢弃。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118184141275.png" alt="" /><figcaption>image-20231118184141275</figcaption></figure><p>​ <strong>IP 层抽象的互联网上只能看到 IP 数据报</strong>。</p><p>​ <strong>虽然 IP 数据报有源地址，但路由器只根据目的站 IP 地址的网络号进行路由选择</strong>。</p><h5 id="地址解析协议-arp">4.2.4 地址解析协议 ARP</h5><p>​ 知道 IP 地址，找出其相应的硬件地址。ARP 在主机 ARP 高速缓存 (<strong>APR cache</strong>) 中存放一个有<strong>本局域网</strong>上的各主机和路由器 IP 到硬件地址的映射表，并且映射表经常动态更新。</p><p>​ 当 A 向 B 发送 IP 数据报时，先在其 ARP cache 中查找，若查不到，则 ARP 进程广播 ARP 请求分组，除 B 外的主机不响应，B 则响应并向 A 发送 ARP 响应分组（单播），且 B 也将 A 的物理地址写入 cache 中。</p><p>​ ARP 解决的是<strong>同一个局域网</strong>上的映射问题。</p><h5 id="ip-数据报的格式">4.2.5 IP 数据报的格式</h5><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118200817531.png" alt="" /><figcaption>image-20231118200817531</figcaption></figure><ul><li><strong>版本</strong>：4 位，指版本号，实际使用的只有 IPv4 和 IPv6。</li><li><strong>首部长度</strong>：4 位，单位是 32 位字（即 4 字节）</li><li><strong>区分服务</strong>：8 位，一般情况不使用</li><li><strong>总长度</strong>：首部和数据之和的长度，16 位，因此数据报最大长度为 65535 字节。数据链路层中还有<strong>最大传送单元 MTU (Maximum Transfer Unit)</strong>。</li><li><strong>标识</strong>：16 位，每产生一个数据报，计数器 +1，并赋值给标识。</li><li><strong>标志</strong>：3 位，但目前只有两位有意义<ul><li>低位 <strong>MF</strong>。 MF = 1 表示后面“<strong>还有分片</strong>”的数据表， MF = 0 则表示当前已是最后一片。</li><li>中间为 <strong>DF</strong>。当前仅当 DF = 0 时允许分片。</li></ul></li><li><strong>片偏移</strong>：13 位，顾名思义，该片从何处开始。</li><li><strong>生存时间</strong>：8 位，没经过一个路由， TTL 减去 1，减为 0 时，就丢弃数据报。</li><li><strong>协议</strong>：8 位，指出使用的协议</li><li><strong>首部检验和</strong>：16 位，，只检验数据报首部，但不包括数据部分。发送方，检验和置位剩余 16 位字的反码之和。接收方将检验和在内的所有 16 位字相加，若首部未变化，其和必为 0。</li></ul><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118202056828.png" alt="" /><figcaption>image-20231118202056828</figcaption></figure><ul><li><strong>源地址</strong>：32 位</li><li><strong>目的地址</strong>：32 位</li></ul><h5 id="ip-层转发分组的流程">4.2.6 IP 层转发分组的流程</h5><p>​ 路由表信息： <span class="math display">\[(目的网络地址, 下一跳地址)\]</span> <img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118202909343.png" alt="image-20231118202909343" /></p><p>​ 存在<strong>特定主机路由</strong>，对特定的主机指明一个路由，以便管理人员控制网络和测试网络。</p><p>​ 存在<strong>默认路由</strong>，减小路由表所占的空间和搜索路由表所用的时间。</p><blockquote><p>默认路由（Default Route）是网络中的一种路由设置，用于指定当路由表中没有匹配的路由项时，数据包应该被发送到的下一个跃点或下一跳。默认路由通常用于简化路由表，特别是在大型网络中。</p></blockquote><blockquote><p>在IPv4网络中，默认路由通常使用0.0.0.0/0表示，这表示所有目标地址。当路由表中没有与目标地址匹配的具体路由项时，数据包将被发送到默认路由指定的下一个跃点。这有助于简化路由表，特别是在较大的网络中，减少路由表的大小和复杂性。</p></blockquote><blockquote><p>在IPv6网络中，类似的概念是使用::/0来表示所有IPv6地址。当没有与目标IPv6地址匹配的具体路由项时，数据包将被发送到默认路由指定的下一个跃点。</p></blockquote><p>​</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231118203422006.png" alt="" /><figcaption>image-20231118203422006</figcaption></figure><p>​ <strong>分组转发算法的流程</strong>：</p><ol type="1"><li>从数据报首部提取目的主机 IP 地址 D，得出网络地址 N。</li><li>若 N 就是与此路由连接的某个网络，则 <strong>直接交付</strong>；否则执行 3。</li><li>若路由表有目的地址为 D 的特定主机路由，则交给其指明的下一跳；否则 4。</li><li>若路由表中有到达 N 的路由，则交给其指明的下一跳，否则 5。</li><li>默认路由，否则 6。</li><li>报错</li></ol><h4 id="划分子网与构造超网">4.3 划分子网与构造超网</h4><h5 id="划分子网">4.3.1 划分子网</h5><p>​ IP 地址设计不合理之处：</p><ul><li>IP 地址空间利用率有时很低，一个网络号所连接的主机可能并不多。</li><li>每个物理网络分配一个网络号会使得路由表太大而使网络性能变坏。</li><li>两级 IP 不够灵活，有时需要开辟一个新的网络，此时只能申请一个新的网络号。</li></ul><p>​ 划分子网的方法： <span class="math display">\[IP地址:=\{&lt;网络号&gt;,&lt;子网号&gt;,&lt;主机号&gt;\}\]</span> ​ 从 IP 数据报首部<strong>无法看出</strong>源主机或目的主机所连接的网络是否进行了子网划分，<strong>子网掩码</strong>正是用于解决这个问题的。</p><p>​ 子网掩码一般由一串连续的 1 和一串连续的 0 构成，且 1 的长度等于网络号与子网号位数之和，因此与 IP 地址进行<strong>与</strong>操作即可得出子网地址。 如果一个网络不划分子网，则使用默认子网掩码，显然，</p><p>​ A 类地址默认掩码为 255.0.0.0，或 0xFF000000。</p><p>​ B 类地址默认掩码为 255.255.0.0，或 0xFFFF0000。</p><p>​ C 类地址默认掩码为 255.255.255.0，或 0xFFFFFF00。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231119102550234.png" alt="" /><figcaption>image-20231119102550234</figcaption></figure><h5 id="使用子网时的分组转发算法">4.3.2 使用子网时的分组转发算法</h5><p>​ 路由表包含：<strong>目的网络地址、子网掩码</strong>和<strong>下一跳地址</strong>。</p><ol type="1"><li>从收到的数据报提取 IP 地址 D。</li><li>各网络子网掩码与 D 相与，看看是否匹配，若匹配则直接交付，否则 3。</li><li>若路由表中有目的地址为 D 的特定主机路由，则交付之，否则 4。</li><li>对路由表每一行子网掩码与 D 相与，结果为 N，若 N 与该行目的网络的地址匹配，则交付给下一跳，否则 5。</li><li>默认路由，否则 6。</li><li>报错。</li></ol><h5 id="无分类编址-cidr-超网">4.3.3 无分类编址 CIDR （超网）</h5><p><span class="math display">\[IP 地址:=\{&lt;网络前缀&gt;,&lt;主机号&gt;\}\]</span></p><p>​ 网络前缀相同的连续 IP 地址组成一个 ”CIDR 地址块”。</p><p>​ CIDR 使用斜线激发，即 IP 地址后加上斜线 “/”，后写上前缀位数。</p><p>​ CIDR 还使用 32 位的地址掩码，其中前一串 1 就代表前缀。</p><p>​ 路由表中用 CIDR 地址块来查找目的网络，称为<strong>路由聚合</strong>或<strong>构造超网</strong>。</p><p>​ 在查找下一跳时，可能有多个 CIDR 地址块都能够与目的地址匹配，此时则根据<strong>最长前缀匹配</strong>原则确定下一跳。</p><p>​ 由于要进行最长前缀匹配，故最方便的方法即是在构造路由表时采用<strong>二叉线索</strong>，即 01-Trie，然后查询时即可迅速进行前缀匹配。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231119105513490.png" alt="" /><figcaption>image-20231119105513490</figcaption></figure><p>​ 为了提高效率，还可采用各式<strong>压缩技术</strong>。</p><h4 id="网际控制报文协议-icmp">4.4 网际控制报文协议 ICMP</h4><p>​ ICMP 报文分为 <strong>ICMP 差错报告报文</strong>和 <strong>ICMP 询问报文</strong>。</p><p>​ ICMP 报文前 4 个字节是统一的格式，三个字段：类型、代码和检验和。接着 4 个字节与 ICMP 类型有关。最后面是数据字段，长度取决于 ICMP 类型。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231119150429359.png" alt="" /><figcaption>image-20231119150429359</figcaption></figure><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231119150446519.png" alt="" /><figcaption>image-20231119150446519</figcaption></figure><p>​ <strong>改变路由（重定向）：</strong> 路由器把改变路由报文发送给主机，让主机知道下次该将数据报发送给另外的路由器（可通过更好的路由）。</p><p>​ 不应发送 ICMP 差错报告的情况：</p><ul><li>对 ICMP 差错报文，不再发送 ICMP 差错报文</li><li>对第一个分片的数据报片的所有后续数据报片，都不发送 ICMP 报文。</li><li>对具有多播地址的数据报，都不发送。</li><li>对具有特殊地址（如 127.0.0.0 或 0.0.0.0）的数据报，不发送 ICMP 报文。</li></ul><p>​ ICMP 的一个重要应用就是<strong>分组网间探测 PING (Packet InterNet Groper)</strong>，是应用层直接使用网络层 ICMP 的一个例子。</p><p>​ 另一个重要应用是 traceroute (UNIX) / tracert (windows)，用于跟踪一个分组源点到终点的路径。下介绍其原理：</p><p>​ 主要采用数据报中的生存时间 TTL，先发送 TTL 为 1，收到<strong>时间超过</strong>差错报文则 TTL + 1 重新发送，否则收到<strong>终点不可达</strong>报文，且长度即 TTL。</p><h4 id="互联网的路由选择协议">4.5 互联网的路由选择协议</h4><h5 id="几个基本概念">4.5.1 几个基本概念</h5><h6 id="理想路由算法">4.5.1.1 理想路由算法</h6><p>​ <strong>理想路由算法</strong>几个特点：</p><ul><li>必须是正确的和完整的。</li><li>计算上应简单。</li><li>应能适应通信量和网络拓扑的变化（稳健性）。</li><li>应具有稳定性，通信量和网络拓扑相对稳定的情况下，应该收敛于一个可接受的解。</li><li>算法应该是最佳的。</li></ul><h6 id="分层次的路由选择">4.5.1.2 分层次的路由选择</h6><p>​ 互联网采用<strong>分层次的路由选择</strong>，原因：</p><ul><li>互联网规模非常大。</li><li>许多单位不愿外界了解自己内部网络的细节。</li></ul><p>​ 为此，把互联网划分为许多小的<strong>自治系统 AS (autonomous system)</strong>。一个 AS 对其他的 AS 表现出的是<strong>一个单一的和一致的路由选择策略</strong>。</p><p>​ 故此，路由选择协议可以划分为两类：<strong>内部网关协议 IGP (Interior Gateway Protocol)</strong> 和<strong>外部网关协议 EGP (External Gateway Protocol)</strong>。常用的 IGP 有 RIP 和 OSPF 协议，常用的 EGP 有 BGP-4。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231119160651490.png" alt="" /><figcaption>image-20231119160651490</figcaption></figure><p>​ 此外，路由选择协议还可依照路由表更新方分为<strong>静态路由协议</strong>和<strong>动态路由协议</strong>，常见的动态路由协议有 RIP、OSPF、BGP 等。</p><h5 id="rip">4.5.2 RIP</h5><p>​ RIP 是一种<strong>基于距离向量的路由选择协议</strong>，最大优点是简单。其中的“距离”是指“<strong>跳数</strong>” (hop count)。但 RIP 一条路径最多只能包含 15 个路由器，因此 RIP 只适用于小型互联网。</p><h6 id="rip-特点">4.5.2.1 RIP 特点</h6><p>​ RIP 特点：</p><ul><li>仅和相邻路由器交换信息。</li><li>路由器交换的信息是当前本路由器的路由表。</li><li>按照固定的时间间隔交换路由信息，如 30 秒。</li></ul><p>路由表信息为： <span class="math display">\[(路由表,距离,下一跳)\]</span></p><p>​ 下介绍路由更新算法：</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231119161304200.png" alt="" /><figcaption>image-20231119161304200</figcaption></figure><p>​ 其实就是 Bellman-Fold 算法，不断遍历，能松弛即松弛。</p><p>​ 对于解释 3，书中的解释是无论距离是增大减小亦或不变，都要更新为最新的信息。</p><h6 id="rip-报文格式">4.5.2.2 RIP 报文格式</h6><p>​ RIP 报文格式：</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231119161732197.png" alt="" /><figcaption>image-20231119161732197</figcaption></figure><ul><li><p>首部 4 字节，命令字段指出报文意义。</p></li><li><p>路由部分由若干路由信息组成，每个路由信息 20 字节。</p><ul><li><strong>地址标识符</strong> 标志所用地址协议。 <strong>路由标记</strong>填入自治系统号 ASN。</li><li>网络地址、子网掩码、下一跳路由地址、距离。</li></ul><p>一个 RIP 报文最多 25 个路由，故而最大长度 <span class="math inline">\(4+20\times 25=504\)</span> 字节。</p></li></ul><p>RIP 存在的问题：<strong>当网络出现故障，需要经过比较长的时间才能将此信息传送到所有的路由器</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231119163624180.png" alt="" /><figcaption>image-20231119163624180</figcaption></figure><p>​ RIP 特点总结：<strong>实现简单开销小，距离有限，坏消息传播慢</strong>。</p><h5 id="内部网关协议-ospf">4.5.3 内部网关协议 OSPF</h5><p>​ <strong>OSPF 开放最短路径优先</strong> 使用了 Dijkstra 提出的<strong>最短路径算法 SPF</strong>。OSPF 三个要点如下：</p><ul><li>洪泛法：向本自治系统<strong>所有</strong>路由器发送信息。</li><li>发送的信息是与本路由器相邻所有路由器的链路状态。</li><li>当且仅当链路发生变化，才使用洪泛。</li></ul><p>​ 由此，每个路由器都能够得到本网完整的网络拓扑，采用 djikstra 算法即可得出最短路径从而构造路由表。</p><p>​ 而且 OSPF 将一个自治系统再划分为若干个小的范围，称为<strong>区域 (area)</strong>。连接不同区域的路由器叫<strong>区域边界路由器</strong>。主干区域的路由器称<strong>主干路由器</strong>。OSPF 不用 UDP 而是<strong>直接用 IP 数据报传送</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/image-20231119170556159.png" alt="" /><figcaption>image-20231119170556159</figcaption></figure><p>​ OSPF 其它特点：</p><ul><li>允许管理员指派不同代价，代价占 16 位，十分灵活。</li><li>若一个目的网络有多条相同代价路径，则可以分配通信量，达到<strong>负载平衡 (load balancing)</strong>。</li><li>支持可变长子网划分与 CIDR。</li><li>链路可能经常变变化，每条链路带上一个序号，序号越大链路越新。</li></ul><p>​ OSPF 五种分组类型：</p><ul><li><p><strong>类型1 问候 (hello) </strong>分组，用于发现维持邻站可达性。</p></li><li><p><strong>类型2 数据库描述 (Database Description) </strong>分组，向邻站给出自己库中所有链路状态项目的摘要。</p></li><li><p><strong>类型3 链路状态请求 (Link State Request)</strong> 顾名思义</p></li><li><p><strong>类型4 链路状态更新 (Link State Update)</strong> 洪泛</p></li><li><p><strong>类型5 链路状态确认 (Link State Acknowledgement)</strong> 对更新分组的确认</p></li></ul><h5 id="外部网关协议-bgp">4.5.4 外部网关协议 BGP</h5><p>​ <strong>边界网关协议 BGP</strong>。不同自治系统之间使用 BGP 的缘由：</p><ul><li>互联网<strong>规模太大</strong>，使得自治系统 AS 之间路由选择非常困难。</li><li>自治系统 AS 之间的路由选择必须考虑有关策略。</li></ul><p>​ BGP 的目的寻找一条能够到达目的且网络条件比较好的路由而非最佳路由，采用<strong>路径向量 (path vector) 路由选择协议</strong>。每个自治系统至少选定一 <strong>BGP 发言人</strong>，往往选定<strong>边界路由器</strong>。发言人之间采用 BGP 协议。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main//newPath/image-20231120080108690.png" alt="" /><figcaption>image-20231120080108690</figcaption></figure><p>​ 在 RFC 4271 中规定了 BGP-4 的四种报文：</p><ul><li>OPEN 报文，用来与相邻 BGP 发言人建立关系，使其初始化。</li><li>UPDATE 报文，通告某一路由信息，以及列出要撤销的多路由。</li><li>KEEPALIVE 报文，周期性证实邻站连通信。</li><li>NOTIFICATION 报文，发送检测到的差错。</li></ul><p>​ BGP 报文格式：</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120080845868.png" alt="" /><figcaption>image-20231120080845868</figcaption></figure><p>​ 标记 (marker) 段 16 字节长，用于鉴别，不需鉴别是置全 1。</p><p>​ 长度字段指出包括首部在内整个 BGP 报文<strong>字节</strong>为单位的长度，最小 19，最大 4096。（查了下，是根据 TCP 协议的滑动窗口决定的 <a href="https://zhidao.baidu.com/question/428983149?bd_page_type=0&amp;pu=&amp;init=middle">这里</a>)</p><p>​ UPDATE 和 OPEN 报文的格式暂时不赘述。</p><h5 id="路由器的构成">4.5.5 路由器的构成</h5><p>​ 路由器结构划分为两大部分：<strong>路由选择部分</strong>和<strong>分组转发部分</strong>。</p><p>​ 路由选择部分也称为<strong>控制部分</strong>，核心构建为选择处理机，任务是根据协议构造出路由表，同时不断更新维护路由表。</p><p>​ 分组转发部分有三部分组成：<strong>交换结构</strong>、一组<strong>输入端口</strong>和一组<strong>输出端口</strong>。</p><p>​ 交换结构 (switching fabric) 又称<strong>交换组织</strong>，作用是根据转发表处理分组，把输入的分组从魔偶个端口输出出去。</p><p>​ 为了使交换功能分散化，往往把复制到转发表放在每个输入端口中，称为<strong>"影子副本"</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120083022304.png" alt="" /><figcaption>image-20231120083022304</figcaption></figure><p>​ 最早使用的路由器是普通的计算机，采用 CPU 作为路由选择处理机，利用中断机制启动处理。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120083350315.png" alt="" /><figcaption>image-20231120083350315</figcaption></figure><h4 id="ipv6">4.6 IPv6</h4><p>​ 变化：</p><ul><li><strong>允许协议继续扩充</strong>。</li><li>灵活的首部格式</li><li>扩展的地址层次结构</li></ul><p>​ IPv6 数据报有 <strong>基本首部</strong>和<strong>有效载荷</strong>两部分组成，有效载荷也成为<strong>净载荷</strong>。有效载荷允许零个或多个<strong>扩展首部</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120083649979.png" alt="" /><figcaption>image-20231120083649979</figcaption></figure><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120083714488.png" alt="" /><figcaption>image-20231120083714488</figcaption></figure><ul><li><strong>通信量类：</strong> 8 位，区分不同 IPv6 数据报类别或优先级。</li><li>流标号 (traffic class)：20 位。</li><li>有效载荷长度：除基本首部外的字节数。</li></ul><p>​ 扩展首部在传输中不进行处理，交给两端计算机处理，大大提高路由器处理效率。</p><p>​ IPv6 增加了任播 (anycast) 地址，终点是一组计算机，但数据报只交付其中一个，通常是最接近一个。</p><p>​ IPv6 采用<strong>冒号十六进制记法</strong>，如 <span class="math display">\[68E6:8C64:FFFF:FFFF:0:1180:960A:FFFF\]</span></p><ul><li>允许省略前导 0。</li><li>可以将一串连续的 0 用一对冒号取代。</li><li>仅允许一次零压缩。</li><li>仍可采用 CDR 斜线表示法。</li></ul><p>​ 地址分类：</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120084419498.png" alt="" /><figcaption>image-20231120084419498</figcaption></figure><h5 id="ipv4-向-ipv6-过渡">4.6.3 IPv4 向 IPv6 过渡</h5><p>​ 策略一：<strong>双协议栈</strong>。装有双协议栈的主机或路由器既能与 IPv4 主机通信，又能与 IPv6 主机通信。根据域名系统 DNS 返回的地址类型确定主机使用的地址类型。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120103834796.png" alt="" /><figcaption>image-20231120103834796</figcaption></figure><p>​ 策略二：<strong>隧道技术</strong>。IPv6 数据报进入 IPv4 网络时，把 IPv6 数据报封装成 IPv4 数据报。要使得双协议栈主机知道 IPv4 数据报内封装的时 IPv6 数据报，则需要将 IPv4 首部的协议字段值设置为 41。</p><h5 id="icmpv6">4.6.4 ICMPv6</h5><p>​ IPv6 也不保证数据可靠交付，因此采用 ICMP 来反馈差错。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120104137961.png" alt="" /><figcaption>image-20231120104137961</figcaption></figure><h4 id="ip-多播">4.7 IP 多播</h4><p>​ 与单播相比，一对多的网络通信中，多播可大大节约网络资源。</p><p>​ 多播组的标识符是 IP 地址中的 D 类地址，范围是 224.0.0.0 到 239.255.255.255。多播地址只能用于目的地址而不能用于源地址。一个 D 类地址表示一个多播组。</p><h5 id="网际组管理协-igmp-和-多播路由选择协议">4.7.3 网际组管理协 IGMP 和 多播路由选择协议</h5><p>​ IGMP (Internet Group Management Protocol) 网际组管理协议：是让连接在本地局域网上的多播路由器知道本局域网上<strong>是否</strong>有主机参加或退出了某个多播组。</p><p>​ 多播路由选择协议：多播转发必须动态适应多播组成员的变化，在转发数据报时，不能仅仅根据数据报中的目的地址，而是考虑从什么地方来到什么地方去。</p><p>​ IGMP 属于整个网际协议 IP 的一个组成部分。</p><p>​ 多播路由选择协议：洪泛与剪除、隧道技术、基于核心的发现技术。</p><h4 id="虚拟专用网-vpn-和网络地址转换-nat">4.8 虚拟专用网 VPN 和网络地址转换 NAT</h4><h5 id="vpn">4.8.1 VPN</h5><p>​ RFC 1918 指明了一些<strong>专用地址</strong>，只用于机构内部通信，互联网中所有路由器对目的地址为专用地址的数据报一律不予转发。</p><p>​ VPN 的作用是对内部数据报进行加密，然后在公网上传输，使得效果跟内网通信一样。</p><p><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120142854286.png" /></p><h5 id="nat">4.8.2 NAT</h5><p>​ 已经分配到本地 IP 地址，又想进行全球通信，则可使用 NAT。NAT 将每台计算机映射到 NAT 路由器的一个端口（每个端口具有一个全球 IP 地址），由此便可进行互联网通讯，此时目的主机只能知道 NAT 路由器端口的地址而不知发送端的地址。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120142901992.png" alt="" /><figcaption>image-20231120142901992</figcaption></figure><h4 id="mlps">4.9 MLPS</h4><p>​ MLPS 作为一种 IP 增强技术，广泛应用在互联网中。特点如下：</p><ul><li>支持面向连接的服务质量。</li><li>支持流量工程，平衡网络负载。</li><li>有效地支持 VPN。</li></ul><h5 id="工作原理">4.9.1 工作原理</h5><p>​ 在 MPLS 域入口处打上固定长的 MPLS 标记，然后对打上标记的 IP 数据报用硬件转发，只经过第二层，称为<strong>标记交换</strong>。</p><p>​ MPLS 域是指该域中有许多彼此相邻路由器，且均为支持 MPLS 技术的<strong>标记路由器 LSR</strong>。一个标记仅在两个 LSR 间才有意义。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120143602027.png" alt="" /><figcaption>image-20231120143602027</figcaption></figure><p>​ 如入接口 0 收到一个标记为 3 的 IP 数据报，路由器就知道应从出接口 1 转发且打上标记 1。</p><h5 id="转发等价类-fec">4.9.2 转发等价类 FEC</h5><p>​ IP 数据报的集合，对路由器来说具有相同的性质，如下一跳，相同服务类别，同样丢弃优先级等。</p><p>​ 例子：</p><ul><li>目的 IP 与某一特定 IP 地址前缀匹配的 IP 数据报</li><li>所有源地址与目的地址相同的数据报</li><li>具有某种服务质量需求的数据报</li></ul><h5 id="mpls-首部的格式">4.9.3 MPLS 首部的格式</h5><p>​</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120144102987.png" alt="" /><figcaption>image-20231120144102987</figcaption></figure><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/newPath/image-20231120144109443.png" alt="" /><figcaption>image-20231120144109443</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谢希仁计算机网络03-数据链路层</title>
      <link href="/2023/11/02/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2023/11/02/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h4 id="使用点对点信道的数据链路层">3.1 使用点对点信道的数据链路层</h4><h5 id="数据链路和帧">3.1.1 数据链路和帧</h5><p>​ <strong>链路</strong>是指从一个结点到相邻节点的一段物理线路（有限或无线），而中间没有其它交换结点。链路是一条路径的组成部分。</p><p>​ 传输数据时，不仅需要物理线路，还需要一些必要的通信协议控制数据传输。若把<strong>实现该些协议的硬件与软件</strong>加到链路上，就构成了<strong>数据链路</strong>。现在最常用的方法是使用<strong>网络适配器（既有硬件也有软件）</strong>来实现这些协议。</p><p>​ 早期数据通信协议曾叫做<strong>规程 (procedure)</strong>。因此在数据链路层，规程与协议是同义语。</p><p>​ 数据链路层把网络层交下来的数据构成<strong>帧</strong>发送到链路上，以及把接收到的<strong>帧</strong>中的数据取出并上交给网络层。互联网中，网络层协议数据单元是 <strong>IP 数据报（或简称为数据报、分组或包）</strong>。</p><p>​ 点对点信道通信时的主要步骤：</p><p>​ (1) 结点 A 的数据链路层把网络层叫下来的 IP 数据报添加首部和尾部封装成帧。</p><p>​ (2) 结点 A 把封装好的帧发送给结点 B 的数据链路层。</p><p>​ (3) 若结点 B 数据链路层收到的帧无差错，则提取 IP 数据报并交给网络层，否则弃帧。</p><h5 id="三个基本问题">3.1.2 三个基本问题</h5><p>​ 三个基本问题：<strong>封装成帧</strong>、<strong>透明传输</strong>和<strong>差错检测</strong>。</p><h6 id="封装成帧">3.1.2.1 封装成帧</h6><p>​ <strong>封装成帧 (framing)</strong> 是指在一段数据前后分别添加首部和尾部，构成一个帧。首部和尾部的一个重要作用是进行<strong>帧界定</strong>。每一种链路协议都规定所能传送的帧的<strong>数据部分最大长度上限——最大传送单元 MTU (Maximum Transfer Unit)</strong>。</p><p><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261052318.png" /></p><p>​ 帧界定使用特殊的<strong>帧界定符</strong>，帧开始符 SOH （十六制编码 01）放于首部，帧结束符 EOT （十六进制编码 04)放于尾部。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261058141.png" alt="" /><figcaption>image-20231026105820053</figcaption></figure><h6 id="透明传输">3.1.2.2 透明传输</h6><p>​ 当传输数据是非 ASCII 码的文件时，如果数据中某个字节二进制代码恰好和 SOH 和 EOT 这种控制字符一样，则会产生错误。<strong>透明传输</strong>的概念是指，无论怎样的数据通过，数据链路层都能原样无差错传输该数据。</p><p>​ 为实现透明传输，发送端的数据链路层在发送数据中出现控制字符的位置前插入一个转义字符 ESC （十六进制编码 1B），接收端的数据链路层在将其送往网络层前提前删除这个插入的转义字符。此方法叫做<strong>字节填充</strong>或<strong>字符填充</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261441992.png" alt="" /><figcaption>image-20231026144110932</figcaption></figure><h6 id="差错检测">3.1.2.3 差错检测</h6><p>​ 比特在传输过程中可能会产生差错，<span class="math inline">\(0\)</span> 变成 <span class="math inline">\(1\)</span>，<span class="math inline">\(1\)</span> 变成 <span class="math inline">\(0\)</span>，这种情况叫<strong>比特差错</strong>。同一时间传输错误的比特占总传输比特数的比率叫做<strong>误码率 BER (Bit Error Rate)</strong>。但实际数据传输误码率不可能降为零，因此位保证可靠传输，必须进行差错检测。目前广泛采用<strong>循环冗余检验 CRC (Cyclic Redundancy Check)</strong> 检错技术。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261446007.png" alt="" /><figcaption>image-20231026144652892</figcaption></figure><p>​ 传输差错可分为两大类，一类是基本的比特差错，里另一类是更复杂些的<strong>帧丢失</strong>、<strong>帧重复</strong>或<strong>帧失序</strong>。因此出现比特差错与出现传输差错并不等价。为实现可靠传输，在 CRC 检错的基础上，增加了<strong>帧编号</strong>、<strong>确认</strong>和<strong>重传机制</strong>。现在互联网采用区别对待方法，对于通信质量良好的传输线路，不适用确认和重传机制，即要求数据链路层向上提供可靠传输；对于通信质量较差的链路，则采用确认重传机制，数据链路层向上提供可靠传输。</p><h4 id="点对点协议-ppp">3.2 点对点协议 PPP</h4><p>​ 通信质量较差的年代，采用可靠传输协议是一种好办法，因此当时比较流行能实现可靠传输协议的<strong>高级数据链路控制 HDLC (High-level Data Link Control)</strong>。目前对于点对点的链路，则广泛采用简单得多的 <strong>点对点协议 PPP (Point-to-Point Protocol)</strong> 。</p><h5 id="ppp-协议的特点">3.2.1 PPP 协议的特点</h5><ol type="1"><li><p>应满足需求：</p><ul><li>简单</li><li>封装成帧</li><li>透明性</li><li>多种网络层协议兼容</li><li>多种类型链路，如串行或并行，同步或异步，低速或高速</li><li>差错检测</li><li>检测连接状态</li><li>最大传送单元</li><li>网络层地址协商</li><li>数据压缩协商</li></ul></li><li><p>PPP 协议的组成</p><ol type="1"><li>一个将 IP 数据报封装到串行链路的方法。</li><li>一个用来建立、配置和测试数据链路连接的 <strong>链路控制协议 LCP (Link Control Protocol)</strong>。</li><li>一套<strong>网络控制协议 NCP (Network Control Protocol)</strong>，其中每一个协议支持不同网络层协议。</li></ol></li></ol><h5 id="ppp-协议的帧格式">3.2.2 PPP 协议的帧格式</h5><h6 id="各字段意义">1. 各字段意义</h6><p>​ 首部第一字段和尾部第二字段为标志字段 F 。</p><p>​ 首部第二、三字段无具体含义，未定义。</p><p>​ 首部第四字段是 <span class="math inline">\(2\)</span> 字节的协议字段。协议字段为 <span class="math inline">\(0x0021\)</span> 时，PPP 帧的信息字段就是 IP 数据报；协议字段为 <span class="math inline">\(0xC021\)</span>，则信息字段是 PPP 链路控制协议 LCP 的数据；而 <span class="math inline">\(0x8021\)</span> 表示这是网络层的控制数据。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261532003.png" alt="" /><figcaption>image-20231026153257957</figcaption></figure><h6 id="字节填充">2. 字节填充</h6><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261534633.png" alt="" /><figcaption>image-20231026153411583</figcaption></figure><h6 id="零比特填充">3. <strong>零比特填充</strong></h6><p>​ 发送端每遇见 <span class="math inline">\(5\)</span> 个连续的 <span class="math inline">\(1\)</span> ，则插入一个 <span class="math inline">\(0\)</span>；接收端采取相反操作。</p><h5 id="ppp-协议的工作状态">3.2.3 PPP 协议的工作状态</h5><p>​ <img src="https://raw.githubusercontent.com/mlger/Pict/main/202310261610078.png" alt="image-20231026161026019" /></p><h4 id="使用广播信道的数据链路层">3.3 使用广播信道的数据链路层</h4><h5 id="局域网的数据链路层">3.3.1 局域网的数据链路层</h5><p>​ 局域网最主要特点：<strong>网络为一个单位所有，且地理范围和站点数目均有限</strong>。</p><p>​ 局域网优点：</p><p>​ (1) 可广播，一个站点可以很方便访问全网，主机可共享连接在局域网上的各种硬件和资源。</p><p>​ (2) 便于系统的扩展和演变，各设备位置可灵活调整或改变。</p><p>​ (3) 提高系统的可靠性 (reliability)、可用性 (availability) 和生存性 (survivability)。</p><p>​ 局域网可按网络拓扑进行分类，分为<strong>星形网</strong>（核心设备<strong>集线器</strong>）、<strong>环形网</strong>、<strong>总线网</strong>几类，其中总线网以传统以太网最为著名。经过几十年发展，以太网已经在局域网市场中占据绝对优势，以太网几乎成为局域网同义词。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310270907254.png" alt="" /><figcaption>image-20231027090759182</figcaption></figure><p>​ 从 <span class="math inline">\(10\ Mbit/s\)</span> 到 <span class="math inline">\(10\ Gbit/s\)</span> 的局域网均可用双绞线。双绞线已成为局域网中的主流传输媒体。数据率很高时，往往需要使用光纤作为传输媒体。</p><p>​ 共享信道在技术上有两种方法：</p><p>​ (1) <strong>静态划分信道</strong>，如 2.4 中的频分复用、时分复用、波分复用和码分复用，但是这种划分代价较高，不适合局域网使用。</p><p>​ (2) <strong>动态媒体接入</strong>，又称<strong>多点接入 (multiple access)</strong>，特点是信道并非在用户通信时固定分配给用户。又分为两类：</p><ul><li><strong>随机接入</strong> 所有用户可以随机发送信息，但如果恰巧有两个或多个用户同一时刻发送信息，则会产生<strong>碰撞</strong>（即<strong>冲突</strong>），使得这些用户全部发送失败。因此需要有解决碰撞的协议。</li><li><strong>受控接入</strong> 用户服从控制而不能随机发送信息，代表有分散控制的令牌环局域网和集中控制的多点线路<strong>探询 (polling)</strong>，或称<strong>轮询</strong>。</li></ul><p>​ 现在用“<strong>传统以太网</strong>”表示最初流行的 <span class="math inline">\(10 Mbit/s\)</span> 的以太网。</p><h6 id="以太网的两个标准">3.3.1.1 以太网的两个标准</h6><p>​ 世界上第一个局域网产品规约—— DIX Ethernet V2； 第一个 IEEE 的以太网标准 IEEE 802.3，数据率为 <span class="math inline">\(10\ Mbit/s\)</span>。这两个标准区别很小，因此也常把 IEEE 802.3 局域网简称以太网。</p><p>​ 为了使得数据链路层能更好适应多种局域网标准，IEEE 802 委员会将局域网的数据链路层拆成两个子层，即 <strong>逻辑链路控制 LLC (Logical Link Control)</strong> 子层和<strong>媒体接入控制 MAC (Medium Access Control)</strong> 子层。与接入媒体相关内容全部放在 MAC 子层，LLC 子层与传输媒体无关， MAC 子层对 LLC 子层来说是透明的。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310270955977.png" alt="" /><figcaption>image-20231027095503914</figcaption></figure><p>​ 现代 TCP/IP 体系经常使用的局域网只剩下 DIX Ethernet V2 而非 IEEE 802.3 中的局域网，因此逻辑链路子层 LLC（即 IEEE 802.2 标准）作用已经消失，很多厂商生产适配器上仅有 MAC 协议而没有 LLC 协议。</p><h6 id="适配器的作用">3.3.1.2 适配器的作用</h6><p>​ 适配器实现功能包含物理层和数据链路层两部分。</p><p>​ 计算机与外界局域网的连接是通过<strong>适配器 (adapter)</strong>进行的。适配器本来是主机箱内插入的一块网络接口板，又称<strong>网络接口卡 NIC (Network Interface Card)</strong>，或<strong>网卡</strong>。现在计算机主板上都已经嵌入该种适配器，不再使用单独的网卡，因此采用适配器这个术语更准确些。</p><p>​ 适配器与局域网之间通过电缆或双绞线以串行传输方式进行通信，与主机则通过计算机主板上的 I/O 总线以并行传输进行通信，因此适配器一个重要功能是<strong>进行数据串行传输与并行传输的转换</strong>。</p><p>​ 计算机的硬件地址在适配器的 ROM 中，而软件地址——IP 地址，则在计算机存储器中。</p><h5 id="csmacd-协议">3.3.2 CSMA/CD 协议</h5><p>​ 局域网上的计算机称为“<strong>主机</strong>”、“<strong>工作站</strong>”、“<strong>站点</strong>”或“<strong>站</strong>”。</p><p>​ 为了通信减半，以太网采取以下两种措施：</p><p>​ 第一，采用<strong>无连接</strong>工作方式，不必先建立连接即可发送数据。适配器对发送帧<strong>不进行编号，也不要求对方发回确认</strong>。因此以太网提供的服务随时<strong>尽最大努力的交付，即不可靠的交付</strong>。若目的站收到有差错帧，则丢，是否需要重传则<strong>有高层决定</strong>。</p><p>​ 总线同一时间只允许一台计算机发送数据，否则会产生碰撞。以太网采用最简单的随机接入，但同时使用 CSMA/CD 协议处理碰撞，意思是<strong>载波监听多点接入/碰撞检测 (Carrier Sense Multiple Access with Collision Detection)</strong>。</p><p>​ 第二，以太网发送数据采用<strong>曼彻斯特 (Manchester) 编码</strong>的信号。优点是每个码元都出现一次电压变换，可以很方便地把位同步信号提取出来；缺点则是所占频带宽度比原始基带信号增加一倍。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310271025170.png" alt="" /><figcaption>image-20231027102549093</figcaption></figure><p>​ 介绍下 CSMA/CD 协议要点。</p><p>​ “<strong>多点接入</strong>”说明其是总线型网络。</p><p>​ “<strong>载波监听</strong>”是用电子技术检测总线上有无其它计算机在发送，其实就是<strong>检测信道</strong>。发送前和发送中都必须进行信道检测。发送前检测是为了获得发送权。发送中检测则是为了及时发现碰撞，即碰撞检测。</p><p>​ “<strong>碰撞检测</strong>“亦即“<strong>边发送边监听</strong>”，几个站同时在总线上发送数据时，总线上信号电压变化幅度会增大，超过一定阈值时，就视为产生了碰撞。一旦出现碰撞，适配器立即停止发送，等待一段随机时间后再次发送。</p><p>​ <strong>电磁波在 <span class="math inline">\(1\ km\)</span> 电缆的传播时延约为 <span class="math inline">\(5\ \mu s\)</span></strong>。把总线上的<strong>单程端到端传播时延记为<span class="math inline">\(\tau\)</span></strong>。最迟经过 <span class="math inline">\(2\tau\)</span> 的时延即可确认是否发生碰撞（信息来回一次最大可能时延）。</p><p>​ 在使用 CSMA/CD 协议时，一个站不可能同时进行发送和接收，因此使用 CSMA/CD 协议的以太网只能进行<strong>半双工通信</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310271605705.png" alt="" /><figcaption>image-20231027160531598</figcaption></figure><p>​ 每一个站在发送数据后的一小段时间内，存在遭遇碰撞的可能性，这段时间是不确定的，因此称为以太网<strong>发送的不确定性</strong>。端到端往返时间 <span class="math inline">\(2\tau\)</span> 称为<strong>争用期</strong>。经过争用期检验后，才能肯定此次发送是否发生碰撞。</p><p>​ 以太网使用<strong>截断二进制指数退避 (truncated binary exponential backoff)</strong> 算法确定碰撞后重传时机，这里不多赘述。</p><p>​ 以太网规定一个最短帧长 64 字节，即 512 bit，这样发送一个帧的时间也至少需要一个争用期。凡是长度小于 64 字节的帧都是<strong>由于冲突而异常终止的无效帧</strong>。</p><p>​ <strong>强化碰撞</strong>是指发送数据一旦发生碰撞，除立即停止发送数据外，继续发送 32 或 48 比特的<strong>人为干扰信号 (jamming signal)</strong>，以便让所有用户都知道发生碰撞。</p><p>​ 以太网还规定<strong>帧间最小间隔</strong>为 <span class="math inline">\(9.6\ \mu s\)</span>，相当于 96 比特时间，是为了使得刚刚受到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备。</p><p>​ 由此，CSMA/CD 协议总结如下：</p><p>​ (1) 准备发送：组装成帧</p><p>​ (2) 检测信道：检测到信道忙，则不停检测，直至信道空闲</p><p>​ (3) 发送：边发送边监听，发送成功则回到 (1) ；发生碰撞则执行指数退避算法，等待一定时间后回到 (2)，若重传 16 次仍失败，则停止重传并向上报错。</p><h5 id="使用集线器的星形拓扑">3.3.3 使用集线器的星形拓扑</h5><p>​ <strong>集线器 (hub)</strong> 是一个<strong>物理层网络设备</strong>，通常与双绞线以太网相配合使用。10BASE-T 双绞线以太网的出现，是局域网发展史上一个非常重要的里程碑，从此以太网的拓扑就从总线型变为更加方便的星形网络，以太网也在局域网中占据统治地位。</p><p>​ 集线器有如下特点：</p><ul><li>使用集线器的以太网逻辑上仍是一个总线网，各站共享逻辑总线，仍使用 CSMA/CD 协议，同一时刻至多允许一个站发送数据。</li><li>一个集线器有多个<strong>接口</strong>，每个接口通过 RJ-45 插头用两对双绞线与一台计算机上的适配器相连。集线器像一个<strong>多接口的转发器</strong>。</li><li>集线器工作在<strong>物理层</strong>，每个接口仅仅简单转发比特，不进行碰撞检测。若发生碰撞，则所有接口都收不到正确的帧。</li><li>采用专门芯片进行自适应串音回波抵消，减少近端串音干扰（发出去的强信号对受到的弱信号的干扰）。</li></ul><p>​ <strong>堆叠式 (stackable)</strong> 集线器由 4~8 个集线器堆叠使用。</p><p>​ IEEE 802.3 标准还可以使用光纤作为传输媒体，主要作用于集线器之间的连接。</p><h5 id="以太网的信道利用率">3.3.4 以太网的信道利用率</h5><p><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310271654367.png" alt="image-20231027165412308" /> <span class="math display">\[a = \frac{\tau}{T_0}\]</span> ​ <span class="math inline">\(a\)</span> 趋近于 <span class="math inline">\(0\)</span>，表示一发生碰撞即可检测出来，信道资源被浪费时间非常少。因此为了使 <span class="math inline">\(a\)</span> 值尽量小，<strong>以太网的长度受到限制</strong>（<span class="math inline">\(\tau\)</span> 不能太大），同时<strong>以太网的帧长不能太短</strong> （否则 <span class="math inline">\(T_0\)</span> 太小）。</p><p>​ 理想状况下，不发生任何碰撞，则发送一帧时延为 <span class="math inline">\(T_0+\tau\)</span>，而帧本身发送时延为 <span class="math inline">\(T_0\)</span>，因此有极限信道利用率 <span class="math display">\[S_{max}=\frac{T_0}{T_0+\tau}=\frac{1}{1+a}\]</span> ​ 因此只有当 <span class="math inline">\(a\)</span> 远小于 <span class="math inline">\(1\)</span> 时才能得到尽可能高的极限信道利用率。</p><h5 id="以太网的-mac-层">3.3.5 以太网的 MAC 层</h5><h6 id="mac-层的硬件地址">3.3.5.1 MAC 层的硬件地址</h6><p>​ 局域网中，<strong>硬件地址</strong>又称<strong>物理地址</strong>或 <strong>MAC 地址</strong>（因地址用在 MAC 帧中）。</p><p>​ IEEE 802 标准为局域网规定一种 48 位的全球地址，是指局域网上每一台计算机中<strong>固化在适配器的 ROM 中的地址</strong>。</p><p>​ IEEE 的<strong>注册管理机构 RA (Registration Authority)</strong> 是局域网全球地址的法定管理机构，负责分配地址字段 6 字节中的前三字节（即最高 24 位）。世界上生产适配器的厂家都必须向 IEEE 购买由这三个字节构成的号，名称为 <strong>组织唯一标识符 OUI (Organizationally Unique Identifier)</strong>，通常也称<strong>公司标识符 (company_id)</strong>。地址中后三个字节由厂家自行指派，称为<strong>扩展标识符 (extended identifier)</strong>。</p><p>​ IEEE 规定地址字段第一字节的最低位为 I/G 位。I/G 表示 Individual/Group。该位为 0 时，地址字段表示一个<strong>单个站地址</strong>。该位为 1 时表示<strong>组地址</strong>，用来进行<strong>多播</strong>。因此 IEEE 只分配前三字节中的 23 位。</p><p>​ 第一字节低 2 位规定位 G/L 位，该位为 0 时是<strong>全球管理</strong>（保证全球没有相同地址），厂商向 IEEE 购买的 OUI 均属于全球管理。</p><p>​ 适配器有<strong>过滤</strong>功能，适配器收下的帧包括以下三种：</p><p>​ (1) <strong>单播 (unicast) 帧</strong>，收到的帧的 MAC 与本站硬件地址相同。</p><p>​ (2) <strong>广播 (broadcast) 帧</strong>，发送给本局域网所有站点的帧（全 1 地址）。</p><p>​ (3) <strong>多播 (multicast) 帧</strong>，发送给本局域网上一部分站点的帧。</p><p>​ 所有适配器都应能够识别前两种帧，有的适配器可用编程方法识别第三种帧。</p><p>​ 适配器还可设置为一种特殊的工作方式即<strong>混杂方式 (promiscuous mode)</strong>。窃听所有的帧，经常为黑客所使用。</p><h6 id="mac-帧的格式">3.3.5.2 MAC 帧的格式</h6><p>​ <img src="https://raw.githubusercontent.com/mlger/Pict/main/202311021938027.png" alt="image-20231102193850945" /></p><p>​ 数据字段小于 64 字节时，MAC 子层会在其后加入一个填充字段。</p><p>​ MAC 子层向下传到物理层时还要在帧前插入 8 字段，第一字段为 7 个字节的<strong>前同步码 （1 和 0 的交替码）</strong>，使得适配器接受 MAC 帧时迅速调整时钟频率。第二字段为<strong>帧开始定界符</strong>，定义为 <code>10101011</code>，前 6 位作用与前同步码相同，最后两个连续 1 预告信息接收。</p><p>​ 由于曼彻斯特码的使用，以太网不需要着帧结束定界符，由此也不需要插入字节来保证传输透明。</p><h4 id="扩展的以太网">3.4 扩展的以太网</h4><p>​ <strong>扩展的以太网在网络层看来仍然是一个网络</strong>。</p><h5 id="物理层扩展">3.4.1 物理层扩展</h5><p>​ 扩展主机与集线器之间距离一种简单方法是使用光纤和一对光纤调制解调器。</p><p>​ 使用多个集线器，可以构成覆盖范围更大的多级星形结构以太网。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202311021954027.png" alt="" /><figcaption>image-20231102195453931</figcaption></figure><p>​ 但这种多级结构的集线器以太网也有一些缺点。</p><p>​ (1) 多个系以太网相连把多个碰撞与变成一个，但此时最大吞吐量仍然是一个系的吞吐量 10 Mbits/s。</p><p>​ (2) 若不同系用不同以太网技术（如数据率不同），则无法互连。</p><h5 id="数据链路层扩展">3.4.2 数据链路层扩展</h5><p>​ 最初使用<strong>网桥 (bridge)</strong>，对 MAC 帧的目的地址进行 <strong>转发</strong> 和 <strong>过滤</strong>。</p><p>​ <strong>交换式集线器 (switching hub)</strong> 也称<strong>交换机 (switch)</strong> 或 <strong>第二层交换机 (L2 switch)</strong> 很快淘汰了网桥，这种设备<strong>工作在数据链路层</strong>。</p><h6 id="交换机特点">3.4.2.1 交换机特点</h6><p>​ 实质上是一个<strong>多接口网桥</strong>，通常有十几个或更多接口。具有<strong>并行性</strong>，能同时连通多对主机进行通信，相互通信主机<strong>独占传输媒体，无碰撞地传输数据</strong>。</p><p>​ 交换机的接口还有存储器，能在输出端口繁忙时将到来的帧进行缓存。</p><p>​ 交换机即插即用，内部<strong>帧交换表</strong>是通过<strong>自学习</strong>算法自动逐渐建立。</p><p>​ 许多交换机对收到的帧采用存储转发，但有些交换机用<strong>直通</strong>的交换方式，提高了帧的转发速度，但缺点是少了检查差错步骤。</p><h6 id="交换机的自学习功能">3.4.2.2 交换机的自学习功能</h6><p>​ <del>懒得写，看书吧。</del></p><p>​ 为防止环状网络拓扑导致的资源浪费，IEEE 的 802.1D 标准制定了<strong>生成树协议 STP (Spanning Tree Protocol)</strong>，不改变物理上的网络拓扑，但从逻辑上切断某些链路，消除环状结构的存在。</p><p>​ 随着站点数目增多和交换机成本的下降，传统总线以太网迅速为星形以太网所取代，但由于<strong>仍采用以太网的帧结构</strong>，故仍称以太网。</p><h5 id="虚拟局域网">3.4.3 虚拟局域网</h5><p>​ <img src="https://raw.githubusercontent.com/mlger/Pict/main/202311022019173.png" alt="image-20231102201909117" /></p><p>​ 利用交换机能方便地实现<strong>虚拟局域网 VLAN (Virtual LAN) </strong>，虚拟局域网限制接收广播信息的计算机数，使得网络不会因传播过多的广播信息（即“<strong>广播风暴</strong>”）而引起性能恶化。</p><p>​ 1988 年 IEEE 批准了 802.3ac 标准，该标准定义了以太网帧格式的扩展，以支持虚拟局域网。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202311022022437.png" alt="" /><figcaption>image-20231102202204367</figcaption></figure><p>​ 以太网最大帧长从原来的 1518 字节变为 1522 字节。</p><h4 id="高速以太网">3.5 高速以太网</h4><h5 id="base-t-以太网">3.5.1 100BASE-T 以太网</h5><p>​ 在双绞线上传输 100 Mbit/s 基带信号的星形拓扑以太网，但仍使用 IEEE 802.3 的 CSMA/CD 协议，又称<strong>快速以太网 (Fast Ethernet)</strong>。现在快速以太网正式标准为 IEEE 802.3u。</p><p>​ IEEE 802.3u 标准并未包括对同轴电缆支持，由细缆以太网升级到快速以太网必须重新布线，因此现在 10/100 Mbit/s 的以太网均无屏蔽双绞线布线。</p><p><del>更快的以太网就不写了，看书看吐了。。。。。</del>#</p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程作业 code</title>
      <link href="/2023/10/22/%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
      <url>/2023/10/22/%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<p>本页面将<strong>计组</strong>和<strong>数据结构与算法</strong>两门课的编程作业代码于 ddl /发布三周后公布，仅供参考。如有错误或可改进之处，敬请联系 Lg，直接 qq 联系或 <code>1370120724@qq.com</code> 均可。</p><table><thead><tr class="header"><th>计组</th><th>writer</th></tr></thead><tbody><tr class="odd"><td><a href="https://box.nju.edu.cn/f/1929f5477a814e68aa56/?dl=1">COA_hw1</a></td><td>Lg</td></tr><tr class="even"><td><a href="https://box.nju.edu.cn/f/1950f62a50374ff9b2d0/?dl=1">COA_hw2</a></td><td>Lg</td></tr><tr class="odd"><td><a href="https://box.nju.edu.cn/f/010a76d95c1545d29262/?dl=1">COA_hw3</a></td><td>zz</td></tr><tr class="even"><td><a href="https://box.nju.edu.cn/f/6b70dfe587634842bea5/?dl=1">COA_hw4</a></td><td>Lg</td></tr><tr class="odd"><td><a href="https://box.nju.edu.cn/f/7932ebf9e0ec48dca483/?dl=1">COA_hw5</a></td><td>Lg</td></tr><tr class="even"><td><a href="https://box.nju.edu.cn/f/8fef2c4fbe6c4c2a8df2/?dl=1">COA_hw6</a></td><td>Lg</td></tr><tr class="odd"><td><a href="https://box.nju.edu.cn/f/5a95c20bc470455787de/?dl=1">COA_hw7（含 pdf 附件）</a></td><td>Lg</td></tr></tbody></table><table><thead><tr class="header"><th>数据结构与算法</th><th>writer</th></tr></thead><tbody><tr class="odd"><td><a href="https://box.nju.edu.cn/f/0aa0a872c19a4b4a8af9/?dl=1">DS_hw1</a></td><td>Lg</td></tr><tr class="even"><td><a href="https://box.nju.edu.cn/f/eaca1c8b47874f1caf43/?dl=1">DS_hw2</a></td><td>Lg</td></tr><tr class="odd"><td><a href="https://box.nju.edu.cn/f/2e65d5aa45e84fd5815f/?dl=1">DS_hw3</a></td><td>Lg</td></tr><tr class="even"><td><a href="https://box.nju.edu.cn/f/31ecfa006910450d881d/?dl=1">DS_hw4</a></td><td>Lg</td></tr></tbody></table><blockquote><p>​ 也许你感觉自己的努力总是徒劳无功，但不必怀疑，你每天都离顶点更进一步。今天的你离顶点还遥遥无期。但你通过今天的努力，积蓄了明天勇攀高峰的力量。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谢希仁计算机网络02-物理层</title>
      <link href="/2023/10/22/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C02-%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2023/10/22/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C02-%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h4 id="物理层的基本概念">2.1 物理层的基本概念</h4><p>​ 用于物理层的协议也称为<strong>规程(procedure)</strong>。</p><p>​ 可将物理层的主要任务描述为确定与传输媒体的接口有关的一些特性，即：</p><p>​ (1) <strong>机械特性</strong>：指明接口所用接线器的形状尺寸、引脚数目排列等。</p><p>​ (2) <strong>电气特性</strong>：指明接口电缆各条线电压范围。</p><p>​ (3) <strong>功能特性</strong>：指明某条线某电平的电压的意义。</p><p>​ (4) <strong>过程特性</strong>：指明不同功能的各种可能事件的出现顺序。</p><p>​ 数据在计算机内部采用<strong>并行传输</strong>，但在通信线路上一般采用<strong>串行传输</strong>，因此物理层还要完成传输方式的转换。</p><h4 id="数据通信的基础知识">2.2 数据通信的基础知识</h4><h5 id="数据通信系统的模型">2.2.1 数据通信系统的模型</h5><p>​ 数据通信系统可划分为三大部分：<strong>源系统</strong>（或<strong>发送端、发送方</strong>）、<strong>传输系统</strong>（或<strong>传输网络</strong>）和<strong>目的系统</strong>（或<strong>接收端、接收方</strong>）</p><p>​ 源系统一般包含两部分：</p><ul><li><strong>源点(source)</strong>：产生要传输的数据。又称<strong>源站</strong>或<strong>信源</strong>。</li><li><strong>发送器</strong>：将源点产生数据进行编码，之后才能进行传输。如<strong>调制器</strong>。</li></ul><p>​ 目的系统一般包含两部分：</p><ul><li><strong>接收器</strong>：接受传输信号，并转化为目标设备能处理的信息。如<strong>解调器</strong>。</li><li><strong>终点(destination)</strong>：接受比特流</li></ul><p>​ 现在很多计算机使用内置的调制解调器，用户在计算机外看不见调制解调器。</p><p>​</p><p>通信的目的是传送<strong>消息(message)</strong>。<strong>数据(data)</strong>是运送消息的实体。<strong>信号(signal)</strong>是数据的电气或电磁表现。信号可分为两大类：</p><p>​ (1) <strong>模拟信号</strong>，或<strong>连续信号</strong>：如用户家中的调制解调器到电话端局之间的用户线上的信号。</p><p>​ (2) <strong>数字信号</strong>，或<strong>离散信号</strong>：如用户家中计算机到调制解调器之间，或电话网中继线上传送的信号。使用时间域（或称时域）的波形表示数字信号时，取不同离散数值的基本波形称为<strong>码元</strong>。</p><h5 id="有关信道channel的几个基本概念">2.2.2 有关<strong>信道(channel)</strong>的几个基本概念</h5><p>​ 从通信双方的交互方式来看，有三种基本通信方式：</p><p>​ (1) <strong>单向通信</strong>：也称<strong>单工通信</strong>。如无线电广播，或有线电广播及电视广播。</p><p>​ (2) <strong>双向交替通信</strong>：也称<strong>半双工通信</strong>，双方均可发送，但不可同时发送。</p><p>​ (3) <strong>双向同时通信</strong>：也称<strong>全双工通信</strong>。</p><p>​ 单向通信仅需一条信道，而双向交替通信和双向同时通信均需两条。全双工通信效率最高。</p><p>​</p><p>​ 来自信源的信号称为<strong>基带信号</strong>，往往含有较多低频成分甚至直流成分，而许多信道并不能传输这种低频或直流分量，因此必须对基带信号进行<strong>调制(coding)</strong>。使用<strong>载波(carrier)</strong>进行调制，把基带信号频率搬移到较高频段，并转化为模拟信号，便可更好在模拟信道中传输。载波调制后信号称<strong>带通信号</strong>，调制称为<strong>载波调制</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211254285.jpg" alt="" /><figcaption>0d28fb91042f8ce7aa2ce716249dd2d</figcaption></figure><h5 id="信道极限容量">2.2.3 信道极限容量</h5><p>​ 限制码元在信道上传输速率的因素：</p><p>​ (1) 信道可通过频率范围</p><p>​ 信道能通过频率范围有限，高频分量往往无法通过信道。高频分量传输时受衰减，接收端受到信号便失去了码元间的清晰界限，此现象称<strong>码间串扰</strong>。</p><p>​ 奈氏准则告诉我们：<strong>任何信道中，码元传输速率有上限，超过该上限，则会出现严重码间串扰问题，使接收端对码元的判决称为不可能。</strong></p><p>​ (2) 信噪比</p><p>​ 信噪比是信号的平均功率与噪声的平均功率比值，记作 <strong>S/N</strong>，度量单位为<strong>分贝</strong>。</p><p>​ 香农公式指出，信道的<strong>极限传输速率 C </strong>为 <span class="math display">\[C = W\log_2(1+S/N)\ \ \ (bit/s)\]</span> ​ 其中 <span class="math inline">\(W\)</span> 为信道带宽， <span class="math inline">\(S\)</span> 和 <span class="math inline">\(N\)</span> 分别表示信号与噪声的平均功率。</p><p>​ 香农公式表面，信噪比越大，极限传输速率越高。对于频带宽度已确定的信道，信噪比也无法继续提高，码元传输速率也达上界，欲提升传输速率，可通过编码的方法<strong>让每一个码元携带更多比特信息量</strong>。</p><h4 id="物理层下面的传输媒体">2.3 物理层下面的传输媒体</h4><p>​ <strong>传输媒体</strong>分为<strong>导引型传输媒体</strong>和<strong>非导引型传输媒体</strong>两大类。</p><h5 id="导引型传输媒体">2.3.1 导引型传输媒体</h5><h6 id="双绞线">1. <strong>双绞线</strong></h6><p>​ 两根互相绝缘铜导线绞合，以减少对相邻导线的电磁干扰。使用最多地方为电话系统。</p><p>​ 模拟运输和数字运输均可使用双绞线，通信距离为几到十几公里。</p><p>​ 为提升抗电磁干扰能力，可在外面加上一层用金属丝编织成的屏蔽层，称为<strong>屏蔽双绞线</strong>，简称 <strong>STP(Shielded Twisted Pair)</strong>。<strong>无屏蔽双绞线</strong>简称 <strong>UTP(Unshielded Twisted Pair)</strong> 。</p><p>​ “商用建筑物电信布线标准”—— <strong>EIA/TIA-568-A</strong> ——规定了 5 个种类的 UTP 标准，最常用的是 5 类线。</p><p>​ <img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211404631.png" alt="image-20231021140449514" /></p><h6 id="同轴电缆">2. <strong>同轴电缆</strong></h6><p>​ 由内导体铜质芯线、绝缘层、网状编织外导体屏蔽层以及保护塑料外层组成。具有良好抗干扰特性，被广泛用于传输较高速率的数据。</p><p>​ 目前主要用在有线电视网的居民小区中。</p><h6 id="光缆">3. <strong>光缆</strong></h6><p>​ <strong>光纤</strong>在发送端有光源，可采用发光二极管或半导体激光器。接收端用光电二极管做成光检测器，可还原出电脉冲。原理是利用光的全反射。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211409293.png" alt="" /><figcaption>image-20231021140938197</figcaption></figure><p>​ 现代工艺可制造出超低损耗光纤，即做到传输数公里而没什么衰耗。这是光纤通信飞速发展的最关键因素。</p><p>​ 可以存在多条不同角度入射光线在同一光纤中传输，称为<strong>多模光纤</strong>。但光脉冲传输时会展宽，因此多模光纤<strong>仅适用于近距离传输</strong>。</p><p>​ 光纤优点：</p><p>​ (1) 通信容量大。</p><p>​ (2) 传输损耗小，中继距离长，对远距离传输经济。</p><p>​ (3) 抗雷和电磁干扰性能好，在大电流脉冲干扰下尤为重要。</p><p>​ (4) 无串音干扰，保密性好。</p><p>​ (5) 体积小，重量轻。</p><h6 id="架空明线">4. <strong>架空明线</strong></h6><p>​ 在电线杆上架设互相绝缘的明线（铜线或铁线）。许多国家都已经停止铺设，目前我国一些农村与边远地区仍使用。</p><h5 id="非导引型传输媒体">2.3.2 非导引型传输媒体</h5><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211418400.png" alt="" /><figcaption>image-20231021141801277</figcaption></figure><p>​ 无线传输可使用频段很广，紫外线和更高的波段目前还不能用于通信。</p><p>​ 短波通信（即高频通信）主要靠电离层反射，但电离层不稳定产生的衰落现象和反射产生的多径效应，使得短波通信质量较差。因此短波无线电台一般采用低速传输。</p><h6 id="微波通信">2.3.2.1 微波通信</h6><p>​ <strong>无线电微波通信</strong>在数据通信中具有重要地位，频率范围为 <span class="math inline">\(300\ MHz\sim 300\ GHz\)</span> （波长 <span class="math inline">\(1\ m\sim1\ mm\)</span>），主要用 <span class="math inline">\(2\sim40\ GHz\)</span> 范围。微波在空间主要是直线传播，会穿过电离层进入宇宙空间，因此不像短波可以反射到地面很远地方。微波通信主要分为<strong>地面微波接力通信</strong>和<strong>卫星通信</strong>两种方式。</p><p>​ 由于地球是个曲面，微波直线传输距离受到限制，因此需要在两个通讯点间建立若干中继站，进行<strong>接力</strong>。微波接力通信可传输电话、电报、图像、数据等信息，特点是：</p><p>​ (1) 频率高，频段范围宽，通信信道容量大。</p><p>​ (2) 受到干扰小，质量高。</p><p>​ (3) 建设投资少，见效快，易于跨越山区、江河。</p><p>​ 但也有如下缺点：</p><p>​ (1) 相邻站必须直视，不可有障碍物。有时一个天线发出信号也会分成几条略有差别路径，造成失真。</p><p>​ (2) 有时会受到恶劣天气影响。</p><p>​ (3) 隐蔽性和保密性差</p><p>​ (4) 大量中继站使用和维护需要耗费大量人力物力。</p><h6 id="卫星通信">2.3.2.2 卫星通信</h6><p>​ 利用位于约 <span class="math inline">\(3\)</span> 万 <span class="math inline">\(6\)</span> 千公里高空的同步卫星作为中继器。主要优缺点与地面微波通信差不多。但<strong>具有较大传播时延</strong>。费用较高。</p><p>​ 由于在同步卫星轨道架设卫星数量有限，因此在卫星上使用不同频段来进行通信，保证大的通信容量资源。</p><p>​ 红外通信、激光通信也用于非导引型媒体。可用于近距离笔记本电脑相互传送数据。</p><h4 id="信道复用技术">2.4 信道复用技术</h4><h5 id="频分复用时分复用与统计时分复用">2.4.1 频分复用、时分复用与统计时分复用</h5><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211436769.png" alt="" /><figcaption>image-20231021143631664</figcaption></figure><p>​ <strong>频分复用 FDM (Frequency Division Multiplexing)</strong> 的所有用户<strong>在同样时间占用不同带宽资源</strong>。</p><p>​ <strong>时分复用 TDM (Time Division Multiplexing)</strong> 则是将时间划分为一段段等长的 TDM 帧，所有用户<strong>在不同时间占用同样的频带宽度</strong>。</p><p>​ <strong>复用器(multiplexer)</strong> 和<strong>分用器(demultiplexer)</strong> 成对使用。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211439720.png" alt="" /><figcaption>image-20231021143935600</figcaption></figure><p>​ <strong>统计时分复用 STDM (Statistic TDM)</strong> 是一种改进的时分复用，能明显提高信道利用率。使用<strong>集中器(concentrator)</strong> 进行复用。集中器也称<strong>智能复用器</strong>。</p><p>​ <img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211444418.png" alt="image-20231021144401327" /></p><h5 id="波分复用">2.4.2 波分复用</h5><p>​ <strong>波分复用 WDM (Wavelength Division Multiplexing)</strong> 就是<strong>光的频分复用</strong>。一根光纤复用几十路或更多路光载波信号，使用<strong>密集波分复用 DWDM (Dense WDM)</strong> 这一名词。</p><p>​ <strong>掺铒光纤放大器 EDFA (Erbium Doped Fiber Amplifier)</strong> 不需要进行光电转化直接对光信号进行放大。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211448096.png" alt="" /><figcaption>image-20231021144822976</figcaption></figure><h5 id="码分复用">2.4.3 码分复用</h5><p>​ <strong>码分复用 CDM (Code Division Multiplexing)</strong> 是另一种共享信道方法，也称<strong>码分多址 CDMA (Code Division Multiple Access)</strong> 。每个用户可以在同一时间用同样频带进行通信。<strong>各用户间不会造成干扰，具有很强抗干扰能力，频谱类似于白噪声，不易被敌人发现</strong>。</p><p>​ CDMA 中，每一个比特时间再划分为 <span class="math inline">\(m\)</span> 个短的间隔，称为<strong>码片 (chip)</strong>。通常 <span class="math inline">\(m\)</span> 取 <span class="math inline">\(64\)</span> 或 <span class="math inline">\(128\)</span>。一个站如果发送比特 <span class="math inline">\(1\)</span> ，则表示发送该码片，发送 <span class="math inline">\(0\)</span> 则表示该码片的反码。如此每发送 <span class="math inline">\(b\)</span> 个比特，实际信息则<strong>扩频</strong>为 <span class="math inline">\(mb\)</span> 个比特。该种扩频方式属于<strong>直接序列扩频 DDSS (Direct Sequence Spread Spectrum)</strong>。另一种扩频方式为 <strong>调频扩频 FHSS (Frequency Hopping Spread Spectrum)</strong>。</p><p>​ CDMA 要求每一个站分配的码片向量各不相同且<strong>相互正交</strong>。实际系统采用<strong>伪随机码序列</strong>。</p><p>​ 任何一个码片与自身内积为 <span class="math inline">\(1\)</span>，与其反码内积为 <span class="math inline">\(-1\)</span> 。</p><p>​ 结合<strong>全球定位系统 GPS</strong>，所有的站可以同步发送码片序列。若 X 站接受 S 站发送的数据，则需预先知道 S 站特有的码片序列，然后将接受到的信号与 S 站的码片序列作内积，即可解码。</p><h4 id="数字传输系统">2.5 数字传输系统</h4><p>​ 早期数字传输系统缺点：</p><p>​ (1) <strong>速率标准不统一。</strong></p><p>​ (2) <strong>不是同步传输。</strong></p><p>​ 为解决上述问题，美国于 1988 年首先推出一个数字传输标准，叫<strong>同步光纤网 SONET (Synchronous Optical Network)</strong>。</p><p>​ ITU-T 以 SONET 为基础，制定国际标准<strong>同步数字系列 SDH (Synchronous Digital Hierarchy)</strong>。 SDH/SONET 标准的制定及各国的统一运用，实现了数字传输体制上的世界性标准。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310211642004.png" alt="" /><figcaption>image-20231021164224886</figcaption></figure><h4 id="宽带接入技术">2.6 宽带接入技术</h4><h5 id="adsl-技术">2.6.1 ADSL 技术</h5><p>​ <strong>非对称数字用户线 ADSL (Asymmetric Digital Subscriber Line)</strong> 技术是用数字技术<strong>对现有的模拟电话用户线进行改造</strong>，使它能够承载宽带数字业务。 下行带宽（从 ISP 到用户）远远大于上行带宽（从用户到 ISP ）。传输距离取决于数据率与线径。</p><p>​ ADSL 在用户线两端各安装一个 ADSL 调制解调器，我国目前采用的实现方法是 <strong>离散多音调 DMT (Discrete Multi-Tone) 调制技术</strong>。 ADSL 并不能保证固定的数据率。 其最大优点是不需要重新布线。</p><p>​ 基于 ADSL 的接入网三大组成部分：<strong>数字用户线接入复用器 DSLAM (DSL Access Multiplexer)</strong>，用户线和用户家中一些设施。 ADSL 调制解调器必须成对使用，把端局和用户家中的 ADSL 调制解调器分别记为 ATU-C（C 代表<strong>端局 (Central Office)</strong>）和 ATU-R （R代表<strong>远端 (Remote)</strong>）。用户电话通过<strong>分离器 (Splitter)</strong> 与 ATU-R 连在一起。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310220934571.png" alt="" /><figcaption>image-20231022093405458</figcaption></figure><p>​ ADSL 技术也在发展，第二代 ADSL 改进的地方主要为：</p><p>​ (1) 通过提高调制效率得到更高的数据率。</p><p>​ (2) 采用<strong>无缝速率自适应技术 SRA (Seamless Rate Adaptation)</strong>，自适应调整速率。</p><p>​ (3) 改善线路质量测评和故障定位功能。</p><p>​ ADSL 技术并不适用于企业，原因在于企业通常需要使用上行信道发送大量数据给用户。为满足企业需要，ADSL 技术有几种变型，记为 xDSL。</p><h5 id="光纤同轴混合网">2.6.2 光纤同轴混合网</h5><p>​ <strong>光纤同轴混合网 （HFC 网，HFC 是 Hybrid Fiber Coax 缩写）</strong>是基于有线电视网基础上开发的一种居民宽带接入网，主要特点如下：</p><p>​ 把原有有线电视网同轴电缆主干部分该换为光纤，从头端连接到<strong>光纤节点 (fiber node)</strong>。光纤节点光信号转化为电信号，通过同轴电缆传输到每个家庭。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310220944400.png" alt="" /><figcaption>image-20231022094401301</figcaption></figure><p>​ 模拟电视机要能够接受数字电视信号，需要一个<strong>机顶盒 (set-top box)</strong>连接在同轴电缆与电视机之间。若欲接入互联网，还需增加 HFC 网所使用的调制解调器，称为 <strong>电缆调制解调器 (cable modem)</strong>。</p><h5 id="fttx-技术">2.6.3 FTTx 技术</h5><p>​ <strong>光纤到户 FTTH (Fiber To The Home)</strong> 两个问题：</p><p>​ (1) 价格高昂。</p><p>​ (2) 一般家庭用户没有这样高的数据率需求。</p><p>​ 这种情况下，出现了多种宽带光纤接入方式，称为 FTTx ，x 表示不同的光纤接入地点。</p><p>​ 为有效利用光纤资源，光纤干线和用户之间，需要铺设一段中间转换装置即 <strong>光配线网 ODN (Optical Distribution Network)</strong>，使得数十个家庭用户可以共享一根光纤。 五元的逛配线网称为<strong>无源光网络 PON (Passive Optical Network)</strong>。</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202310221001923.png" alt="" /><figcaption>image-20231022100126778</figcaption></figure><p>​ 光纤干线与<strong>光线路终端 OLT (Optical Line Terminal)</strong> 相连，OLT 把收到的下行数据发往无源的 1:N <strong>光分路器 (splitter)</strong> ，然后以广播方式向所有用户端的<strong>光网络单元 ONU (Optical Network Unit)</strong> 发送。</p><p>​ 光配线网采用波分复用，上行和下行分别使用不同的波长。</p><p>​ 目前已实现了多种不同的 FTTx， 如 <strong>光纤到路边 FTTC（C 表示 Curb）</strong>、<strong>光纤到小区 FTTZ（Z 表示 Zone）</strong>、<strong>光纤到大楼 FTTB（B 表示 Building）</strong>、<strong>光纤到楼层 FTTF（F 表示 Floor）</strong>、<strong>光纤到办公室 FTTO （O 表示 Office）</strong>、<strong>光纤到桌面 FTTD（D 表示 Desk）</strong>等等。</p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组01-计算机系统概述</title>
      <link href="/2023/09/08/%E8%AE%A1%E7%BB%8401-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/09/08/%E8%AE%A1%E7%BB%8401-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="概念">1.1 概念</h4><ul><li>何为计算机：计算机是指“<strong>通用电子计算机</strong>”<ul><li>通用：不是专用设备</li><li>电子：采用电子元器件</li><li>数字：信息采用数字化形式表示</li></ul></li><li>计算机系统：硬件和软件</li><li>何为计算机“<strong>组织</strong>”：操作单元及其互联连接<ul><li>对编程人员不可见</li><li>包括：控制信号，存储技术等</li></ul></li><li>何为计算机”<strong>结构</strong>“：直接影响逻辑程序执行的属性<ul><li>对编程人员可见</li><li>包括：指令集，表示数据类型的位数等</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/mlger/Pict/main/202309081604546.png" /></p><ul><li><strong>指令集体系结构</strong>： <strong>ISA</strong> ，有时称为<strong>指令系统</strong>。 ISA 是一种规约，规定如何使用硬件。<ul><li>可执行指令的集合，包含指令格式、操作种类及操作数的规定</li><li>指令可以接受的操作数类型</li><li>操作数所能存放的寄存器组的结构，包括每个寄存器的名称、编号、长度和用途</li><li>操作数所能存放的<strong>存储空间的大小和编址方式</strong></li><li>操作数在存储空间存放时按照<strong>大端还是小端方式存放</strong></li><li>指令获取操作数的方式，即<strong>寻址方式</strong></li><li>指令执行过程的控制方式，包括<strong>程序计数器（PC）、条件码定义</strong>等</li></ul></li><li>ISA 与组成之间的关系：计算机组成必须能够<strong>实现 ISA 规定的功能</strong>，如提供 GPR 、标志、运算电路等，<strong>一种 ISA 可以有不同的计算机组成</strong>。</li></ul><h4 id="计算机简史">1.2 计算机简史</h4><h5 id="第一代真空管">1.2.1 第一代：真空管</h5><ul><li>ENIAC ：第一台<strong>通用</strong>计算机，十进制，手动编程</li><li>ABC ：第一台<strong>电子</strong>计算机，不可编程</li><li>EDVAC ：冯·诺伊曼架构（普林斯顿架构）</li><li>三个基本原则：<ul><li>二进制</li><li>存储程序</li><li>5个组成部分<ul><li>主存储器：地址和存储内容</li><li>算术逻辑单元 / 处理单元：执行信息处理</li><li>程序控制单元 / 控制单元：指挥信息处理</li><li>输入设备</li><li>输出设备</li></ul></li></ul></li></ul><h5 id="第二代晶体管">1.2.2 第二代：晶体管</h5><ul><li>体积更小、更便宜、发热更少</li><li>使用高级语言编程，并为计算机提供了系统软件</li></ul><h5 id="第三代中小规模集成电路">1.2.3 第三代：中小规模集成电路</h5><h5 id="第四代超大规模集成电路">1.2.4 第四代：（超）大规模集成电路</h5><ul><li>思想：<ul><li>将整个电路安装在很小的硅片上，而不是用分立元件搭成的等价电路</li><li>晶体管可以通过金属化相互连接，形成电路</li></ul></li><li><ul><li></li></ul></li></ul><h4 id="计算机发展">1.3 计算机发展</h4><h5 id="摩尔定律">1.3.1 摩尔定律</h5><ul><li>价格不变时，单芯片上所能包含的晶体管数量每年翻一番 (1965-1969) / 1970年起减慢为每18个月翻一番</li><li>影响：<ul><li>更小尺寸带来更多<strong>灵活性</strong>与<strong>可能性</strong></li><li>成本下降</li><li><strong>减小电能损耗与冷却要求</strong></li><li><strong>芯片间连接更少</strong>，更可靠</li></ul></li></ul><h4 id="计算机性能">1.4 计算机性能</h4><h5 id="cpu-性能">1.4.1 CPU 性能</h5><ul><li>计算机设计主要目标：提升 CPU 性能</li><li>系统时钟<ul><li>时钟频率： 1s 内执行基本操作的次数</li><li>始终周期：执行每次最基本操作的时间</li></ul></li><li>指令执行： <span class="math inline">\(CPI_i\)</span> 表示第 <span class="math inline">\(i\)</span> 种指令需要周期数， <span class="math inline">\(I_i\)</span> 表示第 <span class="math inline">\(i\)</span> 类指令条数，则有</li></ul><p><span class="math display">\[CPI=\frac{\sum_{i=1}^n(CPI_i \times I_i)}{I_c},I_c=\sum_{i=1}^n I_i\]</span></p><p>​ 执行一个程序的处理时间表示为 <span class="math display">\[T=I_c\times CPI \times t\]</span></p><ul><li>每秒百万条指令（ MIPS ）：</li></ul><p><span class="math display">\[MIPS = \frac{I_c}{T\times 10^6}=\frac{f}{CPI\times 10^6}\]</span></p><ul><li>每秒百万条浮点操作（ MFLOPS ）：</li></ul><p><span class="math display">\[MFLOPS=\frac{N_{floating-point\ op}}{T\times 10^6}\]</span></p><h5 id="性能设计的基本原则">1.4.2 性能设计的基本原则</h5><ul><li><strong>大概率事件优先原则</strong>：对于大概率事件，赋予优先的处理权与资源使用权。</li></ul><p><span class="math display">\[系统加速比=\frac{总执行时间_{改进前}}{总执行时间_{改进后}}\]</span></p><ul><li><strong>Amdahl</strong> 定律：<ul><li>部件系统加速比受限于其在系统中所占重要性比例。</li><li>性能增加的递减规则：改进越，系统获得效果越小</li></ul></li></ul><p><span class="math display">\[系统加速比=\frac{总执行时间_{改进前}}{总执行时间_{改进后}}=\frac{1}{(1-局部占比)+\frac{局部占比}{提升的性能}}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络01</title>
      <link href="/2023/09/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C01-%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/09/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C01-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="第1章-概述">第1章 概述</h4><h4 id="计算机网络在信息时代的作用">1.1 计算机网络在信息时代的作用</h4><p>​ 21世纪<strong>数字化</strong>、<strong>网络化</strong>、<strong>信息化</strong>，形成<strong>以网络为核心的信息时代</strong>。</p><p>​ 三大类网络：电信网络、有线电视网络、计算机网络</p><p>​ 互联网两个基本特点：<strong>连通性</strong>和<strong>共享</strong></p><ul><li>连通性：不论多远，都可便捷地交换各种信息</li><li>资源共享：信息共享、软件共享、硬件共享</li></ul><h4 id="互联网概述">1.2 互联网概述</h4><p>​ <strong>计算机网络</strong>由若干<strong>节点( node )</strong>和连接这些节点的<strong>链路( link )</strong>组成。</p><ul><li>节点：计算机、集线器、交换机、路由器等</li></ul><p>​ 网络把许多计算机连接在一起，<strong>互连网</strong>把许多网络通过路由器连在一起。与网络相连接的计算机称为<strong>主机</strong>。</p><p>​ 互联网发展的三个阶段：</p><ol type="1"><li>由 ARPANET 向互连网发展。 20 世纪 70 年代， APRA 开始研究多种网络互连的技术，称为互联网的雏形。 1983 年 TCP/IP 成为 ARPANET 上的标准协议，互联网诞生。 1990 年 ARPANET 关闭。</li></ol><ul><li><strong>internet （互连网）</strong>：指多个网络连接而成的网络</li><li><strong>Internet （互联网）</strong>：专有名词</li></ul><ol start="2" type="1"><li>第二阶段特点是建成了<strong>三级结构的互联网</strong>。分为<strong>主干网</strong>、<strong>地区网</strong>和<strong>校园网（企业网）</strong>。</li><li>第三阶段特点是形成了<strong>多层次 ISP 结构的互联网</strong>。 ISP 译为<strong>互联网服务提供商</strong>。</li></ol><p>​</p><p>​ 计算机网络的分类：</p><ul><li><strong>LAN</strong> （<strong>局域网</strong>）</li><li>特点<ul><li>作用范围小</li><li>多用户访问</li><li>高速度</li><li>错误率可控</li></ul></li><li>设备<ul><li><strong>Hub</strong> （集线器）：多端口中继器</li><li><strong>Bridge</strong> （网桥）：</li><li><strong>Switch</strong> （交换机）：</li><li><strong>Router</strong> （路由器）：分组交换，转发收到的分组</li></ul></li><li><strong>WAN</strong> （<strong>广域网</strong>）</li><li>特点<ul><li>作用范围大</li><li>通过链路传输</li><li>速度相对较低</li><li>错误率较难控制</li></ul></li><li>设备<ul><li><strong>Router</strong> （路由器）：</li><li><strong>Modem CSU/DSU TA/NT1</strong></li></ul></li></ul><p><strong>Boring！</strong></p><h4 id="互联网的组成">1.3 互联网的组成</h4><ul><li><p>互联网的组成：</p><ul><li><p>（1）<strong>边缘部分</strong>：由所有连接在互联网上的主机组成，是<strong>用户直接使用</strong>的部分。主机又称为<strong>端系统（end system）</strong></p></li><li><p>（2）<strong>核心部分</strong>：由大量网络和连接这些网络的路由器组成。这部分是<strong>为边缘部分提供服务的</strong>。</p></li></ul></li><li><p>端系统间通信方式：客户-服务器模式 and 对等连接方式</p><ul><li><strong>客户(client)</strong>-<strong>服务器(sever)</strong>模式（C/S模式）<ul><li>客户是服务请求方，服务器是服务提供方</li></ul></li><li>对等连接方式（P2P）<ul><li>并不区分服务请求方与服务提供方</li></ul></li></ul></li><li><p><strong>电路交换</strong>主要特点：</p><ul><li><strong>建立连接</strong> → <strong>通话</strong> → <strong>释放资源</strong></li><li>在通话的全部时间内，通话的两个用户始终占用端到端的通信资源</li><li>传输效率较低</li></ul></li><li><p><strong>分组交换</strong>主要特点：</p><ul><li>采取<strong>存储转发</strong>技术</li><li>发送的整块数据成为<strong>报文</strong>(message)</li><li>发送之前，先将报文划分成一个个更小的等长数据段，加上必要控制信息组成的<strong>首部</strong>(header)或<strong>包头</strong>，构成一个<strong>分组</strong>(packet)或<strong>包</strong>。</li><li>主机进行信息处理，路由器用来转发分组，即进行分组交换。</li></ul></li></ul><h4 id="计算机网络的类别">1.5 计算机网络的类别</h4><ul><li>按照网络的作用范围分类：<ul><li><strong>广域网 WAN </strong>：</li><li><strong>域域网 MAN </strong>：作用范围一般是一个城市。可以为一个或几个单位所有，也可以是一种公用设施，用来将多个局域网进行互连。</li><li><strong>局域网 LAN </strong>：</li><li><strong>个人区域网 PAN</strong>：把属于个人的设备用无线技术连接起来</li></ul></li><li>按网络使用分类：<ul><li><strong>公用网</strong>(public network)</li><li><strong>专用网</strong>(private network)</li></ul></li><li><strong>用来把用户接入到互联网的网络</strong>：<ul><li><strong>接入网 AN</strong>：又称<strong>本地接入网</strong>或<strong>居民接入网</strong>。</li></ul></li></ul><h4 id="计算机网络的性能">1.6 计算机网络的性能</h4><h5 id="性能指标">1.6.1 性能指标</h5><ul><li><strong>速率</strong>：数据传送速率，也成为<strong>数据率</strong>或<strong>比特率</strong>。提到网络速率，往往指<strong>额定速率</strong>，而非运行速率。单位 bps 。</li><li><strong>带宽</strong>：<ul><li><strong>信号具有的频带宽度</strong>，单位是<strong>赫兹</strong>，表示<strong>某信道允许通过的信号频带范围</strong>。</li><li>网络中某通道传输数据的效率，即<strong>最高数据率</strong>，单位是 bps 。</li></ul></li><li><strong>吞吐量</strong>：表示单位时间内通过某个网络的实际数据量</li><li><strong>时延</strong>：数据从网络一端传送到另一端的时间，组成：<ul><li><strong>发送时延</strong>：主机或路由器发送数据帧所需时间</li><li><strong>处理时延</strong>：</li><li><strong>排队时延</strong>：数据帧进入路由器后需排队等待处理，等待的时间成为排队时延</li><li><strong>传播时延</strong>：信道中传播的时间</li></ul></li></ul><p><span class="math display">\[传播时延=\frac{信道长度(m)}{电磁波在信道上传播速率(m/s)}\]</span></p><ul><li><strong>时延带宽积</strong>： 传播时延与带宽乘积</li><li><strong>往返时间 RTT </strong>：数据在信道中往返一次所需时间</li><li><strong>利用率</strong>：</li></ul><p><span class="math display">\[D=\frac{D_0}{1-U}\]</span></p><h4 id="计算机网络体系结构">1.7 计算机网络体系结构</h4><h5 id="osi-七层协议">1.7.1 OSI 七层协议</h5><ul><li><strong>物理层</strong>：管理通信设备和网络媒体之间的互联互通，<strong>规范</strong>链接的电气和功能<strong>规格</strong>。</li><li><strong>数据链路层</strong>：<strong>通过物理链接提供数据传输链路</strong>。</li><li><strong>网络层</strong>： 在两终端之间进行<strong>路径选择</strong>。</li><li><strong>传输层</strong>：负责网络中<strong>端到端的网络通信</strong>，为虚拟电路的建立、维护、终止，传输故障检测及恢复，以及信息流的控制提供机制。</li><li><strong>会话层</strong>：<strong>创建</strong>、<strong>管理</strong>和<strong>维护</strong>会话。同步表示层实体间的会话并<strong>管理其间的数据交换</strong>。提供高效的<strong>数据传输</strong>、<strong>服务类别</strong>以及会话、演示及应用层的<strong>异常报告功能</strong>。</li><li><strong>演示层</strong>：保证不同系统的信息交换，涉及<strong>数据编码</strong>、<strong>格式转换</strong>、<strong>数据加密</strong>。将多种数据格式转化成通信中采用的标准表示形式。</li><li><strong>应用层</strong>：OSI 协议最高层，离用户最近，<strong>为用户应用程序提供网络服务</strong>，不为其它层提供服务。</li></ul><h5 id="五层协议的体系结构">1.7.2 五层协议的体系结构</h5><ul><li><strong>应用层</strong>：通过进程间的交互来完成特定网络应用，交互数据称为报文。不同网络应用需要有不同的应用层协议。</li><li><strong>运输层</strong>：主要使用两种协议： <strong>TCP、UDP</strong> 。</li><li><strong>网络层</strong>：把运输层产生的报文段或数据封装成<strong>包</strong>或<strong>分组</strong>进行传送。由于网络层使用 IP 协议，因此分组也叫 <strong>IP 数据报</strong>。</li><li><strong>数据链路层</strong>：将网络层交下来的 <strong>IP 数据报</strong>组装成帧，每一帧包括数据和必要的控制信息。</li><li><strong>物理层</strong>：上传数据单位为比特。</li></ul><h5 id="tcpip-四层协议">1.7.3 TCP/IP 四层协议</h5><p><img src="https://raw.githubusercontent.com/mlger/Pict/main/202309111635872.png" /></p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相信未来</title>
      <link href="/2023/07/31/%E7%9B%B8%E4%BF%A1%E6%9C%AA%E6%9D%A5/"/>
      <url>/2023/07/31/%E7%9B%B8%E4%BF%A1%E6%9C%AA%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<p><em>作者：食指</em></p><p>当蜘蛛网无情地查封了我的炉台，</p><p>当灰烬的余烟叹息着贫困的悲哀，</p><p>我依然固执地铺平失望的灰烬，</p><p>用美丽的雪花写下：相信未来。</p><p>​</p><p>当我的紫葡萄化为深秋的露水，</p><p>当我的鲜花依偎在别人的情怀，</p><p>我依然固执地用凝霜的枯藤，</p><p>在凄凉的大地上写下：相信未来。</p><p>​</p><p>我要用手指那涌向天边的排浪，</p><p>我要用手掌 那托起太阳的大海，</p><p>摇曳着曙光那支温暖漂亮的笔杆，</p><p>用孩子的笔体写下：相信未来。</p><p>​</p><p>我之所以坚定地相信未来，</p><p>是我相信未来人们的眼睛——</p><p>她有拨开历史风尘的睫毛，</p><p>她有看透岁月篇章的瞳孔。</p><p>​</p><p>不管人们对于我们腐烂的皮肉，</p><p>那些迷途的惆怅，失败的苦痛，</p><p>是寄予感动的热泪，深切的同情，</p><p>还是给以轻蔑的微笑，辛辣的嘲讽。</p><p>​</p><p>我坚信人们对于我们的脊骨，</p><p>那无数次地探索、迷途、失败和成功，</p><p>一定会给予热情、客观、公正的评定，</p><p>是的，我焦急地等待着他们的评定。</p><p>​</p><p>朋友，坚定地相信未来吧，</p><p>相信不屈不挠的努力，</p><p>相信战胜死亡的年轻，</p><p><strong>相信未来，热爱生命。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 877 (Div. 2)</title>
      <link href="/2023/07/06/Codeforces%20Round%20877%20(Div.%202)/"/>
      <url>/2023/07/06/Codeforces%20Round%20877%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p>传送门：<a href="https://codeforces.com/contest/1838">Codeforces Round 877 (Div. 2)</a></p><h5 id="a.-blackboard-list">A. Blackboard List</h5><p><strong>题意：</strong></p><p>​ 给定包含两个数字的初始，然后进行 <span class="math inline">\(n-2\)</span> 次操作，每次操作从序列中取出两个数字（不能取同一个），将其差之绝对值加入序列，最终得到一长度为 <span class="math inline">\(n\)</span> 的序列。</p><p>​ 现给定最终序列（乱序）， 求最初始数字之一。</p><p><strong>题解：</strong></p><p>​ 由于新加入数字必为非负数，因此序列中的负数必定是初始数字。</p><p>​ 若全为非负数，由于 <span class="math inline">\(|a-b|\leq|a|\)</span> 且 <span class="math inline">\(|a-b|\leq |b|\)</span> ，因此最大数字必为初始数字。</p><h5 id="b.-minimize-permutation-subarrays">B. Minimize Permutation Subarrays</h5><p><strong>题意：</strong></p><p>​ 给定一 <span class="math inline">\(n\)</span> 的排列。交换两数字的位置，使得交换后序列中，能够成排列的连续子序列数目最少。</p><p><strong>题解：</strong></p><p>​ <span class="math inline">\(1\)</span> 与 <span class="math inline">\(2\)</span> 之间夹 <span class="math inline">\(n\)</span> ，这样能够使得数目恒为 <span class="math inline">\(1\)</span> ，是为最少。讨论即可</p><h5 id="c.-no-prime-differences">C. No Prime Differences</h5><p><strong>题意：</strong></p><p>​ 将 <span class="math inline">\(n*m\)</span> 之内的正整数排成一个 <span class="math inline">\(n*m\)</span> 矩阵，使得矩阵中任意两相邻元素差值的绝对值不为素数。</p><p><strong>题解：</strong></p><p>​ 先考虑 <span class="math inline">\(m\geq 5\)</span> 时，将 <span class="math inline">\(\{0, 1*n, 2*n, 3*n, ... (m-1)*n\}\)</span> 排成一列。以下是一种合适的构造方法。</p><p>​ 设 <span class="math inline">\(p=\lfloor \frac{m-1}{2}\rfloor\)</span> 考虑两个序列 <span class="math display">\[\{0, 1*n, 2*n, ...p*n \} \\\{(p+1)*n, (p+2)*n, ... (m-1)*n\}\]</span> ​ 然后将两序列合成（下面序列的元素依次插入上面序列的空隙）。</p><p>​ 若 <span class="math inline">\(m=4\)</span> ，则可构造为 <span class="math inline">\(\{1*n, 3*n, 0, 2*n\}\)</span></p><p>​ 设该序列为 <span class="math inline">\(A\)</span> ，则最终矩阵可构造为 <span class="math inline">\(p_{i, j}=i+A_j\)</span></p><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i += <span class="number">2</span>) &#123;</span><br><span class="line">        add[i] = now;</span><br><span class="line">        now += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i += <span class="number">2</span>) &#123;</span><br><span class="line">        add[i] = now;</span><br><span class="line">        now += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">4</span>) &#123;</span><br><span class="line">        add[<span class="number">0</span>] = n;</span><br><span class="line">        add[<span class="number">1</span>] = <span class="number">3</span> * n;</span><br><span class="line">        add[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        add[<span class="number">3</span>] = <span class="number">2</span> * n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) cout &lt;&lt; i + add[j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d.-bracket-walk">D. Bracket Walk</h5><p><strong>题意：</strong></p><p>​ 一括号序列，从最左侧出发可以随意向左右移动（不超边界），最终停在最右侧。途经符号构成一括号序列，若该括号序列合法，则称原序列 walkable 。</p><p>​ 现给定一括号序列 <span class="math inline">\(s\)</span> ， <span class="math inline">\(q\)</span> 次单点修改，要求求出每次单点修改后，序列是否 walkable 。</p><p><strong>题解：</strong></p><p>​ walkable 的必要条件首先是长度 <span class="math inline">\(n\)</span> 为偶数。</p><p>​ 其次构造一序列 <span class="math inline">\(A\)</span> ，包含所有的 <span class="math inline">\(i\)</span> ，使得</p><ul><li><p><span class="math inline">\(s_i=&#39;)&#39;\)</span> 且 <span class="math inline">\(i\)</span> 为奇数</p></li><li><p><span class="math inline">\(s_i=&#39;(&#39;\)</span> 且 <span class="math inline">\(i\)</span> 为偶数</p><ol type="1"><li>若 <span class="math inline">\(A\)</span> 为空，则显然圆括号序列为 <span class="math inline">\(()\)</span> 重复若干次，必定 walkable。</li><li>若 <span class="math inline">\(A\)</span> 非空，其中最小数字为奇数，则意味着序列开头为 <span class="math inline">\(()()()...())\)</span> ，必定非法</li><li>若 <span class="math inline">\(A\)</span> 非空，其中最大数字为偶数，则意味着序列末尾为 <span class="math inline">\((()()()\)</span> ，必定非法</li><li>剩余情况， <span class="math inline">\(A\)</span> 中最小数字 <span class="math inline">\(m\)</span> 为偶数， 最大数字 <span class="math inline">\(M\)</span> 为奇数，则 <span class="math inline">\(m, M\)</span> 之间符号数为偶数，其中左右括号奇偶性相同。则在 <span class="math inline">\(m-1,m\)</span> 这两个位置产生足够多的 <span class="math inline">\(((....\)</span> 来消除右侧的 <span class="math inline">\()\)</span>，然后在<span class="math inline">\(M,M+1\)</span> 两个位置产生对应数量的 <span class="math inline">\())\)</span> 补齐即可。合法。</li></ol></li></ul><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    string str;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="keyword">auto</span> check = [&amp;str](<span class="type">int</span> p) &#123;</span><br><span class="line">        <span class="built_in">return</span> ((str[p - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) ^ (p &amp; <span class="number">1</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(i)) s.<span class="built_in">insert</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 2 9</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        cin &gt;&gt; pos;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(pos)) s.<span class="built_in">erase</span>(pos);</span><br><span class="line">        <span class="keyword">else</span> s.<span class="built_in">insert</span>(pos);</span><br><span class="line">        str[pos - <span class="number">1</span>] = <span class="string">&#x27;(&#x27;</span> + <span class="string">&#x27;)&#x27;</span> - str[pos - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((*s.<span class="built_in">begin</span>() &amp; <span class="number">1</span>) || !(*s.<span class="built_in">rbegin</span>() &amp; <span class="number">1</span>)) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="e.-count-supersequences">E. Count Supersequences</h5><p><strong>题意：</strong></p><p>​ 求满足以下条件的 <span class="math inline">\(b\)</span> 序列个数：</p><ul><li><span class="math inline">\(b\)</span> 序列含 <span class="math inline">\(m\)</span> 个正整数，所有数字均在 <span class="math inline">\([1,k]\)</span> 内</li><li><span class="math inline">\(b\)</span> 序列删去若干个数，顺序不变，可以得到 <span class="math inline">\(a\)</span> 序列</li></ul><p><strong>题解：</strong></p><p>​ 考虑 <span class="math inline">\(dp\)</span></p><p>​ <span class="math inline">\(f[i][j]\)</span> 表示含 <span class="math inline">\(i\)</span> 个正整数删去后可得到长度为 <span class="math inline">\(j\)</span> 的 <span class="math inline">\(a\)</span> 序列前缀的序列数，则有如下转移方程： <span class="math display">\[f[i][j]=\begin{cases}f[i-1][j-1]+(k-1)*f[i-1][j],\ j&lt;n \\f[i-1][j-1]+k*f[i-1][j], \ j=n\end{cases}\]</span> ​ 发现该转移方程与 <span class="math inline">\(a\)</span> 无关。</p><p>​ 因此将 <span class="math inline">\(a\)</span> 序列设为 <span class="math inline">\(n\)</span> 个 <span class="math inline">\(1\)</span> ，然后作差法。</p><p>​ 最终答案为： <span class="math display">\[k^m-\sum_{i=0}^{n-1}\binom{m}{i}(k-1)^{m-i}\]</span> <strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) cin &gt;&gt; x;</span><br><span class="line">    <span class="keyword">auto</span> quick_pow = [&amp;mod](<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = <span class="number">1ll</span> * res * a % mod;</span><br><span class="line">            a = <span class="number">1ll</span> * a * a % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">quick_pow</span>(k, m);</span><br><span class="line">    <span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ans -= <span class="number">1ll</span> * now * <span class="built_in">quick_pow</span>(k - <span class="number">1</span>, m - i) % mod;</span><br><span class="line">        ans %= mod;</span><br><span class="line">        ans += mod;</span><br><span class="line">        ans %= mod;</span><br><span class="line">        now = <span class="number">1ll</span> * now * (m - (i+<span class="number">1</span>) + <span class="number">1</span>) % mod;</span><br><span class="line">        now = <span class="number">1ll</span> * now * <span class="built_in">quick_pow</span>((i+<span class="number">1</span>), mod - <span class="number">2</span>) % mod;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 150 (Div. 2)</title>
      <link href="/2023/07/03/Educational%20Codeforces%20Round%20150%20(Div.%202)/"/>
      <url>/2023/07/03/Educational%20Codeforces%20Round%20150%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p>传送门：<a href="https://codeforces.com/contest/1841">Educational Codeforces Round 150 (Rated for Div. 2)</a></p><h5 id="a.-game-with-board">A. Game with Board</h5><p><strong>题意：</strong></p><p>​ 给定初始序列为 <span class="math inline">\(n\)</span> 个 <span class="math inline">\(1\)</span> ，两人轮流行动，每次可以选择序列中若干个相同的数，剔除，并将他们的和加入序列。第一位无法行动的一方获胜。假设二人都绝对聪明，试问先手是否必胜。</p><p><strong>题解：</strong></p><p>​ 分类讨论一下：</p><ul><li><span class="math inline">\(2\leq n \leq 4\)</span>，有限轮模拟易得后手必胜。</li><li><span class="math inline">\(n\geq5\)</span> ，则先手取 <span class="math inline">\(n-2\)</span> 个 <span class="math inline">\(1\)</span>， 后手只能取 <span class="math inline">\(2\)</span> 个 <span class="math inline">\(1\)</span> ， 之后序列变为 <span class="math inline">\(\{n-2, 2\}\)</span> ，故先手必胜。</li></ul><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">5</span>) cout &lt;&lt; <span class="string">&quot;Alice&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Bob&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c.-ranom-numbers">C. Ranom Numbers</h5><p><strong>题意：</strong></p><p>​ A, B, C, D, E 分别代表 <span class="math inline">\(1, 10, 100, 1000, 10000\)</span> 。给定一由大写字母 ABCDE 组成的串，对于某一字符，若字符串后方有严格大于它的字符，则符号为负，否则为正。字符串权值为所有字母乘上符号的权值之和。</p><p>​ 现可以修改至多一字符，求可能的最大权值。</p><p><strong>题解：</strong></p><p>​ 据说 DP 和贪心均可，这里思路是 DP 。</p><p>​ 为了方便起见，先将字符串反转，规则也对应修正。</p><p>​ 然后设计状态： <span class="math inline">\(F[i][j][0/1]\)</span> 代表到第 <span class="math inline">\(i\)</span> 位，目前前缀最大值为 <span class="math inline">\(j\)</span> ，且已经/未修改的最大权值。 <span class="math inline">\(i\)</span> 这一位用滚动数组滚掉，然后枚举状态的转移即可。</p><p>​ 复杂度 <span class="math inline">\(O(nMK)\)</span> ，其中 <span class="math inline">\(M=5, K=2\)</span> 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    n = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> f[<span class="number">2</span>][<span class="number">5</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) f[<span class="number">0</span>][i][<span class="number">0</span>] = f[<span class="number">0</span>][i][<span class="number">1</span>] = -inf;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>, q = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c: s) &#123;</span><br><span class="line">        p ^= <span class="number">1</span>;</span><br><span class="line">        q ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) f[p][i][<span class="number">0</span>] = f[p][i][<span class="number">1</span>] = -inf;</span><br><span class="line">        <span class="type">int</span> x = c - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;   <span class="comment">//i-1位前缀最大</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt;= <span class="number">1</span>; t++) &#123;   <span class="comment">//</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; <span class="number">5</span>; y++) &#123;</span><br><span class="line">                    <span class="type">int</span> nt = t + (y != x);</span><br><span class="line">                    <span class="type">int</span> nj = <span class="built_in">max</span>(y, j);</span><br><span class="line">                    <span class="keyword">if</span> (nt &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                        f[p][nj][nt] = <span class="built_in">max</span>(f[p][nj][nt], f[q][j][t] + (y == nj ? digit[y] : -digit[y]));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = -inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[p][i][<span class="number">0</span>]);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[p][i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d.-pairs-of-segments">D. Pairs of Segments</h5><p><strong>题意：</strong></p><p>​ 给定 <span class="math inline">\(n\)</span> 条线段，用区间表示 <span class="math inline">\([l,r]\)</span> 。若 <span class="math inline">\(n\)</span> 为偶数，且可以将 <span class="math inline">\(n\)</span> 条线段分为 <span class="math inline">\(\frac{n}{2}\)</span> 对， 每一对线段相交， 不成一对的线段相交，则称其 <strong>beautiful</strong> 。现问至少删去多少线段，使得剩下的线段可以 <strong>beautiful</strong> 。</p><p><strong>题解：</strong></p><p>​ <span class="math inline">\(n\)</span> 比较小。一开始以为是 <span class="math inline">\(dp\)</span> 但怎么都消除不了后效性。实际解法是——直接暴力。</p><p>​ 首先考虑两对线段，共四条。不成对线段不相交的等价条件可以表示为： 成对线段取并集，所得两条线段不相交。</p><p>​ 因此可以直接求出 <span class="math inline">\(C_n^2\)</span> 对线段中，相交对的并集。然后找出尽量多的并线段，使其互不相交即可。互不相交可以天然保证每条线段至多用了一次。求不相交线段数目，这里用了动态开点线段树。</p><p>​ 复杂度 <span class="math inline">\(O(n^2logn)\)</span> 。</p><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> lc[N &lt;&lt; <span class="number">4</span>], rc[N &lt;&lt; <span class="number">4</span>], dat[N &lt;&lt; <span class="number">4</span>], cnt;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) p = ++cnt;</span><br><span class="line">    dat[p] = <span class="built_in">max</span>(dat[p], val);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= mid) <span class="built_in">update</span>(lc[p], l, mid, k, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(rc[p], mid + <span class="number">1</span>, r, k, val);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p || u &gt; v) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= l &amp;&amp; r &lt;= v) <span class="keyword">return</span> dat[p];</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= mid) ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(lc[p], l, mid, u, v));</span><br><span class="line">    <span class="keyword">if</span> (v &gt; mid) ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(rc[p], mid + <span class="number">1</span>, r, u, v));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; <span class="built_in">Line</span>(n);</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; Uline;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; Line[i].first &gt;&gt; Line[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> check = [](<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(a.first, b.first) &lt;= <span class="built_in">min</span>(a.second, b.second);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> uni = [](<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mp</span>(<span class="built_in">min</span>(a.first, b.first), <span class="built_in">max</span>(a.second, b.second));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">check</span>(Line[i], Line[j])) <span class="keyword">continue</span>;</span><br><span class="line">            Uline.<span class="built_in">pb</span>(<span class="built_in">uni</span>(Line[i], Line[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> cmp = [](<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">sort</span>(Uline.<span class="built_in">begin</span>(), Uline.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, rt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> line: Uline) &#123;</span><br><span class="line">        <span class="type">int</span> rem = <span class="built_in">query</span>(rt, <span class="number">-1</span>, inf, <span class="number">-1</span>, line.first - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">update</span>(rt, <span class="number">-1</span>, inf, line.second, rem + <span class="number">1</span>);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, rem + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n - (ans &lt;&lt; <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h5 id="e.-fill-the-matrix">E. Fill the Matrix</h5><p><strong>题意：</strong></p><p>​ 给定一 <span class="math inline">\(n*n\)</span> 的矩阵，其中第 <span class="math inline">\(i\)</span> 列的第 <span class="math inline">\(1-a_i\)</span> 行为黑格， <span class="math inline">\(a_i-n\)</span> 行为白格，仅白格可以填数。当一个格填数 <span class="math inline">\(x\)</span> 且其正右侧格填数 <span class="math inline">\(x+1\)</span> 时，贡献一 beauty 。填入 <span class="math inline">\(1-m\)</span> 共 <span class="math inline">\(m\)</span> 个数，求最大 beauty 值。</p><p><strong>题解：</strong></p><p>​ 看起来似乎比其他几道好想很多。上层所有线段都是下层线段的子集，因此从最底层线段开始枚举，填数，分裂即可。</p><p>​ 这里还是用的线段树。注意细节。</p><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> dat[N &lt;&lt; <span class="number">2</span>], a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> (<span class="type">void</span>) (dat[p] = a[l]);</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    dat[p] = <span class="built_in">min</span>(dat[p &lt;&lt; <span class="number">1</span>], dat[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= l &amp;&amp; r &lt;= v) <span class="keyword">return</span> dat[p];</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, ans = N;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= mid) ans = <span class="built_in">min</span>(ans, <span class="built_in">ask</span>(p &lt;&lt; <span class="number">1</span>, l, mid, u, v));</span><br><span class="line">    <span class="keyword">if</span> (v &gt; mid) ans = <span class="built_in">min</span>(ans, <span class="built_in">ask</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, u, v));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">pos</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        a[i] = n - a[i];</span><br><span class="line">        pos[a[i]].<span class="built_in">pb</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//pos[i] 值为i的位置集合(补上界n+1)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        pos[i].<span class="built_in">pb</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">sort</span>(pos[i].<span class="built_in">begin</span>(), pos[i].<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="type">int</span> l, r, pre_min;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">node</span>(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pre_min) : <span class="built_in">l</span>(l), <span class="built_in">r</span>(r), <span class="built_in">pre_min</span>(pre_min) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node X) <span class="type">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>-&gt;r - <span class="keyword">this</span>-&gt;l &lt; X.r - X.l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Ask(l, r) ask(1, 1, n, l, r)</span></span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">node</span>(<span class="number">1</span>, n, <span class="number">0</span>));</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> p = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (p.l == p.r) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> min_num = <span class="built_in">Ask</span>(p.l, p.r);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1ll</span> * (min_num - p.pre_min) * (p.r - p.l + <span class="number">1</span>) &gt; m) &#123;</span><br><span class="line">            ans += (m / (p.r - p.l + <span class="number">1</span>) * (p.r - p.l)) + <span class="built_in">max</span>(<span class="number">0ll</span>, m % (p.r - p.l + <span class="number">1</span>) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            m -= <span class="number">1ll</span> * (min_num - p.pre_min) * (p.r - p.l + <span class="number">1</span>);</span><br><span class="line">            ans += <span class="number">1ll</span> * (min_num - p.pre_min) * (p.r - p.l);</span><br><span class="line">            <span class="type">int</span> L = std::<span class="built_in">lower_bound</span>(pos[min_num].<span class="built_in">begin</span>(), pos[min_num].<span class="built_in">end</span>(), p.l) - pos[min_num].<span class="built_in">begin</span>();</span><br><span class="line">            <span class="type">int</span> R = std::<span class="built_in">upper_bound</span>(pos[min_num].<span class="built_in">begin</span>(), pos[min_num].<span class="built_in">end</span>(), p.r) - pos[min_num].<span class="built_in">begin</span>();</span><br><span class="line">            <span class="type">int</span> pre_l = p.l;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = L; i &lt; R; pre_l = pos[min_num][i] + <span class="number">1</span>, i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pre_l &lt; pos[min_num][i]) q.<span class="built_in">push</span>(<span class="built_in">node</span>(pre_l, pos[min_num][i] - <span class="number">1</span>, min_num));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pre_l &lt;= p.r) q.<span class="built_in">push</span>(<span class="built_in">node</span>(pre_l, p.r, min_num));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 879 (Div. 2)</title>
      <link href="/2023/07/01/Codeforces%20Round%20879%20(Div.%202)/"/>
      <url>/2023/07/01/Codeforces%20Round%20879%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p>传送门：<a href="https://codeforces.com/contest/1834">Codeforces Round 879 (Div. 2)</a></p><p>难度适中，但菜鸡依旧。</p><h6 id="b.-maximum-strength">B. Maximum Strength</h6><p><strong>题意：</strong></p><p>​ <span class="math inline">\([l,r]\)</span> 之间选两个数，使得十进制表示下各个位数的差值绝对值之和最大，位数不同则较小数补前导 <span class="math inline">\(0\)</span> 对齐。</p><p><strong>题解：</strong></p><p>​ 设 <span class="math inline">\(l\)</span> 和 <span class="math inline">\(r\)</span> 位数分别为 <span class="math inline">\(n\)</span> 和 <span class="math inline">\(m\)</span> ，取的数字为 <span class="math inline">\(x&lt;y\)</span> ，分情况讨论。</p><ul><li>若 <span class="math inline">\(n&lt;m\)</span> ，则最优情况为 <span class="math inline">\(x\)</span> 取 <span class="math inline">\(m-1\)</span> 个 <span class="math inline">\(9\)</span> , <span class="math inline">\(y\)</span> 保留 <span class="math inline">\(r\)</span> 的最高位，剩余位为 <span class="math inline">\(0\)</span></li><li>若 <span class="math inline">\(n=m\)</span> ，则除去相同前缀，然后 <span class="math inline">\(y\)</span> 保留最高位，剩余位为 <span class="math inline">\(0\)</span> ， <span class="math inline">\(x\)</span> 保留最高位，剩余位为 <span class="math inline">\(9\)</span> 即可。</li></ul><p><strong>code：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    int n, m;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    n = s1.length();</span><br><span class="line">    m = s2.length();</span><br><span class="line">    if (n &lt; m) &#123;</span><br><span class="line">        cout &lt;&lt; (s2[0] - &#x27;0&#x27;) + (m - 1) * 9 &lt;&lt; endl;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        int ans = 0;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            if (s1[i] == s2[i]) continue;</span><br><span class="line">            cout &lt;&lt; s2[i] - s1[i] + (n - i - 1) * 9 &lt;&lt; endl;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; 0 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="c.-game-with-reversing">C. Game with Reversing</h6><p><strong>题意：</strong></p><p>​ 给定两等长串 <span class="math inline">\(S\)</span> 和 <span class="math inline">\(T\)</span> ， Alice 和 Bob 轮流操作。Alice 每次可以替换一个字符，Bob 每次可以翻转一个串， 当两串相同时，停止操作。Alice 希望操作次数尽量少， Bob 希望操作次数尽量多， 求两个人都采取最优策略的情况下，实际游戏操作次数。</p><p><strong>题解：</strong></p><p>​ 解释起来比较啰嗦，这里简述。</p><p>​ 实际上 Bob 每轮操作都是相同的，因此可以假设 Bob 只翻转一个字符串 <span class="math inline">\(T\)</span> 。</p><p>​ 对 Alice 来说，则可以有两种选择，将 <span class="math inline">\(S\)</span> 变为 <span class="math inline">\(T\)</span> 或 <span class="math inline">\(rev(T)\)</span> 。二者最小步数都容易 <span class="math inline">\(O(n)\)</span> 求出。 最后根据实际的奇偶性补齐 Bob 的操作数即可。</p><p><strong>code：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    int ans1 = 0, ans2 = 0;</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        if (s1[i] != s2[i]) ++ans1;</span><br><span class="line">        if (s1[i] != s2[n - i - 1]) ++ans2;</span><br><span class="line">    &#125;</span><br><span class="line">    if (ans1 &amp; 1) ans1 = ans1 * 2 - 1;</span><br><span class="line">    else ans1 = ans1 * 2;</span><br><span class="line">    if (ans2 &amp; 1) ans2 = ans2 * 2;</span><br><span class="line">    else if (ans2 == 0) ans2 = 2;</span><br><span class="line">    else ans2 = ans2 * 2 - 1;</span><br><span class="line">    cout &lt;&lt; min(ans1, ans2) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="d.-survey-in-class">D. Survey in Class</h6><p><strong>题意：</strong></p><p>​ <span class="math inline">\(n\)</span> 位学生，<span class="math inline">\(m\)</span> 个知识点。第 <span class="math inline">\(i\)</span> 个学生学习了 <span class="math inline">\([l_i, r_i]\)</span> 个知识点。</p><p>​ 上课老师提问，每个问题至多提问一次。初始同学分数均为 <span class="math inline">\(0\)</span> ，答对加一分，答错减一分，分数可为负。求最大分差。</p><p><strong>题解：</strong></p><p>​ 对于线段 <span class="math inline">\([l_1, r_1]\)</span> 和线段 <span class="math inline">\([l_2,r_2]\)</span> ，设 <span class="math inline">\(r_1&lt;r_2\)</span> ，则分三种情况讨论：</p><ul><li><span class="math inline">\(r_1&lt;l_2\)</span> ，则最大差值可以分别来源于两线段整段，即 <span class="math inline">\(max(r_1-l_1+1, r_2-l_2+1)\)</span> ；</li><li><span class="math inline">\(l_1\leq l_2\leq r_1 \leq r_2\)</span>，则最大差值来源于二者分别对交集取补，即 <span class="math inline">\(max(r_2-r_1, l_2-l_1)\)</span> ；</li><li><span class="math inline">\(l_2\leq l_1 \leq r_1 \leq r_2\)</span> ，包含关系，最大差值来源于长线段对短线段取补，即 <span class="math inline">\((r_2-l_2+1)-(r_1-l_1+1)\)</span> 。</li></ul><p>​ 将每条线段按右端点排序，枚举线段 <span class="math inline">\([l_2,r_2]\)</span> ， 目标是找出对应的 <span class="math inline">\([l_1, r_1]\)</span> ， 三种情况分别需要求：</p><ul><li>右端点小于 <span class="math inline">\(l_2\)</span> 的直线中，<span class="math inline">\(r-l+1\)</span> 的最大值</li><li>相交直线中， <span class="math inline">\(r\)</span> 的最小值以及 <span class="math inline">\(l\)</span> 的最小值</li><li>左端点大于等于 <span class="math inline">\(l_2\)</span> 的直线中， <span class="math inline">\(r-l+1\)</span> 的最小值</li></ul><p>​ 四个值四棵动态开点线段树维护即可。</p><p><strong>code：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">#define inf 0x7fffffff</span><br><span class="line">int cnt = 0;</span><br><span class="line">const int N = 4e5 + 5;</span><br><span class="line">int dat[N &lt;&lt; 5], lc[N &lt;&lt; 5], rc[N &lt;&lt; 5];</span><br><span class="line"></span><br><span class="line">void update(int &amp;p, int l, int r, int k, int val) &#123;</span><br><span class="line">    if (!p) p = ++cnt, dat[p] = inf;</span><br><span class="line">    if (l == r) return (void) (dat[p] = min(dat[p], val));</span><br><span class="line">    int mid = l + r &gt;&gt; 1;</span><br><span class="line">    if (k &lt;= mid) update(lc[p], l, mid, k, val);</span><br><span class="line">    else update(rc[p], mid + 1, r, k, val);</span><br><span class="line">    dat[p] = inf;</span><br><span class="line">    if (lc[p]) dat[p] = min(dat[p], dat[lc[p]]);</span><br><span class="line">    if (rc[p]) dat[p] = min(dat[p], dat[rc[p]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline int query(int p, int l, int r, int u, int v) &#123;</span><br><span class="line">    if (!p) return inf;</span><br><span class="line">    if (u &lt;= l &amp;&amp; r &lt;= v) return dat[p];</span><br><span class="line">    int mid = l + r &gt;&gt; 1, res = inf;</span><br><span class="line">    if (u &lt;= mid) res = min(res, query(lc[p], l, mid, u, v));</span><br><span class="line">    if (v &gt; mid) res = min(res, query(rc[p], mid + 1, r, u, v));</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool cmp(pair&lt;int, int&gt; A, pair&lt;int, int&gt; B) &#123;</span><br><span class="line">    return A.second == B.second ? A.first &lt; B.first : A.second &lt; B.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">#define mp(x, y) make_pair(x, y)</span><br><span class="line">    int t1 = 0, t2 = 0, t3 = 0, t4 = 0;</span><br><span class="line">    int n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;pair&lt;int, int&gt; &gt; Stu(n);</span><br><span class="line">    for (int i = 0, l, r; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        Stu[i] = mp(l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(Stu.begin(), Stu.end(), cmp);</span><br><span class="line">    int ans = 0;</span><br><span class="line">    for (auto stu: Stu) &#123;</span><br><span class="line">        int l = stu.first, r = stu.second;</span><br><span class="line">        int rem;</span><br><span class="line">        rem = -query(t1, 0, m, 0, l - 1);</span><br><span class="line">        if (rem != -inf) ans = max(ans, max(rem &lt;&lt; 1, (r - l + 1) &lt;&lt; 1));</span><br><span class="line">        update(t1, 0, m, r, l - r - 1);</span><br><span class="line"></span><br><span class="line">        rem = query(t2, 0, m, l, r);</span><br><span class="line">        if (rem != inf) ans = max(ans, (r - rem) &lt;&lt; 1);</span><br><span class="line">        update(t2, 0, m, r, r);</span><br><span class="line"></span><br><span class="line">        rem = query(t3, 0, m, l, r);</span><br><span class="line">        if (rem != inf) ans = max(ans, (l - rem) &lt;&lt; 1);</span><br><span class="line">        update(t3, 0, m, r, l);</span><br><span class="line"></span><br><span class="line">        rem = query(t4, 0, m, l, r);</span><br><span class="line">        if (rem != inf) ans = max(ans, ((r - l + 1) - rem) &lt;&lt; 1);</span><br><span class="line">        update(t4, 0, m, l, r - l + 1);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    while (T--) &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="e.-mex-of-lcm">E. MEX of LCM</h5><p><strong>题意：</strong></p><p>​ 题如其名。给定 <span class="math inline">\(n\)</span> 个数，则对应的有 <span class="math inline">\(C_n^2\)</span> 个连续子序列。求所有子序列数值 <span class="math inline">\(lcm\)</span> 的 <span class="math inline">\(Mex\)</span> 。</p><p><strong>题解：</strong></p><p>​ 同样是利用好值域。 对于区间 <span class="math inline">\([l,r]\)</span> ，固定住右端点 <span class="math inline">\(r\)</span> ，则至多还剩下 <span class="math inline">\(r\)</span> 个左端点，对应 <span class="math inline">\(r\)</span> 个区间。这 <span class="math inline">\(r\)</span> 个区间有多少 <span class="math inline">\(lcm\)</span> 值？从 <span class="math inline">\(l=r\)</span> 开始，每次向左添加一个数， <span class="math inline">\(lcm\)</span> 要么不变， 要么至少翻一倍，因此 <span class="math inline">\(lcm\)</span> 值的数目是 <span class="math inline">\(log\)</span> 级别的。因此整个序列所有 <span class="math inline">\(lcm\)</span> 值的数目不超过 <span class="math inline">\(nlogn\)</span> ，迭代求出然后求 <span class="math inline">\(Mex\)</span> 即可。复杂度 <span class="math inline">\(O(nlogn)\)</span></p><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">lcm</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x, <span class="type">long</span> <span class="type">long</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / __gcd(x, y) * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> inf = <span class="number">1ll</span> * n * n + <span class="number">2</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">num</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; num[i];</span><br><span class="line">    set&lt;<span class="type">long</span> <span class="type">long</span>&gt; s;<span class="comment">//以r-1为右端点的lcm序列</span></span><br><span class="line">    set&lt;<span class="type">long</span> <span class="type">long</span>&gt; rem; <span class="comment">//以r为右端点的lcm序列</span></span><br><span class="line">    set&lt;<span class="type">long</span> <span class="type">long</span>&gt; ans;<span class="comment">//所有lcm序列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x: num) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y: s) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> p = <span class="built_in">lcm</span>(y, x);</span><br><span class="line">            <span class="keyword">if</span> (p &lt;= inf) rem.<span class="built_in">insert</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        rem.<span class="built_in">insert</span>(x);</span><br><span class="line">        s.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y: rem) s.<span class="built_in">insert</span>(y);</span><br><span class="line">        rem.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y: s) ans.<span class="built_in">insert</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> now = <span class="number">1</span>;</span><br><span class="line">    ans.<span class="built_in">insert</span>(inf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x: ans) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x != now) &#123;</span><br><span class="line">            cout &lt;&lt; now &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++now;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数理思维</title>
      <link href="/2023/07/01/%E6%95%B0%E7%90%86%E6%80%9D%E7%BB%B4/"/>
      <url>/2023/07/01/%E6%95%B0%E7%90%86%E6%80%9D%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<h6 id="一决不能把任何我没有明确地认识其为真的东西当作真的加以接受也就是说小心避免仓促的判断和偏见只把那些十分清楚明白地呈现在我的心智之前使我根本无法怀疑的东西放进我的判断之中">一、“决不能把任何我没有明确地认识其为真的东西当作真的加以接受，也就是说，小心避免仓促的判断和偏见，只把那些十分清楚明白地呈现在我的心智之前，使我根本无法怀疑的东西放进我的判断之中”。</h6><p>​ 在数理逻辑论证推理中，务必做到毫无破绽。防范”千里之堤，溃于蚁穴“的局面。更直观地来说，论证必须有从底层起始的依据。</p><p>​ 在日常生活中，这一条也同样适用。我们处在一个信息爆炸的时代，很多时候困扰我们的并不是信息资源的匮乏，而是信息茧房的拘束以及信息泛滥的迷茫。保持理性，对信息加以筛选，过滤掉无依据的信息。</p><h6 id="二把我所考察的每一个难题都尽可能地分成细小的部分直到可以而且适于加以圆满解决的程度为止">二、“把我所考察的每一个难题，都尽可能地分成细小的部分，直到可以而且适于加以圆满解决的程度为止”。</h6><p>​ 比较典型的分而治之思想。当整体带有规律性时，局部往往也具有与整体相同或相似的规律性，通过不断地划分，最终将问题转化为一个个显然或已解决的子问题。从个别、特殊到一般的方法。</p><h6 id="三按照次序引导我的思想以便以最简单最容易认识的对象开始一点一点上升到对复杂的对象的认识即便是那些彼此间没有自然的先后次序的对象我也要给它们设定一个次序">三、“按照次序引导我的思想，以便以最简单最容易认识的对象开始，一点一点上升到对复杂的对象的认识，即便是那些彼此间没有自然的先后次序的对象，我也要给它们设定一个次序”。</h6><p>​ 从易到难，从简单到复杂地进行分析、解决，而不至于迷乱。</p><h6 id="四把一切情形尽量完全地列举出来尽量普遍地加以审视使我确信毫无遗漏">四、“把一切情形尽量完全地列举出来，尽量普遍地加以审视，使我确信毫无遗漏。”</h6><p>​ 如其所言，思维缜密，考虑周全，确保推理覆盖到所有情况。</p><p>摘自： 笛卡尔 《方法论》</p><p>​</p><p>​</p><p><code>人生没有目的，只有过程，所谓的终极目的是虚无的。——人的情况和树相同。它愈想开向高处和明亮处，它的根愈要向下，向泥土，向黑暗处，向深处，向恶——千万不要忘记。我们飞翔得越高，我们在那些不能飞翔的人眼中的形象越是渺小。</code></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT 指北</title>
      <link href="/2023/06/30/ChatGPT%20%E6%8C%87%E5%8C%97/"/>
      <url>/2023/06/30/ChatGPT%20%E6%8C%87%E5%8C%97/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e77c171be0df0bdf254d453b5eb9c20450d8d90b124d0ba38c424a3d9319e803">578d5c17fdb0be81f91dae08d76a8b9d310fe713a3967a08677820d492351d4d024aaf5584a3de2eee6cfd36b7caa22dcb57ea376e2f5f272122ddccb3ef5718e8b4395d8528506139438dbdc50e760c8385264463a130773815b98f639ebb95b7c19036319ef6669196524db556c1c22e1468f050b34e4c2437040736f001e05cd9d7087c0a5cbdaf43b925a0756e834b0bb1d5047cc581445077b411d3f1221d82e29b8ca6f09c7942a2a924b7b20997e335cad0c7f57c46a1cc7c78a281aea4100a3dc536fd3937a11099c413737825992aecc546f76ee1f94da36cceb1ca94f9f104336b8f14d3ec05a645e773f7a57684c2e6d1fbdd737a48fab2a52c8a3133c578ca36eb9c66bd3eec55c9de37d2f18abc51c1816f06a2146c6553055c5d813283c88d98debdb822011fe89bd37da6b22f3d49a1ebfd085c4101bc208da2ba0ab0daba3298a58259fb770b158e5a029d13930d0a08244332b40b58194fa163b7d892291b1375da2b516bafa1ddab458f01138fcdd145dcbd73208f2b9c85b5522e2f32343e8d65166e5529a460072d62e784206551ac86ea609bc4820684693fa09f52209181537dc8cc996e9e0474d696535475062d80cc390885e3d9168f08bc8a1e791d55d2fe70b58e4195c8e8c21254cd47a5a847894837ed66955d6e25b1041205b21b07ea4ad522df2504578cbf22237a9a7cdd5d2d80240e203985ed48774b0cbb2f9a9ec2b79982b91b2a5b67dac9efd55540db16e7fe9b06c8fbeba14961848a1383c8199cd42ceed4585be5eb8f7d91d6ce3f5ad09c37b38539f37ab4ccf7a56e0c7f5914ab12e8ede57f7a60434b2139c34f8b5598098308ce6b728f9717a6f8c936c11da0088db8a065cb9031e21e90362966b64c04a190c42deb736d2883fece0305cb4c9e240ad7ab989e574b2d9f199bbfad3a15070474ae3bd2539c11cb30fca6e7f3576f9505573ac4929b7f185c9a5ed8044be23eb53a0f9e90cefe4c4f3c89bdb92c1c19bd710ab7d499d77e99a241ace6b06ee992b80e5a1e4a7b1456ee7dc8f08b25c6a7bb08ce374a2d66b701c76c22a07b3c2147bebe0c6ecf317ded218f7c05cf1fec152218af97981bff8a92177f3231fc8e1d2e02220a65eb0c649efa031797ba07ba8b854399f0a3b867ab207ee48ad0676bda4857f0cf5f60619c5eb1c55027fc3876f003179e2f52cca7a329797455e32b6e2ae02e137194c10cac8c59ca443ddf4d40a3e5b1c10a8e768af4eea9a3ffdb17fe82c3a2703582519aabe5416fd03bd66ba77650e80d458326c0902cc2cec8621bbf60baeaffb072829715e2ddd827eed2c9166a999921445074aeac1e3c1cfdc877d480a5ae51a274be07cad6c7f4148a2939142449b03c06a41ed9f6993711df4ebeda25c6b428fd00c9e227ba1800cbae0deb2fefee4396f0225f02da14a0018742110776ceaf32b702d4b465d03aabf4728a34e9278a9290482fd6ce608cbff59b6123d097d6f2c6ce8d429a7b877baed651680c37bf3dbf9e4042eefc607cb4aec2153476b0986161354f4490109d86831fa8e24d03962219291de5ffab0a0d7bbd2e12f983fd36107bd4637059e076e7cc41170ede1bd4b481cda5ba3dfe36a585893689c363519093e9b913a892da2796720a5509576f2bc7029b68c1cfe060b2859d7c8e4f50c195ee950a177bf688612e41f17dceb7276216fe9ba341e50e955e173a930d12c56181a96226ce58aa4b5cb1bd9da59d14a9a4971f52ce3c45e98076cdc78af23196f98b41cade0bbf7cced8a91106d2e131b03dd6c9fc9a06a67c554da66e9e27e646d01ea4a7a36d2a44c78f6aea59cfa585365ec46bf53bbbd6c771ecf3434fee972df074f62915c95eccb33609ed58d5055d1f8089615e18cf825efd88fab576d8d3dce1c6e0fc8645a4907d6272c18995f0bcf806b0e7074986cf4fc630fee8be0aa7ee1a261a2f19668b8857bf229f85c0397d7842a77b94d6ac66ec8088b32ff686b06589f5079e75d0dfd920a7afd060128b4c1811724d98f52b7d17e2239c917d1b00682c3ca81ea7f104eb32a18b6d30a09269b13b0bc09666508554d59ef202476df5002610700ae59b21c77ca6bebfc67f6b0edbd844b3acbed980fdff18c4797e2519379ae266bfdcf0ae7ed7e6b3f346d736fd4d80ad93751a34c7330244638057b5588e1cead02b70bf97b9669ce0a0b415b87372604b0fcd2fb960d5a2dfd2c1796da4cf15cfea7d42c2262992b95f76680b9921934b160a65d804fef4e6b9c3e069d1bc1c78ebd62433e6c83d02af2a10072e534c8926e5cb7434e58108e1f681fa2b60d0f9be946867633446b2af2abcdcc172cebf1d518e625601666d694d86105e97c3b2ef4becda6c08761857f9f1ab2a487eb02b37c7fed67eac91bfe4bf9d30a9e159457dd0d6ae2bfcec43d48adfd731706fe878a63860954614b4ed2535cec33bb6c8d1261e2fffac2e8f353a12338166f25063df2061db75aeca2a0582f5953ef1eb5b964ca40f2401fa7c3866283dbf9927dd6a85bb6b0957c03b5f195f1f6c99cd4c4eedc4abede9350db2e676e93ed6840d0476247164e1c57dcea3fc1ffe8da5b72c2d79c269aadf7d1d80b3506ef4ee82882d467227d94552768e4fc31d7351d5f3168283d0b7f91bd0ad4faa41093993a6ec7a8fac80941253d45cfec6602bbc57f22525d4708d8ab912a5502fc9de3136c993e3ce0e1e89a1474b773c02aa37e6e9b4e2bea1bfd9a751036ba8ae198cb985ba7d70a606b47365ee5aba9fe4f9de5d3b9c4066a4a5f53411b6e44037d9a88f7957ad479dc6d3b81a16d93f2fda6628be1e1e61aa53741c17b1320b68f5d1248d263028f73bdfbd273389b3e73bd73109e55e4255fc98a1fd2c0f31f7b7653185629407aaa4a785015c51c1207d757ca4d85ae66033c2de46c6aa43bca0fdbecf8bc6f676f65561880f712b84f80154364383699d792e82eac733a1f62bf752cbddb05743256f2d69770525d83d055a2b1e5432b87a7c08a226f3419c41cbf1a809423e2a4e2a88f0c4173abd42da9703f037ab6fdf92075f4e2f3ad67b31c010541857a883a832ae40d34fe67db2e521adc2ef6c5c5284149c4714179c41c5c00ebb7728382e7013e180d3c74c087d5204ac1599e802b54e3d6631aea0851d8efde716425876300c75a2c5e5a39a8d12192479a9b068b6c8a5e4bdcdcfa48b35785f090928446ee3efc5e73a8446728ac8b6613d1fb5c03bbea92c0eb353b6ae3e0df4366f45b0d7319df5fd904c306ed21b6d60cea01a0c937f372640d5916795c2a0c476dd46f25443c1609eab4ecd73b7eab80806d67f4423b6001ad00c30e43ec395711e2b5b3221d052f6cc388387b00d933fba67d6a80596a426827ec59b586818c69454c6706199fa94eb0b313eef441a0ef9955c075780c4110be813eaca66e38dbb3464574c710f6f554d82ced5e94af1e919bbec66b372ed58448148fa4da65743690552eb9de5a02dd607e33b11bdd3a819bc74988d8251e45cfaaa9657649b3bf402f1b1f44dcbfef91ba5b979eebbba6381cbd44b8926bede03ca5cb45bbf1b37f088493b8334944c8538ce3adc5e4c870d96af1af745de89f15b687da579f5bb357f4ba29d64b57b35ab8021678e444ef6a73481c32ea5407694438d288dddc93c6d31dfd4d33cb7840e92bf7fffb8f13ecc95c06fffe63d5ba9cf84648400aa5630c7b66f376f8836a048c1cc12d8e372e5fe791bddff6b1115e7d958f3201b2889b0e3d4f89d5f166599a67a61f55eebc340c4dc30a289bc07fcd5d3cdb9ae99f3081f9e45a15a16230ba2acd874995b08c0b41a09bda390077dfd0be2c7d997b3a9212aaba3f6bc236e2f332030d147bf14ddbc0605152180e56592f8918393a891291b11db34373fe1752377a4443737f91f7fc16903a591bc97043ed8472984712ce7340fd67b15c3a7b9b78a86ed086c932af6d1d9a5372cb15e88162812c2abd5bf464881bc1e658bc66b360eb64d09c5ddc0d0e601b683a9800228d2492487b7a373e1dff5b4fa21d1d7a948f77995f2469ce7e8f72c9d68761423b905dc6755880555abaaa984b941dab8a2377d294dcf1a70701d64d20602af0453c24b260edb440f1b595ab5697088afbb646ebc93fdcd7967dadc688902e28b9b5f11061d11b5fdc36b950db46e840a8ba9b81913ce85b4423b05d496f26b69e87e435146ed9961a3e7f239421d033ceb6249bf5979eea5f7ad3f6c89e4d7335da882a0b8481707685463a8e35f8534905930ba5b1f1730cd4f2aa325a0f984160cde9ebe2d0ab89b4f65fbd19d7a6c7c971645d1a0de7f90f7f6d29f2f9c920bcef9b9353a6cdc77210a9560d09e352e54976c7ec16c8c30ae9bf4662750c8f9dbc2c0ce4594fd47b4508c1eeb6b2ac24e98d579b33be9c8ddf5d335d3f8583988145ba32edae769c750cb16126b332f410ba60a25bca8de616e309e4ed53c32e4c730f808f78902951155ed9dde44e5eac29137f08e1d41c96d859df07075ba5375fc144b5993454e38dd607e5456b8a8eb2cdaf4dbc641193155d75dd2efc31deee80d668efe2ef261b4e5c2437f66989fdf08f0b68e92f718b64b28d2832217984e852d0afd70b64cb2a1497965826458e6c4762ad07bb3e31ae67e2707a1ad740eb529d2ac696c85639a4c7be4be4789b1697d42d2da459757b8f15b92c34daaa7881cc02cee80a83c95b762e677f2ba069a0eb426f7e1abd8f892864a567e71a99e8bddea23c5c7ea8716b281693bcfe0ca338ffd45041116dd1c84edd9410c1997ae4c8ea3bb4436eef7d98a61d9b765de3b1a6ab6a7bd98f62fbc5014e26a68a87ba8cd56be483d1d49d18dd4c5ac9e75a53acdc0684f8083166aeb13a2c3257d6b51d6b18335e5d12b145ec1f30d28bb16cc11ace074ff87155c4a680da9276e3f18970f57a5e3093b876c63b83b47f23cc0ce2dbe893c98748f620d78a609def5f8cf66f9af6dbc14e7441e46a28873dc6fcbe9f354470607eab70f0830947fa4ea5ce2121e87740de79f43954c7698a3e51257680ceca49e8300d70ff1711d7e580da77c421eb0f9b1b9a4479655fc36cf536d392a5120807659cde2ec6cec0972b44b6a43b4c65135cf2ea135b5ebae531d111adc89f966e1ec0e1be9af889bcf13683c4a71d0f45aab0b04e0013a137bbc59d3c6f6c85402ae6faccc006b32415fe0f14e2cb483f5de8c5d81d1ce0b0ca9cdb792842d3e76a15fd49449124ca7eca6b01179680f8120983505201b75cadb9bfff7af098cec8be8aee79eef4015edd4e73dd5eb819d6b0b3cd212fc6db8e10866fccfd1a074543fbb13683b9a637fd9261c21d2968820cb3817bf3fa76185baf4a1202d332de02f103f19cad0771afc293606a605f0406552a3155fc56b14a77278350fc1e071e13eebc777a600a2d8f3d083d82545cc6f1587d8d517da71fbe141843b31ba1faa0c07c0382e4b36479c709676c69fac2b7215b263a2346d241f31ade8b5f6d34d4dacd41d6049b35a1f5a6b2815dc6ac78ecb85349d2b163cd5bcad6a10ae15a980cb24fe80cf7ae92fcc9aeda503986f2aa3cea74ce5005f761cee731f36efa7b3bcf01760655f89c658c9b763302d01d4a6a66f93426f70755eacb49617291170eabee33e92aa5fb0e83aa9b999f971298ba3cf384400b4c7134a1be5856e4be69e0d1956cfdbd9ad47b3cc812641c680a93ba528415bcbdf5066352354b726d16daf8d2668d27de82a4ae346e6e8780254f969b4cb1e2bedf50361d1e3636973cdf1259180e0619bbc3b60c596ae2a514ec630dffc3801ba1a776e4d020495733e728a8e0d06e265c67d26b54a3595847329c5162fb20c2fc848acbb013e47be6a366f8906036f1cab2a558228fd52d5f8546be243d533dd6a8e8395f0a004a5460f0efe3f08bbdf52c35bbf9c170dea8d98a85a022ec94e4ea7d223e1bdbe3300a66b13e2062005626b55cfd41621206bdc4082fa6d07f697f7ed20415426e984d2e0dd4426c85ac95613eb4dcc8328959f728b8a5271039413b42b6c7a10265ff77a17c6e261a08d23e70e4a25c958d41966f5590a046bb2e4f491c5c47b0dcd95755c11a397eb220ddb4b02c4495275ba3270c9a1e1a34bc968216996f15153286864d5188518895e524f08618af65f0c0fd8b9f8c4f1759bb413e98d0dd5bea0d2d239146dfdd8c5d1590647e3b6aca56bcd0fe44e9658fa099204afb653edaeadf11254e297cd781071c7937f2b34295d644fd87dc7d32d42ce04945d9111ed14e7463fa0f163e8dd0a225e7e383f092d64b344722fdb0891d8b093e313a2a91d5171224290965c989383ee05010221c9627b459a115c1b2cae87dead1e700e7cbc4bc7edc493a0b55c8a582f8d89544bc914efbaddf27710e50b89074b216a84abc196d921057bbe7902bc24bbf8e183065677373e9b9d3a53f2cb31a6bf67096dc937fc83672be3d7576d10cc79c523c513ccd10a56aa1d7a78eb762ea162aa8794f5fd9cda1e910da18ed3949f3b2c3e14283f8b1fb774827677dbe7c46fdcf26005ad0890a8f4edb929d8b0ca49a72fdf70085e2a3c80b31de891f188df98db6c4882d319513ddb94b19a17bd09648c4d195bfd5fecce45a01eb313dc870e0a0a80a57a2b15dbc17ef9a4d1a21947af88dc9641825316c89aae8e4766b095ed3ab7c98d3999c6013978a8bd5cdeaedfd1e3aec8594b62fa9ca02a50e366e626201f45e6816c721a6d1e84d0e511939339a04d0d901864abe81df51d3233aeb1878a241e835abd8114d1b54964e5f4dd7fc4a81ca9cc5f0a7faeb33430e1e28b9fe6090d55ea65cf0e5cacc1f5dce286907f5e8276474ce581f0d7e2f16791e59b2436fc79814c17cc093d194d0b2529c73468fe00d8f6c630e890aff4d381fcc66638ecd3f92d4cd6ded13b849ee3183ef9edb67e4460a06380002bce9c013f410aac44cb52ce4c9940947d53123e22f71a2fc448233c02c213692afdb8f0a2142dada9344e9660648e95881afc20bd89268fc8e99db7c65f57aea19406280d4609e7b333b6ea5e615e5d69067c64913060b706f2b7400954ac4a95765ec8eaedcb3a323030019f4069f3b0b2d115dfd7d3f9182e5132d0e6ae818be0adc253ae91fb89728e617bddbcb88ef36ba687dda0453d335a6f6accb0bec9b94eb7ddeaf78fb74b43f7f48edecab23a0e36d8944489995675b597542b043e19efc4389cfd5e5c0cfa9d9a7ffa1f191aff2c59141080af2f696f7a11005a728fbc0e20cb4f48cf0a65d5ca99fedbeb7cf39df737879f1a414bca337b22a69969045f119320b9a89f19ad3b909f4e680b1ba0329839834406786bba2c826ec74d5fd48133692afef1275a8e11226485312409cce9c64abb74ff4622998a178298e448c5e3829593b938fa43c82201b9207b629f74c698076510c398eaac3f4b0ce12b869a4806bf5b560b33c3b1d97dc51fe171112abfa86a4cddda227a759e4cdd7cb9a6206e12d3ca9647146cc08ba73b600b003d23bfb92d560e68ac50d651d586fb76eba4ca524ab6630c36867b474ef6dd6cf29bbc130aedea3ae608f670bacb160c8a7768285ddce705df245bc456c21d7ed4deaef57e01f06f52e7f091ea8471691c47aa8197896bb3921faa6ccb20ec0e6b0fc2f83145b4b19f3462d43b72181526a11cef509950741b74c572453acf66fe76e79f714ae624726f1bae7965040acc2824f92c5820d4bb29983ff541109d2ccd95d78c8361a1e4fe379f6072da0ab72dd3342ef952ac81574be431c0a893ad6bcc920a589b675bcab186dfd29e5c4b5d314f6e7dcd30c164cd313b949aa9b8bb478b85534b88d91b8aa51f00856bc58216b79991d087bc2fb112befb1c8292d17f25d7742c5680902e340ad23f3cbe4e98a9351b450a4f7306ac5b93e2bc612fc766693b5bf002ebe227d5711b5e4a7d95daf377015255fa8647ad4a4d6a2467cc52134b4dbee246982dc1041d5a0da89074dd168d7fa137b188d626be9b8c49480442e05d673dac72d58d55590e5100562709ad43cffbefc91d5205cb8b41c0fa739199140ee7e3d4af062a4a4fcd925794f85cccf42acc83d920631eca86cf2f427066ccfcb116c1d4febec10abe4ea0447e4a9935d7d59fd0ed15341f4fd956ccaea5836269a8663993473c7c45a4e2569fe2272f1da47ab786917dd12f67ce58e94343569bfff30a0cb9f7fb160bd9694b1994dd58093f1d3c29c0996e529a6613b4f49574a7f16f19cbe97f00325065559fc55763de9db98b552024f117d2c5ea6bd51a91962c12096accf1d20267bf9ecca6691acc1b52634545fc4bf46a353c6457e8dddaf76ba77c2b3db74db731cf40d2b65f71841dfdaec2fdb0a0ffd201446dc3d4e5c68b656b562a562d9a29591e5e3e8202087b8879a3229de18c86794905607ad4c9b1fc792577ba27110fbd1185107ab1f94269dd93a1fc989157675de4229f5ba053e29582f15f7d5343469703149de9e4bbb9d2a90e865bf4b22b0d93b6f0d05a5cb33c94d130a69dfed1fbcc420ecefb6654bb63e7d2ef8f5fb27c99266a596617829b8995ad87921c7793198ca42d1dde6a58c4847b5806c26aac794f1e408778baef5e44bd8af05ac5df3ce2ee4a96af8b63cbabc1f0b56977df44b3807353c71c11e3486a3c7fbfc435b03f0f7896cc7ba287991707265e123ac181638a639becd773c2357a59f16de42b55c9e62562e6ccfb60446b36ec6606dc270eb05f3cb21b3bb925a44a217ddda0ede206ba90039cbf74e52d04c191d516caaefad50cb934d514461f962e1d99b0cf150a9f4a291731fe914311e03dc193b7d73b93ee96163c5cb7127bd1240f146a5f56fdd7fce2d78a11708d572c332f65d82ff8033213fa6d546f8a726304022f01efb8920d14eca5f457aea7ed58f1f782919afe7a74c81a8b60cdb39d59593984e17a51da4d172bd49ae6c465e0ab9477925ae75a34d78c8a9f43bbccfc6856c55acadca92aba13ba0da59a3563c5fdd9b332efa733da2575bf22dffd64b74a0ef3f760657fc05ee7e6c7aace855ae7e2e1db4ecd42404c797497f89e2d49f74676f64e1f0a47d80ef828ec2de43f549b9ac650a715905e90ebe2b1d806d8e0d7a8b06bc47c5d681115085838d4bba876a808b3330c6a6b0869f330c32d9c4cd4b05bc92f6cd93b905e30da9ce9c0d457150d31a90aee376a2a89fc2ff9d7d93a100f0ce010d8dd8a8584dddb206a53382605c05122d294b9fd4b3cf1842afb5266f21b59d879def5e1d847330e0da0aa9764cf23621e323167782a91439d1045f125b1c3a5d55c7ef9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 880(Div. 2)</title>
      <link href="/2023/06/29/Codeforces%20Round%20880%20(Div.%202)/"/>
      <url>/2023/06/29/Codeforces%20Round%20880%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p>挂个传送门：<a href="https://codeforces.com/contest/1836">Dashboard - Codeforces Round 880 (Div. 2) - Codeforces</a></p><p>评价是，切完ABC蹲大牢</p><h5 id="b.-astrophysicists">B. Astrophysicists</h5><p><strong>题意</strong>：</p><p><span class="math inline">\(k*g\)</span> 银币分配给 <span class="math inline">\(n\)</span> 人，设一个人分到 <span class="math inline">\(x\)</span> 银币，<span class="math inline">\(r=x \mod g\)</span> 对每人有补正如下：</p><ul><li>若 <span class="math inline">\(r\geq \lceil \frac{g}{2} \rceil\)</span>，则向上修正至 <span class="math inline">\(x+(g-r)\)</span>；</li><li>否则，向下修正至 <span class="math inline">\(x-r\)</span> .</li></ul><p>求分配完后，剩下的银币数目之和最小值。</p><p><strong>题解</strong>：</p><p>​ 什么黑心资本家出的题。</p><p>​ 考虑一个人分配到的银币，从 <span class="math inline">\(0\)</span> 增加至 <span class="math inline">\(g\)</span> 。增加至 <span class="math inline">\(\lceil \frac{g}{2}\rceil\)</span> 前，经补正他所获得银币为 <span class="math inline">\(0\)</span> ，原先分配银币即剩下；增加至 <span class="math inline">\(\lceil \frac{g}{2}\rceil\)</span> 后，我们需要额外的银币为其补正。 故对一个人来说，我们的收益和他分配的银币呈一个由两直线构成的分段函数，从 <span class="math inline">\(0\)</span> 开始并且回到 <span class="math inline">\(0\)</span> 。我们的最大收益点在 <span class="math inline">\(p=\lceil \frac{g}{2}\rceil-1\)</span> 。</p><p>​ 此时可以分成两种情况讨论：</p><ul><li><p>若 $n<em>p k</em>g $ ，那所有人贪心分配（至多 <span class="math inline">\(p\)</span> ），最后每个人分配到 <span class="math inline">\(0\)</span> ，方案显然最优，结果为 $ k*g $ 。</p></li><li><p>若<span class="math inline">\(n*p&lt; k*g\)</span>， 最优分配结果为<span class="math inline">\(g\lfloor \frac{p*n}{g} \rfloor\)</span> 。</p></li></ul><p>​ 讨论下第二种情况，为什么是这个式子。</p><p>​ 易知，最优方案不存在向上修正。设第 <span class="math inline">\(i\)</span> 个人分配到 <span class="math inline">\(x_i\)</span> 银币，则有<span class="math inline">\(\sum x_i = k*g\)</span>，因此我们的收益 <span class="math inline">\(income\)</span> 满足 $income=(x_i% g)(x_i)% g $ 。这是一个比较重要的性质，答案必定是 <span class="math inline">\(g\)</span> 的倍数。</p><p>​ 设 <span class="math inline">\(income=kg\)</span> ，则必有 $kg p*n $ （答案上限就是 <span class="math inline">\(p*n\)</span> ），故 $income = kg = g  { g } $</p><p><strong>code</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n, k, g;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k &gt;&gt; g;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> p = ((g + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p * n &gt;= k * g) &#123;</span><br><span class="line">        cout &lt;&lt; k * g &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; p * n / g * g &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c.-k-th-equality">C. K-th equality</h5><p><strong>题意</strong>：</p><p>​ 构造第 <span class="math inline">\(k\)</span> 大字典序字符串，其中字符串形如 <span class="math inline">\(A\)</span> 位数 <span class="math inline">\(+B\)</span> 位数 <span class="math inline">\(=C\)</span> 位数。</p><p><strong>题解</strong>：</p><p>​ 体感很简单的一道题。</p><p>​ 设 <span class="math inline">\(x\)</span> 位数的范围为 <span class="math inline">\([L_x, R_x)\)</span></p><p>​ 由于 <span class="math inline">\(A\leq 6\)</span>，因此枚举 <span class="math inline">\(x+y=z\)</span> 中的 <span class="math inline">\(x\)</span> 。</p><p>​ 接下来寻找对 <span class="math inline">\(y\)</span> 的限制条件。</p><ul><li><span class="math inline">\(L_B\leq y&lt;R_B\)</span></li><li><span class="math inline">\(L_C\leq z&lt; R_C\)</span> ，即 <span class="math inline">\(L_C\leq x+y &lt;R_C\)</span></li></ul><p>​ 由此可得限制条件 <span class="math inline">\(max\{L_B,L_C-x\}\leq y&lt;min\{R_B,R_C+x\}\)</span></p><p>​ 然后边统计边算即可。复杂度 <span class="math inline">\(O (10^A)\)</span></p><p><strong>code</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> mn[<span class="number">8</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">10000</span>, <span class="number">100000</span>, <span class="number">1000000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> A, B, C;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k;</span><br><span class="line">    cin &gt;&gt; A &gt;&gt; B &gt;&gt; C &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> mx = mn[A + <span class="number">1</span>], i = mn[A]; i &lt; mx; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">max</span>(mn[C] - i, mn[B]);</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">min</span>(mn[C + <span class="number">1</span>] - i, mn[B + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= r - l) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; l + k - <span class="number">1</span> &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; i + l + k - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> k -= r - l;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="e.-twin-clusters">E. Twin Clusters</h5><p><strong>题意：</strong></p><p>​ 给定长为 <span class="math inline">\(2^{k+1}\)</span> 的一序列，值域为 <span class="math inline">\([0,4^k)\)</span> 。求原序列两不相交子区间，使得两子区间中数字的异或和相同。</p><p><strong>题解：</strong></p><p>​ 瞄了眼 Tutorial ，不太好想。一开始想过类似于分块的思路，实际解法也差不多，不过只取一个块。</p><p>​ 先关注二进制下低 <span class="math inline">\(k\)</span> 位。算上空串，共有 <span class="math inline">\(2^{k+1}+1\)</span> 个值，但实际上低 <span class="math inline">\(k\)</span> 位值域 <span class="math inline">\([0,2^k-1]\)</span> 共 <span class="math inline">\(2^k\)</span> 个值，因此根据鸽巢原理，我们可以匹配出 <span class="math inline">\(2^k+1\)</span> 个区间 <span class="math inline">\((l_i, r_i]\)</span>，使得这每个区间 <span class="math inline">\(S_{r_i} \ xor\ S_{l_i}\)</span> 的低<span class="math inline">\(k\)</span> 位均为 <span class="math inline">\(0\)</span> 。</p><p>​ 接下来关注这些线段的高 <span class="math inline">\(k\)</span> 位。采取同样的方法，根据鸽巢原理，必定存在两个子区间高 <span class="math inline">\(k\)</span> 位的异或和相同，取这两子区间的交即为结果。</p><p><strong>code</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp(x, y) make_pair(x, y)</span></span><br><span class="line">    <span class="type">int</span> k, n;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    n = (<span class="number">1</span> &lt;&lt; (k + <span class="number">1</span>));</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">g</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">s</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt; &gt; Line;</span><br><span class="line">    unordered_map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt; mp;</span><br><span class="line">    mp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    g[<span class="number">0</span>] = s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> lbit = (<span class="number">1ll</span> &lt;&lt; k) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> hbit = (((<span class="number">1ll</span> &lt;&lt; (k &lt;&lt; <span class="number">1</span>)) - <span class="number">1</span>) ^ lbit);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; g[i];</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] ^ g[i];</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> p = (s[i] &amp; lbit);</span><br><span class="line">        <span class="keyword">if</span> (mp[p] || p == <span class="number">0</span>) Line.<span class="built_in">push_back</span>(<span class="built_in">mp</span>(mp[p], i));</span><br><span class="line">        mp[p] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    unordered_map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">int</span>&gt; pos;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> line: Line) &#123;</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> p = ((s[line.second] ^ s[line.first]) &amp; hbit);</span><br><span class="line">        <span class="keyword">if</span> (pos[p] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> l1 = Line[pos[p] - <span class="number">1</span>], l2 = line;</span><br><span class="line">            <span class="keyword">if</span> (l1.second &lt;= l2.first) &#123;</span><br><span class="line">                cout &lt;&lt; l1.first + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; l1.second &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; l2.first + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; l2.second &lt;&lt; endl;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; <span class="built_in">min</span>(l1.first, l2.first) + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="built_in">max</span>(l1.first, l2.first) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; l1.second + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span></span><br><span class="line">                     &lt;&lt; l2.second &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> pos[p] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d.-lottery">D. Lottery</h5><p><strong>题意：</strong></p><p>​ 给定 <span class="math inline">\(n\)</span> 个人，每人买一张彩票，票号在 <span class="math inline">\([0,m]\)</span> 范围内。设开奖号为 <span class="math inline">\(x\)</span> ，则票号距离 <span class="math inline">\(x\)</span> 最近的 <span class="math inline">\(k\)</span> 人中奖，平局情况则编号小的获胜。作为第 <span class="math inline">\(n+1\)</span> 人，你编号最大，求最小位置，使得能够使你中奖的编号尽可能多。</p><p><strong>题解：</strong></p><p>​ 非常繁琐的一道题。先来看这幅图（截自 tutorials ）：</p><figure><img src="https://raw.githubusercontent.com/mlger/Pict/main/202307021737523.png" alt="" /><figcaption>image-20230702173756179</figcaption></figure><p>​ 假设当前选择编号为 <span class="math inline">\(c\)</span> ，<span class="math inline">\(c\)</span> 的前 <span class="math inline">\(k\)</span> 名为 <span class="math inline">\(a\)</span> ，后 <span class="math inline">\(k\)</span> 名为 <span class="math inline">\(b\)</span> 。则中奖区间为 <span class="math inline">\((\lfloor \frac{a+c}{2} \rfloor, \lceil \frac{b+c}{2} \rceil)\)</span> 。由此计算结果。</p><p>​ 接下来讨论需要枚举哪些 <span class="math inline">\(c\)</span> 。由上面图可知，处在 <span class="math inline">\((d,e)\)</span> 区间内时，中奖区间虽然改变，但实际中奖区间长度不变（<span class="math inline">\(a\)</span> 和 <span class="math inline">\(b\)</span> 没有变化）。故我们只需讨论 <span class="math inline">\(n\)</span> 个人所选号码的前后两三个数即可。 当然，特别考虑边界情况。</p><p>​ 输入量较大，需要注意 <span class="math inline">\(IO\)</span> 效率。</p><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; v;</span><br><span class="line"><span class="type">int</span> nowl, nowr;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">calc</span><span class="params">(<span class="type">long</span> <span class="type">long</span> now_pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (nowl &lt; n &amp;&amp; v[nowl] &lt; now_pos) ++nowl;</span><br><span class="line">    <span class="keyword">while</span> (nowr &lt; n &amp;&amp; v[nowr] &lt;= now_pos) ++nowr;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> posl = nowr - k &lt; <span class="number">0</span> ? <span class="number">0</span> : (now_pos + v[nowr - k]) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> posr = nowl + k - <span class="number">1</span> &gt;= n ? m : (now_pos + v[nowl + k - <span class="number">1</span>] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0ll</span>, posr - posl + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    v.<span class="built_in">clear</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; c;</span><br><span class="line">        v.<span class="built_in">push_back</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    v.<span class="built_in">push_back</span>(m + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    nowl = nowr = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res_pos = <span class="number">0</span>, ans = <span class="built_in">calc</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> bl = i == <span class="number">0</span> ? <span class="built_in">max</span>(<span class="number">0ll</span>, v[i] - <span class="number">2</span>) : <span class="built_in">max</span>(v[i] - <span class="number">2</span>, v[i - <span class="number">1</span>] + <span class="number">3</span>);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> br = <span class="built_in">min</span>(v[i] + <span class="number">2</span>, m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> now_pos = bl; now_pos &lt;= br; now_pos++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> p = <span class="built_in">calc</span>(now_pos);</span><br><span class="line">            <span class="keyword">if</span> (p &gt; ans) &#123;</span><br><span class="line">                ans = p;</span><br><span class="line">                res_pos = now_pos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; res_pos &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios_base::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="f.-doctors-brown-hypothesis">F. Doctor's Brown Hypothesis</h5><p><strong>题意：</strong></p><p>​ 给定一有向图，求无序点对 <span class="math inline">\((u, v)\)</span> 的数目，使得 <span class="math inline">\(u\)</span> 和 <span class="math inline">\(v\)</span> 相互之间存在着长度为 <span class="math inline">\(k\)</span> 的路径，其中 <span class="math inline">\(u=v\)</span> 也被允许。</p><p><strong>题解：</strong></p><p>​ 不会。稍微翻译下 tutorial 。</p><p>​ 突破口在 <span class="math inline">\(k\geq n^3\)</span> 。显然对于所有满足答案的点对，两点都在同一个强连通分量内。于是讨论范围缩减到同一个 <span class="math inline">\(SCC\)</span> 。对强连通分量内的所有环的大小，存在一个最大公约数 <span class="math inline">\(g\)</span> 。将所有的边 <span class="math inline">\(&lt;s,t&gt;\)</span> 按照 <span class="math inline">\(t=(s+1)mod\ g\)</span> 进行染色。由于 <span class="math inline">\(k\)</span> 比较大，所以可以认为颜色相同的点都是等价的。</p><p>​ 对于一个连通分量内，满足条件的点对有以下两种：</p><ul><li><span class="math inline">\(g|k\)</span> ，则所有颜色相同点对满足条件。</li><li><span class="math inline">\(2|g\)</span> 且 <span class="math inline">\(k\equiv g/2\ mod \ g\)</span> ，则所有颜色差值为 <span class="math inline">\(g/2\)</span> 的点对满足条件</li></ul><p><strong>code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> k;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec[N];</span><br><span class="line"><span class="type">int</span> col[N], cnt_col;</span><br><span class="line"><span class="type">int</span> _stack[N], <span class="type">_t</span>, dfn[N], low[N], cnt, siz[N];</span><br><span class="line"><span class="type">bool</span> book[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//强连通分量</span></span><br><span class="line">    dfn[x] = low[x] = ++cnt;</span><br><span class="line">    _stack[++<span class="type">_t</span>] = x;</span><br><span class="line">    book[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ver: v[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[ver]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(ver);</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], low[ver]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (book[ver]) low[x] = <span class="built_in">min</span>(low[x], dfn[ver]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dfn[x] == low[x]) &#123;</span><br><span class="line">        ++cnt_col;</span><br><span class="line">        <span class="type">int</span> p;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            p = _stack[<span class="type">_t</span>];</span><br><span class="line">            col[p] = cnt_col;</span><br><span class="line">            ++siz[cnt_col];</span><br><span class="line">            book[p] = <span class="literal">false</span>;</span><br><span class="line">            --<span class="type">_t</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (p != x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag[N], dis[N];</span><br><span class="line"><span class="type">bool</span> solved[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> d, <span class="type">int</span> des)</span> </span>&#123;</span><br><span class="line">    dis[x] = d;</span><br><span class="line">    flag[x] = des;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ver: vec[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag[ver] != des) <span class="built_in">dfs</span>(ver, d + <span class="number">1</span>, des);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tag[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">draw_col</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> now, <span class="type">int</span> base_num, <span class="type">int</span> des)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//尝试染色</span></span><br><span class="line">    num[x] = now;</span><br><span class="line">    tag[x] = des;</span><br><span class="line">    <span class="type">bool</span> Flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ver: vec[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (tag[ver] != des) Flag &amp;= <span class="built_in">draw_col</span>(ver, (now + <span class="number">1</span>) % base_num, base_num, des);</span><br><span class="line">        <span class="keyword">else</span> Flag &amp;= (num[ver] == ((num[x] + <span class="number">1</span>) % base_num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt_num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Draw_col</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> now, <span class="type">int</span> base_num, <span class="type">int</span> des)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//染色，统计数目</span></span><br><span class="line">    num[x] = now;</span><br><span class="line">    tag[x] = des;</span><br><span class="line">    ++cnt_num[now];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ver: vec[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tag[ver] != des) <span class="built_in">Draw_col</span>(ver, (now + <span class="number">1</span>) % base_num, base_num, des);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!col[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y: v[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (col[i] == col[y]) vec[i].<span class="built_in">push_back</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> search_num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (solved[col[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        solved[col[i]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (siz[col[i]] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> x = i, y = vec[x][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(y, <span class="number">0</span>, y);</span><br><span class="line">        d += dis[x] + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> g = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j * j &lt;= d; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d % j != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> p = j, rem_num = <span class="number">1</span>;</span><br><span class="line">            <span class="type">bool</span> now_flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (d % p == <span class="number">0</span>) &#123;</span><br><span class="line">                ++search_num;</span><br><span class="line">                <span class="keyword">if</span> (now_flag &amp;&amp; <span class="built_in">draw_col</span>(x, <span class="number">0</span>, p, search_num)) rem_num = p;</span><br><span class="line">                <span class="keyword">else</span> now_flag = <span class="literal">false</span>;</span><br><span class="line">                p *= j;</span><br><span class="line">            &#125;</span><br><span class="line">            d /= (p / j);</span><br><span class="line">            g *= rem_num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d &gt; <span class="number">1</span> &amp;&amp; (++search_num) &amp;&amp; <span class="built_in">draw_col</span>(x, <span class="number">0</span>, d, search_num)) g *= d;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; g; j++) cnt_num[j] = <span class="number">0</span>;</span><br><span class="line">        ++search_num;</span><br><span class="line">        <span class="built_in">Draw_col</span>(x, <span class="number">0</span>, g, search_num);</span><br><span class="line">        <span class="keyword">if</span> (k % g == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; g; j++) ans += <span class="number">1ll</span> * cnt_num[j] * (cnt_num[j]+<span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (g % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; k % g == g / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; g / <span class="number">2</span>; j++) ans += <span class="number">1ll</span> * cnt_num[j] * cnt_num[j + g / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>当我开始真正爱自己</title>
      <link href="/2023/06/29/%E5%BD%93%E6%88%91%E5%BC%80%E5%A7%8B%E7%9C%9F%E6%AD%A3%E7%88%B1%E8%87%AA%E5%B7%B1/"/>
      <url>/2023/06/29/%E5%BD%93%E6%88%91%E5%BC%80%E5%A7%8B%E7%9C%9F%E6%AD%A3%E7%88%B1%E8%87%AA%E5%B7%B1/</url>
      
        <content type="html"><![CDATA[<p><em>作者：卓别林</em></p><p>当我真正开始爱自己，</p><p>我才认识到，所有的痛苦和情感的折磨，</p><p>都只是提醒我：活着，不要违背自己的本心。</p><p>今天我明白了，这叫做“真实”。</p><p>​</p><p>当我真正开始爱自己，</p><p>我才懂得，把自己的愿望强加于人，</p><p>是多么的无礼，就算我知道，时机并不成熟，</p><p>那人也还没有做好准备，</p><p>就算那个人就是我自己。</p><p>今天我明白了，这叫做“尊重”。</p><p>​</p><p>当我开始爱自己，</p><p>我不再渴求不同的人生，</p><p>我知道任何发生在我身边的事情，</p><p>都是对我成长的邀请。</p><p>如今，我称之为“成熟”。</p><p>​</p><p>当我开始真正爱自己，</p><p>我才明白，我其实一直都在正确的时间，</p><p>正确的地方，发生的一切都恰如其分。</p><p>由此我得以平静。</p><p>今天我明白了，这叫做“自信”。</p><p>​</p><p>当我真正开始爱自己，</p><p>我不再牺牲自己的自由时间，</p><p>不再去勾画什么宏伟的明天。</p><p>今天我只做有趣和快乐的事，</p><p>做自己热爱，让心欢喜的事，</p><p>用我的方式、我的韵律。</p><p>今天我明白了，这叫做“单纯”。</p><p>​</p><p>当我开始真正爱自己，</p><p>我开始远离一切不健康的东西。</p><p>不论是饮食和人物，还是事情和环境，</p><p>我远离一切让我远离本真的东西。</p><p>从前我把这叫做“追求健康的自私自利”，</p><p>但今天我明白了，这是“自爱”。</p><p>​</p><p>当我开始真正爱自己，</p><p>我不再总想着要永远正确，不犯错误。</p><p>我今天明白了，这叫做“谦逊“。</p><p>​</p><p>当我开始真正爱自己，</p><p>我不再继续沉溺于过去，</p><p>也不再为明天而忧虑，</p><p>现在我只活在一切正在发生的当下，</p><p>今天，我活在此时此地，</p><p>如此日复一日。这就叫“完美”。</p><p>​</p><p>当我开始真正爱自己，</p><p>我明白，我的思虑让我变得贫乏和病态，</p><p>但当我唤起了心灵的力量，</p><p>理智就变成了一个重要的伙伴，</p><p>这种组合我称之为，“心的智慧”。</p><p>我们无须再害怕自己和他人的分歧，</p><p>矛盾和问题，因为即使星星有时也会碰在一起，形成新的世界，今天我明白，这就是“生命”。</p>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/1970/01/01/README/"/>
      <url>/1970/01/01/README/</url>
      
        <content type="html"><![CDATA[<p>​ 本站采用 hexo 架构，部署在 github pages 上，采用 github 作为图床。建议在能够流畅访问 github 的网络环境下浏览。</p><p><img src="https://raw.githubusercontent.com/mlger/Pict/main/202307042122433.png" /></p><p>​ 看见这幅美丽的画了吗？看见了说明你能看见这幅画 (bushi)。</p><p>​ 关于左边的这个抽象的双 tags 旋转动画，我也在 diss 它，有时间再把它 ban 掉了。</p><p>维修计划：</p><ul><li>缩进调整</li><li>关闭 tags 动画</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
